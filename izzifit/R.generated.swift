//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 14 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `chartPurple`.
    static let chartPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "chartPurple")
    /// Color `clrAwardTitleLbl`.
    static let clrAwardTitleLbl = Rswift.ColorResource(bundle: R.hostingBundle, name: "clrAwardTitleLbl")
    /// Color `clrDashLinePopUp`.
    static let clrDashLinePopUp = Rswift.ColorResource(bundle: R.hostingBundle, name: "clrDashLinePopUp")
    /// Color `clrMainMapBack`.
    static let clrMainMapBack = Rswift.ColorResource(bundle: R.hostingBundle, name: "clrMainMapBack")
    /// Color `clrStartSpinLbl`.
    static let clrStartSpinLbl = Rswift.ColorResource(bundle: R.hostingBundle, name: "clrStartSpinLbl")
    /// Color `grayText`.
    static let grayText = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayText")
    /// Color `grayVw`.
    static let grayVw = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayVw")
    /// Color `greyAwards`.
    static let greyAwards = Rswift.ColorResource(bundle: R.hostingBundle, name: "greyAwards")
    /// Color `intensivePurple`.
    static let intensivePurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "intensivePurple")
    /// Color `lightGrayText`.
    static let lightGrayText = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightGrayText")
    /// Color `pinkTarget`.
    static let pinkTarget = Rswift.ColorResource(bundle: R.hostingBundle, name: "pinkTarget")
    /// Color `profileCellBack`.
    static let profileCellBack = Rswift.ColorResource(bundle: R.hostingBundle, name: "profileCellBack")
    /// Color `textTitleBlack`.
    static let textTitleBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "textTitleBlack")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "chartPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func chartPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.chartPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clrAwardTitleLbl", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clrAwardTitleLbl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clrAwardTitleLbl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clrDashLinePopUp", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clrDashLinePopUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clrDashLinePopUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clrMainMapBack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clrMainMapBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clrMainMapBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clrStartSpinLbl", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clrStartSpinLbl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clrStartSpinLbl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayVw", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayVw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayVw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "greyAwards", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greyAwards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greyAwards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "intensivePurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func intensivePurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.intensivePurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightGrayText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrayText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrayText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pinkTarget", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pinkTarget(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pinkTarget, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "profileCellBack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profileCellBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profileCellBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textTitleBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textTitleBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textTitleBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "chartPurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func chartPurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.chartPurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clrAwardTitleLbl", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clrAwardTitleLbl(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clrAwardTitleLbl.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clrDashLinePopUp", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clrDashLinePopUp(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clrDashLinePopUp.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clrMainMapBack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clrMainMapBack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clrMainMapBack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clrStartSpinLbl", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clrStartSpinLbl(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clrStartSpinLbl.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayVw", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayVw(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayVw.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "greyAwards", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func greyAwards(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.greyAwards.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "intensivePurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func intensivePurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.intensivePurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lightGrayText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGrayText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGrayText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "pinkTarget", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func pinkTarget(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.pinkTarget.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "profileCellBack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func profileCellBack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.profileCellBack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textTitleBlack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textTitleBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textTitleBlack.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 4 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"
    static let comAppleDeveloperHealthkit = true

    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    struct comAppleDeveloperHealthkitAccess {
      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 94 files.
  struct file {
    /// Resource file `10_spin_tap.wav`.
    static let _spin_tapWav = Rswift.FileResource(bundle: R.hostingBundle, name: "10_spin_tap", pathExtension: "wav")
    /// Resource file `11_spinner_main.wav`.
    static let _spinner_mainWav = Rswift.FileResource(bundle: R.hostingBundle, name: "11_spinner_main", pathExtension: "wav")
    /// Resource file `13_coins_x2.wav`.
    static let _coins_x2Wav = Rswift.FileResource(bundle: R.hostingBundle, name: "13_coins_x2", pathExtension: "wav")
    /// Resource file `14_coins_x3.wav`.
    static let _coins_x3Wav = Rswift.FileResource(bundle: R.hostingBundle, name: "14_coins_x3", pathExtension: "wav")
    /// Resource file `15_coins_pack_x2.wav`.
    static let _coins_pack_x2Wav = Rswift.FileResource(bundle: R.hostingBundle, name: "15_coins_pack_x2", pathExtension: "wav")
    /// Resource file `16_coins_pack_x3.wav`.
    static let _coins_pack_x3Wav = Rswift.FileResource(bundle: R.hostingBundle, name: "16_coins_pack_x3", pathExtension: "wav")
    /// Resource file `17_energy_x2.wav`.
    static let _energy_x2Wav = Rswift.FileResource(bundle: R.hostingBundle, name: "17_energy_x2", pathExtension: "wav")
    /// Resource file `18_energy_x3.wav`.
    static let _energy_x3Wav = Rswift.FileResource(bundle: R.hostingBundle, name: "18_energy_x3", pathExtension: "wav")
    /// Resource file `19_super_win.wav`.
    static let _super_winWav = Rswift.FileResource(bundle: R.hostingBundle, name: "19_super_win", pathExtension: "wav")
    /// Resource file `1_tap_main.wav`.
    static let _tap_mainWav = Rswift.FileResource(bundle: R.hostingBundle, name: "1_tap_main", pathExtension: "wav")
    /// Resource file `20_upgrade_building.wav`.
    static let _upgrade_buildingWav = Rswift.FileResource(bundle: R.hostingBundle, name: "20_upgrade_building", pathExtension: "wav")
    /// Resource file `21_building.wav`.
    static let _buildingWav = Rswift.FileResource(bundle: R.hostingBundle, name: "21_building", pathExtension: "wav")
    /// Resource file `22_complete_building.wav`.
    static let _complete_buildingWav = Rswift.FileResource(bundle: R.hostingBundle, name: "22_complete_building", pathExtension: "wav")
    /// Resource file `AddProductToMeal.graphql`.
    static let addProductToMealGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "AddProductToMeal", pathExtension: "graphql")
    /// Resource file `AskQuestion.graphql`.
    static let askQuestionGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "AskQuestion", pathExtension: "graphql")
    /// Resource file `AvailableGoals.graphql`.
    static let availableGoalsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "AvailableGoals", pathExtension: "graphql")
    /// Resource file `CaloriesWidget.graphql`.
    static let caloriesWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "CaloriesWidget", pathExtension: "graphql")
    /// Resource file `ChooseWorkoutWidgetModel.graphql`.
    static let chooseWorkoutWidgetModelGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ChooseWorkoutWidgetModel", pathExtension: "graphql")
    /// Resource file `DoExercise.graphql`.
    static let doExerciseGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DoExercise", pathExtension: "graphql")
    /// Resource file `DrinkWater.graphql`.
    static let drinkWaterGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DrinkWater", pathExtension: "graphql")
    /// Resource file `DrinkWidget.graphql`.
    static let drinkWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DrinkWidget", pathExtension: "graphql")
    /// Resource file `FinishMap.graphql`.
    static let finishMapGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "FinishMap", pathExtension: "graphql")
    /// Resource file `FoodGroups.graphql`.
    static let foodGroupsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "FoodGroups", pathExtension: "graphql")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `GoogleService-Info1.plist`.
    static let googleServiceInfo1Plist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info1", pathExtension: "plist")
    /// Resource file `Inter-Black.ttf`.
    static let interBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Black", pathExtension: "ttf")
    /// Resource file `Inter-BlackItalic.ttf`.
    static let interBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-BlackItalic", pathExtension: "ttf")
    /// Resource file `Inter-Bold.ttf`.
    static let interBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Bold", pathExtension: "ttf")
    /// Resource file `Inter-BoldItalic.ttf`.
    static let interBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-BoldItalic", pathExtension: "ttf")
    /// Resource file `Inter-ExtraBold.ttf`.
    static let interExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-ExtraBold", pathExtension: "ttf")
    /// Resource file `Inter-ExtraLight.ttf`.
    static let interExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-ExtraLight", pathExtension: "ttf")
    /// Resource file `Inter-Light.ttf`.
    static let interLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Light", pathExtension: "ttf")
    /// Resource file `Inter-Medium.ttf`.
    static let interMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Medium", pathExtension: "ttf")
    /// Resource file `Inter-Regular.ttf`.
    static let interRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Regular", pathExtension: "ttf")
    /// Resource file `Inter-SemiBold.ttf`.
    static let interSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-SemiBold", pathExtension: "ttf")
    /// Resource file `Inter-Thin.ttf`.
    static let interThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Thin", pathExtension: "ttf")
    /// Resource file `IzziFit_coinmaster_30s.mp4`.
    static let izziFit_coinmaster_30sMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "IzziFit_coinmaster_30s", pathExtension: "mp4")
    /// Resource file `Login.graphql`.
    static let loginGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Login", pathExtension: "graphql")
    /// Resource file `Map.graphql`.
    static let mapGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Map", pathExtension: "graphql")
    /// Resource file `Me.graphql`.
    static let meGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Me", pathExtension: "graphql")
    /// Resource file `MealsWidget.graphql`.
    static let mealsWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "MealsWidget", pathExtension: "graphql")
    /// Resource file `MoodWidget.graphql`.
    static let moodWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "MoodWidget", pathExtension: "graphql")
    /// Resource file `Moods.graphql`.
    static let moodsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Moods", pathExtension: "graphql")
    /// Resource file `Muscles.graphql`.
    static let musclesGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Muscles", pathExtension: "graphql")
    /// Resource file `OrderCreate.graphql`.
    static let orderCreateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "OrderCreate", pathExtension: "graphql")
    /// Resource file `OrderProduct.graphql`.
    static let orderProductGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "OrderProduct", pathExtension: "graphql")
    /// Resource file `PasswordForgotRequest.graphql`.
    static let passwordForgotRequestGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "PasswordForgotRequest", pathExtension: "graphql")
    /// Resource file `Products.graphql`.
    static let productsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Products", pathExtension: "graphql")
    /// Resource file `ProductsByMeal.graphql`.
    static let productsByMealGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ProductsByMeal", pathExtension: "graphql")
    /// Resource file `ProfileDelete.graphql`.
    static let profileDeleteGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ProfileDelete", pathExtension: "graphql")
    /// Resource file `ProfileUpdate.graphql`.
    static let profileUpdateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ProfileUpdate", pathExtension: "graphql")
    /// Resource file `Progresses.graphql`.
    static let progressesGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Progresses", pathExtension: "graphql")
    /// Resource file `Rank.graphql`.
    static let rankGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Rank", pathExtension: "graphql")
    /// Resource file `RecentProducts.graphql`.
    static let recentProductsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "RecentProducts", pathExtension: "graphql")
    /// Resource file `RecommendProducts.graphql`.
    static let recommendProductsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "RecommendProducts", pathExtension: "graphql")
    /// Resource file `RecommendWorkouts.graphql`.
    static let recommendWorkoutsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "RecommendWorkouts", pathExtension: "graphql")
    /// Resource file `RemoveProductFromMeal.graphql`.
    static let removeProductFromMealGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "RemoveProductFromMeal", pathExtension: "graphql")
    /// Resource file `SaveMood.graphql`.
    static let saveMoodGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SaveMood", pathExtension: "graphql")
    /// Resource file `SaveSleepQuality.graphql`.
    static let saveSleepQualityGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SaveSleepQuality", pathExtension: "graphql")
    /// Resource file `SaveSteps.graphql`.
    static let saveStepsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SaveSteps", pathExtension: "graphql")
    /// Resource file `SaveWeightWidget.graphql`.
    static let saveWeightWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SaveWeightWidget", pathExtension: "graphql")
    /// Resource file `SleepWidget.graphql`.
    static let sleepWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SleepWidget", pathExtension: "graphql")
    /// Resource file `SourcesByMeal.graphql`.
    static let sourcesByMealGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SourcesByMeal", pathExtension: "graphql")
    /// Resource file `SpecialWorkouts.graphql`.
    static let specialWorkoutsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SpecialWorkouts", pathExtension: "graphql")
    /// Resource file `Spin.graphql`.
    static let spinGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Spin", pathExtension: "graphql")
    /// Resource file `StartWorkout.graphql`.
    static let startWorkoutGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "StartWorkout", pathExtension: "graphql")
    /// Resource file `StepsWidget.graphql`.
    static let stepsWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "StepsWidget", pathExtension: "graphql")
    /// Resource file `ToggleMuscleInWorkouts.graphql`.
    static let toggleMuscleInWorkoutsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ToggleMuscleInWorkouts", pathExtension: "graphql")
    /// Resource file `ToggleProductInRation.graphql`.
    static let toggleProductInRationGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ToggleProductInRation", pathExtension: "graphql")
    /// Resource file `UpdateProductInMeal.graphql`.
    static let updateProductInMealGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "UpdateProductInMeal", pathExtension: "graphql")
    /// Resource file `UpgradeBuilding.graphql`.
    static let upgradeBuildingGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "UpgradeBuilding", pathExtension: "graphql")
    /// Resource file `WeightsWidget.graphql`.
    static let weightsWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "WeightsWidget", pathExtension: "graphql")
    /// Resource file `WidgetList.graphql`.
    static let widgetListGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "WidgetList", pathExtension: "graphql")
    /// Resource file `WorkoutAttemptUpdate.graphql`.
    static let workoutAttemptUpdateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkoutAttemptUpdate", pathExtension: "graphql")
    /// Resource file `WorkoutById.graphql`.
    static let workoutByIdGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkoutById", pathExtension: "graphql")
    /// Resource file `WorkoutTypes.graphql`.
    static let workoutTypesGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkoutTypes", pathExtension: "graphql")
    /// Resource file `Workouts.graphql`.
    static let workoutsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Workouts", pathExtension: "graphql")
    /// Resource file `WorkoutsWidget.graphql`.
    static let workoutsWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkoutsWidget", pathExtension: "graphql")
    /// Resource file `coin_v2.gif`.
    static let coin_v2Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "coin_v2", pathExtension: "gif")
    /// Resource file `coin_v3.gif`.
    static let coin_v3Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "coin_v3", pathExtension: "gif")
    /// Resource file `coins_header.json`.
    static let coins_headerJson = Rswift.FileResource(bundle: R.hostingBundle, name: "coins_header", pathExtension: "json")
    /// Resource file `confetti.json`.
    static let confettiJson = Rswift.FileResource(bundle: R.hostingBundle, name: "confetti", pathExtension: "json")
    /// Resource file `congrads_anim.json`.
    static let congrads_animJson = Rswift.FileResource(bundle: R.hostingBundle, name: "congrads_anim", pathExtension: "json")
    /// Resource file `construction3.gif`.
    static let construction3Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "construction3", pathExtension: "gif")
    /// Resource file `energy_anim.json`.
    static let energy_animJson = Rswift.FileResource(bundle: R.hostingBundle, name: "energy_anim", pathExtension: "json")
    /// Resource file `fun_anim.json`.
    static let fun_animJson = Rswift.FileResource(bundle: R.hostingBundle, name: "fun_anim", pathExtension: "json")
    /// Resource file `menu_anim.json`.
    static let menu_animJson = Rswift.FileResource(bundle: R.hostingBundle, name: "menu_anim", pathExtension: "json")
    /// Resource file `point_anim.json`.
    static let point_animJson = Rswift.FileResource(bundle: R.hostingBundle, name: "point_anim", pathExtension: "json")
    /// Resource file `progress.graphql`.
    static let progressGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "progress", pathExtension: "graphql")
    /// Resource file `ray.gif`.
    static let rayGif = Rswift.FileResource(bundle: R.hostingBundle, name: "ray", pathExtension: "gif")
    /// Resource file `smoke_anim.json`.
    static let smoke_animJson = Rswift.FileResource(bundle: R.hostingBundle, name: "smoke_anim", pathExtension: "json")
    /// Resource file `spark_anim.json`.
    static let spark_animJson = Rswift.FileResource(bundle: R.hostingBundle, name: "spark_anim", pathExtension: "json")
    /// Resource file `spin_button_anim.json`.
    static let spin_button_animJson = Rswift.FileResource(bundle: R.hostingBundle, name: "spin_button_anim", pathExtension: "json")
    /// Resource file `winner.json`.
    static let winnerJson = Rswift.FileResource(bundle: R.hostingBundle, name: "winner", pathExtension: "json")

    /// `bundle.url(forResource: "10_spin_tap", withExtension: "wav")`
    static func _spin_tapWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._spin_tapWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "11_spinner_main", withExtension: "wav")`
    static func _spinner_mainWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._spinner_mainWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "13_coins_x2", withExtension: "wav")`
    static func _coins_x2Wav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._coins_x2Wav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "14_coins_x3", withExtension: "wav")`
    static func _coins_x3Wav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._coins_x3Wav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "15_coins_pack_x2", withExtension: "wav")`
    static func _coins_pack_x2Wav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._coins_pack_x2Wav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "16_coins_pack_x3", withExtension: "wav")`
    static func _coins_pack_x3Wav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._coins_pack_x3Wav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "17_energy_x2", withExtension: "wav")`
    static func _energy_x2Wav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._energy_x2Wav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "18_energy_x3", withExtension: "wav")`
    static func _energy_x3Wav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._energy_x3Wav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "19_super_win", withExtension: "wav")`
    static func _super_winWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._super_winWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "1_tap_main", withExtension: "wav")`
    static func _tap_mainWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._tap_mainWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "20_upgrade_building", withExtension: "wav")`
    static func _upgrade_buildingWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._upgrade_buildingWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "21_building", withExtension: "wav")`
    static func _buildingWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._buildingWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "22_complete_building", withExtension: "wav")`
    static func _complete_buildingWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._complete_buildingWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AddProductToMeal", withExtension: "graphql")`
    static func addProductToMealGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.addProductToMealGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AskQuestion", withExtension: "graphql")`
    static func askQuestionGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.askQuestionGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AvailableGoals", withExtension: "graphql")`
    static func availableGoalsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.availableGoalsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CaloriesWidget", withExtension: "graphql")`
    static func caloriesWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.caloriesWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ChooseWorkoutWidgetModel", withExtension: "graphql")`
    static func chooseWorkoutWidgetModelGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.chooseWorkoutWidgetModelGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DoExercise", withExtension: "graphql")`
    static func doExerciseGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.doExerciseGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DrinkWater", withExtension: "graphql")`
    static func drinkWaterGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.drinkWaterGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DrinkWidget", withExtension: "graphql")`
    static func drinkWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.drinkWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FinishMap", withExtension: "graphql")`
    static func finishMapGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.finishMapGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FoodGroups", withExtension: "graphql")`
    static func foodGroupsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.foodGroupsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info1", withExtension: "plist")`
    static func googleServiceInfo1Plist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfo1Plist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Black", withExtension: "ttf")`
    static func interBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-BlackItalic", withExtension: "ttf")`
    static func interBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Bold", withExtension: "ttf")`
    static func interBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-BoldItalic", withExtension: "ttf")`
    static func interBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-ExtraBold", withExtension: "ttf")`
    static func interExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-ExtraLight", withExtension: "ttf")`
    static func interExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Light", withExtension: "ttf")`
    static func interLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Medium", withExtension: "ttf")`
    static func interMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Regular", withExtension: "ttf")`
    static func interRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-SemiBold", withExtension: "ttf")`
    static func interSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Thin", withExtension: "ttf")`
    static func interThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "IzziFit_coinmaster_30s", withExtension: "mp4")`
    static func izziFit_coinmaster_30sMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.izziFit_coinmaster_30sMp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Login", withExtension: "graphql")`
    static func loginGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loginGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Map", withExtension: "graphql")`
    static func mapGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mapGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Me", withExtension: "graphql")`
    static func meGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.meGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MealsWidget", withExtension: "graphql")`
    static func mealsWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mealsWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MoodWidget", withExtension: "graphql")`
    static func moodWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.moodWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Moods", withExtension: "graphql")`
    static func moodsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.moodsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Muscles", withExtension: "graphql")`
    static func musclesGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.musclesGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OrderCreate", withExtension: "graphql")`
    static func orderCreateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.orderCreateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OrderProduct", withExtension: "graphql")`
    static func orderProductGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.orderProductGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PasswordForgotRequest", withExtension: "graphql")`
    static func passwordForgotRequestGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.passwordForgotRequestGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Products", withExtension: "graphql")`
    static func productsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.productsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ProductsByMeal", withExtension: "graphql")`
    static func productsByMealGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.productsByMealGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ProfileDelete", withExtension: "graphql")`
    static func profileDeleteGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.profileDeleteGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ProfileUpdate", withExtension: "graphql")`
    static func profileUpdateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.profileUpdateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Progresses", withExtension: "graphql")`
    static func progressesGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.progressesGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rank", withExtension: "graphql")`
    static func rankGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rankGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RecentProducts", withExtension: "graphql")`
    static func recentProductsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recentProductsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RecommendProducts", withExtension: "graphql")`
    static func recommendProductsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recommendProductsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RecommendWorkouts", withExtension: "graphql")`
    static func recommendWorkoutsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recommendWorkoutsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RemoveProductFromMeal", withExtension: "graphql")`
    static func removeProductFromMealGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.removeProductFromMealGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SaveMood", withExtension: "graphql")`
    static func saveMoodGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.saveMoodGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SaveSleepQuality", withExtension: "graphql")`
    static func saveSleepQualityGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.saveSleepQualityGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SaveSteps", withExtension: "graphql")`
    static func saveStepsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.saveStepsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SaveWeightWidget", withExtension: "graphql")`
    static func saveWeightWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.saveWeightWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SleepWidget", withExtension: "graphql")`
    static func sleepWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sleepWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SourcesByMeal", withExtension: "graphql")`
    static func sourcesByMealGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourcesByMealGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SpecialWorkouts", withExtension: "graphql")`
    static func specialWorkoutsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.specialWorkoutsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Spin", withExtension: "graphql")`
    static func spinGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.spinGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "StartWorkout", withExtension: "graphql")`
    static func startWorkoutGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.startWorkoutGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "StepsWidget", withExtension: "graphql")`
    static func stepsWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stepsWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToggleMuscleInWorkouts", withExtension: "graphql")`
    static func toggleMuscleInWorkoutsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toggleMuscleInWorkoutsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToggleProductInRation", withExtension: "graphql")`
    static func toggleProductInRationGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toggleProductInRationGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "UpdateProductInMeal", withExtension: "graphql")`
    static func updateProductInMealGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.updateProductInMealGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "UpgradeBuilding", withExtension: "graphql")`
    static func upgradeBuildingGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.upgradeBuildingGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WeightsWidget", withExtension: "graphql")`
    static func weightsWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.weightsWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WidgetList", withExtension: "graphql")`
    static func widgetListGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.widgetListGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WorkoutAttemptUpdate", withExtension: "graphql")`
    static func workoutAttemptUpdateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workoutAttemptUpdateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WorkoutById", withExtension: "graphql")`
    static func workoutByIdGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workoutByIdGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WorkoutTypes", withExtension: "graphql")`
    static func workoutTypesGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workoutTypesGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Workouts", withExtension: "graphql")`
    static func workoutsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workoutsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WorkoutsWidget", withExtension: "graphql")`
    static func workoutsWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workoutsWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "coin_v2", withExtension: "gif")`
    static func coin_v2Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.coin_v2Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "coin_v3", withExtension: "gif")`
    static func coin_v3Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.coin_v3Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "coins_header", withExtension: "json")`
    static func coins_headerJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.coins_headerJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "confetti", withExtension: "json")`
    static func confettiJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.confettiJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "congrads_anim", withExtension: "json")`
    static func congrads_animJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.congrads_animJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "construction3", withExtension: "gif")`
    static func construction3Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.construction3Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "energy_anim", withExtension: "json")`
    static func energy_animJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.energy_animJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fun_anim", withExtension: "json")`
    static func fun_animJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fun_animJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "menu_anim", withExtension: "json")`
    static func menu_animJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.menu_animJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "point_anim", withExtension: "json")`
    static func point_animJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.point_animJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "progress", withExtension: "graphql")`
    static func progressGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.progressGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ray", withExtension: "gif")`
    static func rayGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rayGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "smoke_anim", withExtension: "json")`
    static func smoke_animJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.smoke_animJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "spark_anim", withExtension: "json")`
    static func spark_animJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.spark_animJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "spin_button_anim", withExtension: "json")`
    static func spin_button_animJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.spin_button_animJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "winner", withExtension: "json")`
    static func winnerJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.winnerJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 11 fonts.
  struct font: Rswift.Validatable {
    /// Font `Inter-BlackItalic`.
    static let interBlackItalic = Rswift.FontResource(fontName: "Inter-BlackItalic")
    /// Font `Inter-Black`.
    static let interBlack = Rswift.FontResource(fontName: "Inter-Black")
    /// Font `Inter-BoldItalic`.
    static let interBoldItalic = Rswift.FontResource(fontName: "Inter-BoldItalic")
    /// Font `Inter-Bold`.
    static let interBold = Rswift.FontResource(fontName: "Inter-Bold")
    /// Font `Inter-ExtraBold`.
    static let interExtraBold = Rswift.FontResource(fontName: "Inter-ExtraBold")
    /// Font `Inter-ExtraLight`.
    static let interExtraLight = Rswift.FontResource(fontName: "Inter-ExtraLight")
    /// Font `Inter-Light`.
    static let interLight = Rswift.FontResource(fontName: "Inter-Light")
    /// Font `Inter-Medium`.
    static let interMedium = Rswift.FontResource(fontName: "Inter-Medium")
    /// Font `Inter-Regular`.
    static let interRegular = Rswift.FontResource(fontName: "Inter-Regular")
    /// Font `Inter-SemiBold`.
    static let interSemiBold = Rswift.FontResource(fontName: "Inter-SemiBold")
    /// Font `Inter-Thin`.
    static let interThin = Rswift.FontResource(fontName: "Inter-Thin")

    /// `UIFont(name: "Inter-Black", size: ...)`
    static func interBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBlack, size: size)
    }

    /// `UIFont(name: "Inter-BlackItalic", size: ...)`
    static func interBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBlackItalic, size: size)
    }

    /// `UIFont(name: "Inter-Bold", size: ...)`
    static func interBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBold, size: size)
    }

    /// `UIFont(name: "Inter-BoldItalic", size: ...)`
    static func interBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBoldItalic, size: size)
    }

    /// `UIFont(name: "Inter-ExtraBold", size: ...)`
    static func interExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interExtraBold, size: size)
    }

    /// `UIFont(name: "Inter-ExtraLight", size: ...)`
    static func interExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interExtraLight, size: size)
    }

    /// `UIFont(name: "Inter-Light", size: ...)`
    static func interLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interLight, size: size)
    }

    /// `UIFont(name: "Inter-Medium", size: ...)`
    static func interMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interMedium, size: size)
    }

    /// `UIFont(name: "Inter-Regular", size: ...)`
    static func interRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interRegular, size: size)
    }

    /// `UIFont(name: "Inter-SemiBold", size: ...)`
    static func interSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interSemiBold, size: size)
    }

    /// `UIFont(name: "Inter-Thin", size: ...)`
    static func interThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interThin, size: size)
    }

    static func validate() throws {
      if R.font.interBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Black' could not be loaded, is 'Inter-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-BlackItalic' could not be loaded, is 'Inter-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Bold' could not be loaded, is 'Inter-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-BoldItalic' could not be loaded, is 'Inter-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-ExtraBold' could not be loaded, is 'Inter-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-ExtraLight' could not be loaded, is 'Inter-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Light' could not be loaded, is 'Inter-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Medium' could not be loaded, is 'Inter-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Regular' could not be loaded, is 'Inter-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-SemiBold' could not be loaded, is 'Inter-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Thin' could not be loaded, is 'Inter-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 403 images.
  struct image {
    /// Image `MoodChartBack`.
    static let moodChartBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoodChartBack")
    /// Image `Selected1Scale`.
    static let selected1Scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selected1Scale")
    /// Image `Selected2Scale`.
    static let selected2Scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selected2Scale")
    /// Image `Selected3Scale`.
    static let selected3Scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selected3Scale")
    /// Image `Selected4Scale`.
    static let selected4Scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selected4Scale")
    /// Image `Selected5Scale`.
    static let selected5Scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selected5Scale")
    /// Image `Unselected1Scale`.
    static let unselected1Scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unselected1Scale")
    /// Image `Unselected2Scale`.
    static let unselected2Scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unselected2Scale")
    /// Image `Unselected3Scale`.
    static let unselected3Scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unselected3Scale")
    /// Image `Unselected4Scale`.
    static let unselected4Scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unselected4Scale")
    /// Image `Unselected5Scale`.
    static let unselected5Scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unselected5Scale")
    /// Image `arrow_right_ic`.
    static let arrow_right_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right_ic")
    /// Image `auth_apple_ic`.
    static let auth_apple_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "auth_apple_ic")
    /// Image `auth_fb_ic`.
    static let auth_fb_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "auth_fb_ic")
    /// Image `auth_note_see_pass_ic`.
    static let auth_note_see_pass_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "auth_note_see_pass_ic")
    /// Image `auth_see_pass_ic`.
    static let auth_see_pass_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "auth_see_pass_ic")
    /// Image `backBtn`.
    static let backBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "backBtn")
    /// Image `ballAward`.
    static let ballAward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ballAward")
    /// Image `buildDone`.
    static let buildDone = Rswift.ImageResource(bundle: R.hostingBundle, name: "buildDone")
    /// Image `buildPopUpBack`.
    static let buildPopUpBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "buildPopUpBack")
    /// Image `coin_v2.gif`.
    static let coin_v2Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "coin_v2.gif")
    /// Image `coin_v3.gif`.
    static let coin_v3Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "coin_v3.gif")
    /// Image `construction3.gif`.
    static let construction3Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "construction3.gif")
    /// Image `deersFinish`.
    static let deersFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "deersFinish")
    /// Image `deersFirst`.
    static let deersFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "deersFirst")
    /// Image `deersFourth`.
    static let deersFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "deersFourth")
    /// Image `deersSecond`.
    static let deersSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "deersSecond")
    /// Image `deersStart`.
    static let deersStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "deersStart")
    /// Image `deersThird`.
    static let deersThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "deersThird")
    /// Image `dollar`.
    static let dollar = Rswift.ImageResource(bundle: R.hostingBundle, name: "dollar")
    /// Image `doubleLightning`.
    static let doubleLightning = Rswift.ImageResource(bundle: R.hostingBundle, name: "doubleLightning")
    /// Image `dummyAward`.
    static let dummyAward = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummyAward")
    /// Image `dummyFace`.
    static let dummyFace = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummyFace")
    /// Image `en_flag`.
    static let en_flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "en_flag")
    /// Image `en_hammer`.
    static let en_hammer = Rswift.ImageResource(bundle: R.hostingBundle, name: "en_hammer")
    /// Image `en_lightning`.
    static let en_lightning = Rswift.ImageResource(bundle: R.hostingBundle, name: "en_lightning")
    /// Image `en_moneyBag`.
    static let en_moneyBag = Rswift.ImageResource(bundle: R.hostingBundle, name: "en_moneyBag")
    /// Image `en_pound`.
    static let en_pound = Rswift.ImageResource(bundle: R.hostingBundle, name: "en_pound")
    /// Image `energy_arrow_back_ic`.
    static let energy_arrow_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_arrow_back_ic")
    /// Image `energy_arrow_down_ic`.
    static let energy_arrow_down_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_arrow_down_ic")
    /// Image `energy_arrow_forward_ic`.
    static let energy_arrow_forward_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_arrow_forward_ic")
    /// Image `energy_coins_ic`.
    static let energy_coins_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_coins_ic")
    /// Image `energy_energy_ic`.
    static let energy_energy_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_energy_ic")
    /// Image `energy_eyea_ic`.
    static let energy_eyea_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_eyea_ic")
    /// Image `energy_info_ic`.
    static let energy_info_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_info_ic")
    /// Image `energy_meals_add_ic`.
    static let energy_meals_add_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_meals_add_ic")
    /// Image `energy_mood_badly_ic`.
    static let energy_mood_badly_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_mood_badly_ic")
    /// Image `energy_mood_good_ic`.
    static let energy_mood_good_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_mood_good_ic")
    /// Image `energy_mood_not_bad_ic`.
    static let energy_mood_not_bad_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_mood_not_bad_ic")
    /// Image `energy_today_pin_ic`.
    static let energy_today_pin_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_today_pin_ic")
    /// Image `energy_water_active_ic`.
    static let energy_water_active_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_water_active_ic")
    /// Image `energy_water_empty_ic`.
    static let energy_water_empty_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_water_empty_ic")
    /// Image `energy_water_flash_ic`.
    static let energy_water_flash_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_water_flash_ic")
    /// Image `energy_weight_selected_ic`.
    static let energy_weight_selected_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_weight_selected_ic")
    /// Image `eng_1bigBenPop`.
    static let eng_1bigBenPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_1bigBenPop")
    /// Image `eng_1bridgePop`.
    static let eng_1bridgePop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_1bridgePop")
    /// Image `eng_1busPop`.
    static let eng_1busPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_1busPop")
    /// Image `eng_1phonePop`.
    static let eng_1phonePop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_1phonePop")
    /// Image `eng_1shipPop`.
    static let eng_1shipPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_1shipPop")
    /// Image `eng_2bigBenPop`.
    static let eng_2bigBenPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_2bigBenPop")
    /// Image `eng_2bridgePop`.
    static let eng_2bridgePop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_2bridgePop")
    /// Image `eng_2busPop`.
    static let eng_2busPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_2busPop")
    /// Image `eng_2phonePop`.
    static let eng_2phonePop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_2phonePop")
    /// Image `eng_2shipPop`.
    static let eng_2shipPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_2shipPop")
    /// Image `eng_3bigBenPop`.
    static let eng_3bigBenPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_3bigBenPop")
    /// Image `eng_3bridgePop`.
    static let eng_3bridgePop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_3bridgePop")
    /// Image `eng_3busPop`.
    static let eng_3busPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_3busPop")
    /// Image `eng_3phonePop`.
    static let eng_3phonePop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_3phonePop")
    /// Image `eng_3shipPop`.
    static let eng_3shipPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_3shipPop")
    /// Image `eng_4bigBenPop`.
    static let eng_4bigBenPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_4bigBenPop")
    /// Image `eng_4bridgePop`.
    static let eng_4bridgePop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_4bridgePop")
    /// Image `eng_4busPop`.
    static let eng_4busPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_4busPop")
    /// Image `eng_4phonePop`.
    static let eng_4phonePop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_4phonePop")
    /// Image `eng_4shipPop`.
    static let eng_4shipPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_4shipPop")
    /// Image `eng_5bigBenPop`.
    static let eng_5bigBenPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_5bigBenPop")
    /// Image `eng_5bridgePop`.
    static let eng_5bridgePop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_5bridgePop")
    /// Image `eng_5busPop`.
    static let eng_5busPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_5busPop")
    /// Image `eng_5phonePop`.
    static let eng_5phonePop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_5phonePop")
    /// Image `eng_5shipPop`.
    static let eng_5shipPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_5shipPop")
    /// Image `eng_bigBenFinish`.
    static let eng_bigBenFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bigBenFinish")
    /// Image `eng_bigBenFirst`.
    static let eng_bigBenFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bigBenFirst")
    /// Image `eng_bigBenFourth`.
    static let eng_bigBenFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bigBenFourth")
    /// Image `eng_bigBenSecond`.
    static let eng_bigBenSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bigBenSecond")
    /// Image `eng_bigBenStart`.
    static let eng_bigBenStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bigBenStart")
    /// Image `eng_bigBenThird`.
    static let eng_bigBenThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bigBenThird")
    /// Image `eng_bridgeFinish`.
    static let eng_bridgeFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bridgeFinish")
    /// Image `eng_bridgeFirst`.
    static let eng_bridgeFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bridgeFirst")
    /// Image `eng_bridgeFourth`.
    static let eng_bridgeFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bridgeFourth")
    /// Image `eng_bridgeSecond`.
    static let eng_bridgeSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bridgeSecond")
    /// Image `eng_bridgeStart`.
    static let eng_bridgeStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bridgeStart")
    /// Image `eng_bridgeThird`.
    static let eng_bridgeThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_bridgeThird")
    /// Image `eng_busFinish`.
    static let eng_busFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_busFinish")
    /// Image `eng_busFirst`.
    static let eng_busFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_busFirst")
    /// Image `eng_busFourth`.
    static let eng_busFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_busFourth")
    /// Image `eng_busSecond`.
    static let eng_busSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_busSecond")
    /// Image `eng_busStart`.
    static let eng_busStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_busStart")
    /// Image `eng_busThird`.
    static let eng_busThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_busThird")
    /// Image `eng_phoneFinish`.
    static let eng_phoneFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_phoneFinish")
    /// Image `eng_phoneFirst`.
    static let eng_phoneFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_phoneFirst")
    /// Image `eng_phoneFourth`.
    static let eng_phoneFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_phoneFourth")
    /// Image `eng_phoneSecond`.
    static let eng_phoneSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_phoneSecond")
    /// Image `eng_phoneStart`.
    static let eng_phoneStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_phoneStart")
    /// Image `eng_phoneThird`.
    static let eng_phoneThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_phoneThird")
    /// Image `eng_popStart`.
    static let eng_popStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_popStart")
    /// Image `eng_shipFinish`.
    static let eng_shipFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_shipFinish")
    /// Image `eng_shipFirst`.
    static let eng_shipFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_shipFirst")
    /// Image `eng_shipFourth`.
    static let eng_shipFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_shipFourth")
    /// Image `eng_shipSecond`.
    static let eng_shipSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_shipSecond")
    /// Image `eng_shipStart`.
    static let eng_shipStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_shipStart")
    /// Image `eng_shipThird`.
    static let eng_shipThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "eng_shipThird")
    /// Image `england_freeHummer`.
    static let england_freeHummer = Rswift.ImageResource(bundle: R.hostingBundle, name: "england_freeHummer")
    /// Image `england_gameBack`.
    static let england_gameBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "england_gameBack")
    /// Image `england_slotBack`.
    static let england_slotBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "england_slotBack")
    /// Image `england_slotHouse`.
    static let england_slotHouse = Rswift.ImageResource(bundle: R.hostingBundle, name: "england_slotHouse")
    /// Image `england_uponBack`.
    static let england_uponBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "england_uponBack")
    /// Image `fishFinish`.
    static let fishFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "fishFinish")
    /// Image `fishFirst`.
    static let fishFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "fishFirst")
    /// Image `fishFourth`.
    static let fishFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "fishFourth")
    /// Image `fishSecond`.
    static let fishSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "fishSecond")
    /// Image `fishStart`.
    static let fishStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "fishStart")
    /// Image `fishThird`.
    static let fishThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "fishThird")
    /// Image `food_arrow_down_ic`.
    static let food_arrow_down_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_arrow_down_ic")
    /// Image `food_background_ic`.
    static let food_background_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_background_ic")
    /// Image `food_clear_search_ic`.
    static let food_clear_search_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_clear_search_ic")
    /// Image `food_search_ic`.
    static let food_search_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_search_ic")
    /// Image `fr_1archPop`.
    static let fr_1archPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_1archPop")
    /// Image `fr_1fieldPop`.
    static let fr_1fieldPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_1fieldPop")
    /// Image `fr_1luvrPop`.
    static let fr_1luvrPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_1luvrPop")
    /// Image `fr_1towerPop`.
    static let fr_1towerPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_1towerPop")
    /// Image `fr_1vineyardPop`.
    static let fr_1vineyardPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_1vineyardPop")
    /// Image `fr_2archPop`.
    static let fr_2archPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_2archPop")
    /// Image `fr_2fieldPop`.
    static let fr_2fieldPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_2fieldPop")
    /// Image `fr_2luvrPop`.
    static let fr_2luvrPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_2luvrPop")
    /// Image `fr_2towerPop`.
    static let fr_2towerPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_2towerPop")
    /// Image `fr_2vineyardPop`.
    static let fr_2vineyardPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_2vineyardPop")
    /// Image `fr_3archPop`.
    static let fr_3archPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_3archPop")
    /// Image `fr_3fieldPop`.
    static let fr_3fieldPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_3fieldPop")
    /// Image `fr_3luvrPop`.
    static let fr_3luvrPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_3luvrPop")
    /// Image `fr_3towerPop`.
    static let fr_3towerPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_3towerPop")
    /// Image `fr_3vineyardPop`.
    static let fr_3vineyardPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_3vineyardPop")
    /// Image `fr_4archPop`.
    static let fr_4archPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_4archPop")
    /// Image `fr_4fieldPop`.
    static let fr_4fieldPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_4fieldPop")
    /// Image `fr_4luvrPop`.
    static let fr_4luvrPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_4luvrPop")
    /// Image `fr_4towerPop`.
    static let fr_4towerPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_4towerPop")
    /// Image `fr_4vineyardPop`.
    static let fr_4vineyardPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_4vineyardPop")
    /// Image `fr_5archPop`.
    static let fr_5archPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_5archPop")
    /// Image `fr_5fieldPop`.
    static let fr_5fieldPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_5fieldPop")
    /// Image `fr_5luvrPop`.
    static let fr_5luvrPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_5luvrPop")
    /// Image `fr_5towerPop`.
    static let fr_5towerPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_5towerPop")
    /// Image `fr_5vineyardPop`.
    static let fr_5vineyardPop = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_5vineyardPop")
    /// Image `fr_archFinish`.
    static let fr_archFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_archFinish")
    /// Image `fr_archFirst`.
    static let fr_archFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_archFirst")
    /// Image `fr_archFourth`.
    static let fr_archFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_archFourth")
    /// Image `fr_archSecond`.
    static let fr_archSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_archSecond")
    /// Image `fr_archStart`.
    static let fr_archStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_archStart")
    /// Image `fr_archThird`.
    static let fr_archThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_archThird")
    /// Image `fr_fieldFinish`.
    static let fr_fieldFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_fieldFinish")
    /// Image `fr_fieldFirst`.
    static let fr_fieldFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_fieldFirst")
    /// Image `fr_fieldFourth`.
    static let fr_fieldFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_fieldFourth")
    /// Image `fr_fieldSecond`.
    static let fr_fieldSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_fieldSecond")
    /// Image `fr_fieldStart`.
    static let fr_fieldStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_fieldStart")
    /// Image `fr_fieldThird`.
    static let fr_fieldThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_fieldThird")
    /// Image `fr_flag`.
    static let fr_flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_flag")
    /// Image `fr_hammer`.
    static let fr_hammer = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_hammer")
    /// Image `fr_lightning`.
    static let fr_lightning = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_lightning")
    /// Image `fr_luvrFinish`.
    static let fr_luvrFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_luvrFinish")
    /// Image `fr_luvrFirst`.
    static let fr_luvrFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_luvrFirst")
    /// Image `fr_luvrFourth`.
    static let fr_luvrFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_luvrFourth")
    /// Image `fr_luvrSecond`.
    static let fr_luvrSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_luvrSecond")
    /// Image `fr_luvrStart`.
    static let fr_luvrStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_luvrStart")
    /// Image `fr_luvrThird`.
    static let fr_luvrThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_luvrThird")
    /// Image `fr_moneyBag`.
    static let fr_moneyBag = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_moneyBag")
    /// Image `fr_pound`.
    static let fr_pound = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_pound")
    /// Image `fr_towerFinish`.
    static let fr_towerFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_towerFinish")
    /// Image `fr_towerFirst`.
    static let fr_towerFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_towerFirst")
    /// Image `fr_towerFourth`.
    static let fr_towerFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_towerFourth")
    /// Image `fr_towerSecond`.
    static let fr_towerSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_towerSecond")
    /// Image `fr_towerStart`.
    static let fr_towerStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_towerStart")
    /// Image `fr_towerThird`.
    static let fr_towerThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_towerThird")
    /// Image `fr_vineyardFinish`.
    static let fr_vineyardFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_vineyardFinish")
    /// Image `fr_vineyardFirst`.
    static let fr_vineyardFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_vineyardFirst")
    /// Image `fr_vineyardFourth`.
    static let fr_vineyardFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_vineyardFourth")
    /// Image `fr_vineyardSecond`.
    static let fr_vineyardSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_vineyardSecond")
    /// Image `fr_vineyardStart`.
    static let fr_vineyardStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_vineyardStart")
    /// Image `fr_vineyardThird`.
    static let fr_vineyardThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr_vineyardThird")
    /// Image `france_bump`.
    static let france_bump = Rswift.ImageResource(bundle: R.hostingBundle, name: "france_bump")
    /// Image `france_freeHummer`.
    static let france_freeHummer = Rswift.ImageResource(bundle: R.hostingBundle, name: "france_freeHummer")
    /// Image `france_gameBack`.
    static let france_gameBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "france_gameBack")
    /// Image `france_slotBack`.
    static let france_slotBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "france_slotBack")
    /// Image `france_slotHouse`.
    static let france_slotHouse = Rswift.ImageResource(bundle: R.hostingBundle, name: "france_slotHouse")
    /// Image `france_uponBack`.
    static let france_uponBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "france_uponBack")
    /// Image `freeHummer`.
    static let freeHummer = Rswift.ImageResource(bundle: R.hostingBundle, name: "freeHummer")
    /// Image `gameBackOne`.
    static let gameBackOne = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameBackOne")
    /// Image `gameBackTwo`.
    static let gameBackTwo = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameBackTwo")
    /// Image `gameBarBackSafeArea`.
    static let gameBarBackSafeArea = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameBarBackSafeArea")
    /// Image `gameBarBack`.
    static let gameBarBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameBarBack")
    /// Image `gameTabBarBuildSelected`.
    static let gameTabBarBuildSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameTabBarBuildSelected")
    /// Image `gameTabBarBuild`.
    static let gameTabBarBuild = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameTabBarBuild")
    /// Image `gameTabBarEnergy`.
    static let gameTabBarEnergy = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameTabBarEnergy")
    /// Image `gameTabBarMapSelected`.
    static let gameTabBarMapSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameTabBarMapSelected")
    /// Image `gameTabBarMap`.
    static let gameTabBarMap = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameTabBarMap")
    /// Image `gameTabBarSpinSelected`.
    static let gameTabBarSpinSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameTabBarSpinSelected")
    /// Image `gameTabBarSpin`.
    static let gameTabBarSpin = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameTabBarSpin")
    /// Image `goldFinish`.
    static let goldFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "goldFinish")
    /// Image `goldFirst`.
    static let goldFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "goldFirst")
    /// Image `goldFourth`.
    static let goldFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "goldFourth")
    /// Image `goldSecond`.
    static let goldSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "goldSecond")
    /// Image `goldStart`.
    static let goldStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "goldStart")
    /// Image `goldThird`.
    static let goldThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "goldThird")
    /// Image `greenBuyBtn`.
    static let greenBuyBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenBuyBtn")
    /// Image `greenCounterImg`.
    static let greenCounterImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenCounterImg")
    /// Image `greenDone`.
    static let greenDone = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenDone")
    /// Image `hammer`.
    static let hammer = Rswift.ImageResource(bundle: R.hostingBundle, name: "hammer")
    /// Image `igluFinish`.
    static let igluFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "igluFinish")
    /// Image `igluFirst`.
    static let igluFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "igluFirst")
    /// Image `igluFourth`.
    static let igluFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "igluFourth")
    /// Image `igluSecond`.
    static let igluSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "igluSecond")
    /// Image `igluStart`.
    static let igluStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "igluStart")
    /// Image `igluThird`.
    static let igluThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "igluThird")
    /// Image `largeBuildPopUpBack`.
    static let largeBuildPopUpBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "largeBuildPopUpBack")
    /// Image `levelBack`.
    static let levelBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "levelBack")
    /// Image `levelFinishPopUpBack`.
    static let levelFinishPopUpBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "levelFinishPopUpBack")
    /// Image `levelShadowViewBack`.
    static let levelShadowViewBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "levelShadowViewBack")
    /// Image `level_england_back`.
    static let level_england_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_england_back")
    /// Image `level_france_back`.
    static let level_france_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_france_back")
    /// Image `lightning`.
    static let lightning = Rswift.ImageResource(bundle: R.hostingBundle, name: "lightning")
    /// Image `mapBarBack`.
    static let mapBarBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapBarBack")
    /// Image `mapPoint_Arctic_act`.
    static let mapPoint_Arctic_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapPoint_Arctic_act")
    /// Image `mapPoint_Arctic_pass`.
    static let mapPoint_Arctic_pass = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapPoint_Arctic_pass")
    /// Image `mapPoint_England_act`.
    static let mapPoint_England_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapPoint_England_act")
    /// Image `mapPoint_England_pass`.
    static let mapPoint_England_pass = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapPoint_England_pass")
    /// Image `mapPoint_France_act`.
    static let mapPoint_France_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapPoint_France_act")
    /// Image `mapPoint_France_pass`.
    static let mapPoint_France_pass = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapPoint_France_pass")
    /// Image `mapViewBack`.
    static let mapViewBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapViewBack")
    /// Image `map_1pathAct`.
    static let map_1pathAct = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_1pathAct")
    /// Image `map_1pathPass`.
    static let map_1pathPass = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_1pathPass")
    /// Image `map_2pathAct`.
    static let map_2pathAct = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_2pathAct")
    /// Image `map_2pathPass`.
    static let map_2pathPass = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_2pathPass")
    /// Image `map_3pathAct`.
    static let map_3pathAct = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_3pathAct")
    /// Image `map_3pathPass`.
    static let map_3pathPass = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_3pathPass")
    /// Image `map_4pathAct`.
    static let map_4pathAct = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_4pathAct")
    /// Image `map_4pathPass`.
    static let map_4pathPass = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_4pathPass")
    /// Image `menu_arrow_right_ic`.
    static let menu_arrow_right_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_arrow_right_ic")
    /// Image `menu_flag_ic`.
    static let menu_flag_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_flag_ic")
    /// Image `militaryAward`.
    static let militaryAward = Rswift.ImageResource(bundle: R.hostingBundle, name: "militaryAward")
    /// Image `moneyBag`.
    static let moneyBag = Rswift.ImageResource(bundle: R.hostingBundle, name: "moneyBag")
    /// Image `nextMapBtn`.
    static let nextMapBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "nextMapBtn")
    /// Image `onBuildVillage`.
    static let onBuildVillage = Rswift.ImageResource(bundle: R.hostingBundle, name: "onBuildVillage")
    /// Image `onCUP`.
    static let onCUP = Rswift.ImageResource(bundle: R.hostingBundle, name: "onCUP")
    /// Image `onFUN`.
    static let onFUN = Rswift.ImageResource(bundle: R.hostingBundle, name: "onFUN")
    /// Image `onGraph`.
    static let onGraph = Rswift.ImageResource(bundle: R.hostingBundle, name: "onGraph")
    /// Image `onNotEnoughCoins`.
    static let onNotEnoughCoins = Rswift.ImageResource(bundle: R.hostingBundle, name: "onNotEnoughCoins")
    /// Image `onSpinButton`.
    static let onSpinButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "onSpinButton")
    /// Image `onToEnergy`.
    static let onToEnergy = Rswift.ImageResource(bundle: R.hostingBundle, name: "onToEnergy")
    /// Image `onUpgradeBuild`.
    static let onUpgradeBuild = Rswift.ImageResource(bundle: R.hostingBundle, name: "onUpgradeBuild")
    /// Image `onboading_swipe_1_ic`.
    static let onboading_swipe_1_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboading_swipe_1_ic")
    /// Image `onboading_swipe_2_ic`.
    static let onboading_swipe_2_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboading_swipe_2_ic")
    /// Image `onboading_swipe_3_ic`.
    static let onboading_swipe_3_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboading_swipe_3_ic")
    /// Image `onboading_swipe_4_ic`.
    static let onboading_swipe_4_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboading_swipe_4_ic")
    /// Image `onboardingEnergy`.
    static let onboardingEnergy = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingEnergy")
    /// Image `onboardingFun`.
    static let onboardingFun = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingFun")
    /// Image `onboardingLightning`.
    static let onboardingLightning = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingLightning")
    /// Image `onboardingRightSign`.
    static let onboardingRightSign = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingRightSign")
    /// Image `onboardingVillage`.
    static let onboardingVillage = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingVillage")
    /// Image `onboarding_back_ic`.
    static let onboarding_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_back_ic")
    /// Image `onboarding_background_ic`.
    static let onboarding_background_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_background_ic")
    /// Image `onboarding_food_classic_ic`.
    static let onboarding_food_classic_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_classic_ic")
    /// Image `onboarding_food_keto_ic`.
    static let onboarding_food_keto_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_keto_ic")
    /// Image `onboarding_food_pesca_ic`.
    static let onboarding_food_pesca_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_pesca_ic")
    /// Image `onboarding_food_vegan_ic`.
    static let onboarding_food_vegan_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_vegan_ic")
    /// Image `onboarding_food_vegetarian_ic`.
    static let onboarding_food_vegetarian_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_vegetarian_ic")
    /// Image `onboarding_gender_man_ic`.
    static let onboarding_gender_man_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_gender_man_ic")
    /// Image `onboarding_gender_women_ic`.
    static let onboarding_gender_women_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_gender_women_ic")
    /// Image `onboarding_selected_ic`.
    static let onboarding_selected_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_selected_ic")
    /// Image `onboarding_sport_newbie_ic`.
    static let onboarding_sport_newbie_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_newbie_ic")
    /// Image `onboarding_sport_not_all_ic`.
    static let onboarding_sport_not_all_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_not_all_ic")
    /// Image `onboarding_sport_professional_ic`.
    static let onboarding_sport_professional_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_professional_ic")
    /// Image `onboarding_sport_regulary_ic`.
    static let onboarding_sport_regulary_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_regulary_ic")
    /// Image `onboarding_swipe_back_ic`.
    static let onboarding_swipe_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_swipe_back_ic")
    /// Image `onboarding_swipe_logo_ic`.
    static let onboarding_swipe_logo_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_swipe_logo_ic")
    /// Image `onboarding_target_flag_ic`.
    static let onboarding_target_flag_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_target_flag_ic")
    /// Image `onePurchaseBack`.
    static let onePurchaseBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "onePurchaseBack")
    /// Image `payer_shadow_ic`.
    static let payer_shadow_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "payer_shadow_ic")
    /// Image `paywall_above_text_ic`.
    static let paywall_above_text_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_above_text_ic")
    /// Image `paywall_bottom_ellipse_ic`.
    static let paywall_bottom_ellipse_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_bottom_ellipse_ic")
    /// Image `paywall_close_dark_ic`.
    static let paywall_close_dark_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_close_dark_ic")
    /// Image `paywall_close_white_ic`.
    static let paywall_close_white_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_close_white_ic")
    /// Image `paywall_fade_down_ic`.
    static let paywall_fade_down_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_fade_down_ic")
    /// Image `paywall_one_time_back_women_ic`.
    static let paywall_one_time_back_women_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_one_time_back_women_ic")
    /// Image `paywall_one_time_front_women_ic`.
    static let paywall_one_time_front_women_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_one_time_front_women_ic")
    /// Image `paywall_one_time_main_ellipse_ic`.
    static let paywall_one_time_main_ellipse_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_one_time_main_ellipse_ic")
    /// Image `paywall_one_time_top_ellipse_ic`.
    static let paywall_one_time_top_ellipse_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_one_time_top_ellipse_ic")
    /// Image `paywall_sale_ic`.
    static let paywall_sale_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_sale_ic")
    /// Image `paywall_selected_ic`.
    static let paywall_selected_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_selected_ic")
    /// Image `paywall_top_ellipse_ic`.
    static let paywall_top_ellipse_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_top_ellipse_ic")
    /// Image `paywall_women_complete_ic`.
    static let paywall_women_complete_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_women_complete_ic")
    /// Image `paywall_women_ic`.
    static let paywall_women_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_women_ic")
    /// Image `paywall_women_shadow_ic`.
    static let paywall_women_shadow_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "paywall_women_shadow_ic")
    /// Image `placeholder_big_sport_ic`.
    static let placeholder_big_sport_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_big_sport_ic")
    /// Image `placeholder_big_sport_two_ic`.
    static let placeholder_big_sport_two_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_big_sport_two_ic")
    /// Image `placeholder_food_ic`.
    static let placeholder_food_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_food_ic")
    /// Image `placeholder_food_two_ic`.
    static let placeholder_food_two_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_food_two_ic")
    /// Image `player_bubles_ic`.
    static let player_bubles_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_bubles_ic")
    /// Image `player_landscape_mute_ic`.
    static let player_landscape_mute_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_landscape_mute_ic")
    /// Image `player_landscape_shadow_ic`.
    static let player_landscape_shadow_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_landscape_shadow_ic")
    /// Image `player_landscape_unmute_ic`.
    static let player_landscape_unmute_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_landscape_unmute_ic")
    /// Image `player_next_ic`.
    static let player_next_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_next_ic")
    /// Image `player_next_inactive_ic`.
    static let player_next_inactive_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_next_inactive_ic")
    /// Image `player_play_ic`.
    static let player_play_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_play_ic")
    /// Image `player_portrait_mute_ic`.
    static let player_portrait_mute_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_portrait_mute_ic")
    /// Image `player_portrait_unmute_ic`.
    static let player_portrait_unmute_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_portrait_unmute_ic")
    /// Image `player_prev_active_ic`.
    static let player_prev_active_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_prev_active_ic")
    /// Image `player_prev_ic`.
    static let player_prev_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_prev_ic")
    /// Image `player_stop_ic`.
    static let player_stop_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_stop_ic")
    /// Image `pop1Deers`.
    static let pop1Deers = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop1Deers")
    /// Image `pop1Fish`.
    static let pop1Fish = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop1Fish")
    /// Image `pop1Gold`.
    static let pop1Gold = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop1Gold")
    /// Image `pop1Iglu`.
    static let pop1Iglu = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop1Iglu")
    /// Image `pop1Ship`.
    static let pop1Ship = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop1Ship")
    /// Image `pop2Deers`.
    static let pop2Deers = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop2Deers")
    /// Image `pop2Fish`.
    static let pop2Fish = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop2Fish")
    /// Image `pop2Gold`.
    static let pop2Gold = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop2Gold")
    /// Image `pop2Iglu`.
    static let pop2Iglu = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop2Iglu")
    /// Image `pop2Ship`.
    static let pop2Ship = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop2Ship")
    /// Image `pop3Deers`.
    static let pop3Deers = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop3Deers")
    /// Image `pop3Fish`.
    static let pop3Fish = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop3Fish")
    /// Image `pop3Gold`.
    static let pop3Gold = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop3Gold")
    /// Image `pop3Iglu`.
    static let pop3Iglu = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop3Iglu")
    /// Image `pop3Ship`.
    static let pop3Ship = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop3Ship")
    /// Image `pop4Deers`.
    static let pop4Deers = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop4Deers")
    /// Image `pop4Fish`.
    static let pop4Fish = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop4Fish")
    /// Image `pop4Gold`.
    static let pop4Gold = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop4Gold")
    /// Image `pop4Iglu`.
    static let pop4Iglu = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop4Iglu")
    /// Image `pop4Ship`.
    static let pop4Ship = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop4Ship")
    /// Image `pop5Deers`.
    static let pop5Deers = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop5Deers")
    /// Image `pop5Fish`.
    static let pop5Fish = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop5Fish")
    /// Image `pop5Gold`.
    static let pop5Gold = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop5Gold")
    /// Image `pop5Iglu`.
    static let pop5Iglu = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop5Iglu")
    /// Image `pop5Ship`.
    static let pop5Ship = Rswift.ImageResource(bundle: R.hostingBundle, name: "pop5Ship")
    /// Image `popStartState`.
    static let popStartState = Rswift.ImageResource(bundle: R.hostingBundle, name: "popStartState")
    /// Image `progressActive`.
    static let progressActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "progressActive")
    /// Image `progress_back_ic`.
    static let progress_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "progress_back_ic")
    /// Image `progress_cube_ic`.
    static let progress_cube_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "progress_cube_ic")
    /// Image `progress_forward_ic`.
    static let progress_forward_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "progress_forward_ic")
    /// Image `purchaseCoin1`.
    static let purchaseCoin1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "purchaseCoin1")
    /// Image `purchaseCoin2`.
    static let purchaseCoin2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "purchaseCoin2")
    /// Image `purchaseCoin3`.
    static let purchaseCoin3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "purchaseCoin3")
    /// Image `purchaseLightning1`.
    static let purchaseLightning1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "purchaseLightning1")
    /// Image `purchaseLightning2`.
    static let purchaseLightning2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "purchaseLightning2")
    /// Image `purchaseLightning3`.
    static let purchaseLightning3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "purchaseLightning3")
    /// Image `rTest `.
    static let rTest = Rswift.ImageResource(bundle: R.hostingBundle, name: "rTest ")
    /// Image `ray.gif`.
    static let rayGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "ray.gif")
    /// Image `shipFinish`.
    static let shipFinish = Rswift.ImageResource(bundle: R.hostingBundle, name: "shipFinish")
    /// Image `shipFirst`.
    static let shipFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "shipFirst")
    /// Image `shipFourth`.
    static let shipFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "shipFourth")
    /// Image `shipSecond`.
    static let shipSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "shipSecond")
    /// Image `shipStart`.
    static let shipStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "shipStart")
    /// Image `shipThird`.
    static let shipThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "shipThird")
    /// Image `slotBack`.
    static let slotBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "slotBack")
    /// Image `slotHouse`.
    static let slotHouse = Rswift.ImageResource(bundle: R.hostingBundle, name: "slotHouse")
    /// Image `snowflake`.
    static let snowflake = Rswift.ImageResource(bundle: R.hostingBundle, name: "snowflake")
    /// Image `spinBtnNormal`.
    static let spinBtnNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "spinBtnNormal")
    /// Image `spinBtnSelected`.
    static let spinBtnSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "spinBtnSelected")
    /// Image `sportsAward`.
    static let sportsAward = Rswift.ImageResource(bundle: R.hostingBundle, name: "sportsAward")
    /// Image `start_back_ic`.
    static let start_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_back_ic")
    /// Image `start_gradient_ic`.
    static let start_gradient_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_gradient_ic")
    /// Image `start_login_button_ic`.
    static let start_login_button_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_login_button_ic")
    /// Image `start_logo_ic`.
    static let start_logo_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_logo_ic")
    /// Image `steps_back_ic`.
    static let steps_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "steps_back_ic")
    /// Image `sunIsShineAnimation`.
    static let sunIsShineAnimation = Rswift.ImageResource(bundle: R.hostingBundle, name: "sunIsShineAnimation")
    /// Image `tab_bar_energy_ic`.
    static let tab_bar_energy_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_energy_ic")
    /// Image `tab_bar_fun_ic`.
    static let tab_bar_fun_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_fun_ic")
    /// Image `tab_bar_menu_ic`.
    static let tab_bar_menu_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_menu_ic")
    /// Image `tab_bar_profile_ic`.
    static let tab_bar_profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_profile_ic")
    /// Image `tab_bar_workout_ic`.
    static let tab_bar_workout_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_workout_ic")
    /// Image `temp_activity_ic`.
    static let temp_activity_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_activity_ic")
    /// Image `temp_workout_gradient_ic`.
    static let temp_workout_gradient_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_workout_gradient_ic")
    /// Image `temp_workout_ic`.
    static let temp_workout_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_workout_ic")
    /// Image `threePurchaseBack`.
    static let threePurchaseBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "threePurchaseBack")
    /// Image `top_view_coin_ic`.
    static let top_view_coin_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_view_coin_ic")
    /// Image `top_view_elipse_ic`.
    static let top_view_elipse_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_view_elipse_ic")
    /// Image `top_view_flash_ic`.
    static let top_view_flash_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_view_flash_ic")
    /// Image `twoPurchaseBack`.
    static let twoPurchaseBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "twoPurchaseBack")
    /// Image `upgradeBtnUnActive`.
    static let upgradeBtnUnActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "upgradeBtnUnActive")
    /// Image `upgradeBtn`.
    static let upgradeBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "upgradeBtn")
    /// Image `upgradeLevel`.
    static let upgradeLevel = Rswift.ImageResource(bundle: R.hostingBundle, name: "upgradeLevel")
    /// Image `video_finished_excellent_ic`.
    static let video_finished_excellent_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_finished_excellent_ic")
    /// Image `video_finished_hard_ic`.
    static let video_finished_hard_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_finished_hard_ic")
    /// Image `video_finished_main_ic`.
    static let video_finished_main_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_finished_main_ic")
    /// Image `video_finished_more_ic`.
    static let video_finished_more_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_finished_more_ic")
    /// Image `video_not_end_hard_ic`.
    static let video_not_end_hard_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_not_end_hard_ic")
    /// Image `video_not_end_long_ic`.
    static let video_not_end_long_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_not_end_long_ic")
    /// Image `video_not_end_main_ic`.
    static let video_not_end_main_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_not_end_main_ic")
    /// Image `video_not_end_other_ic`.
    static let video_not_end_other_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_not_end_other_ic")
    /// Image `video_not_end_watch_ic`.
    static let video_not_end_watch_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_not_end_watch_ic")
    /// Image `workout_activities_ic`.
    static let workout_activities_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_activities_ic")
    /// Image `workout_arrow_right_ic`.
    static let workout_arrow_right_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_arrow_right_ic")
    /// Image `workout_back_ic`.
    static let workout_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_back_ic")
    /// Image `workout_blocked_ic`.
    static let workout_blocked_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_blocked_ic")
    /// Image `workout_clock_ic`.
    static let workout_clock_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_clock_ic")
    /// Image `workout_fire_ic`.
    static let workout_fire_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_fire_ic")
    /// Image `workout_flash_ic`.
    static let workout_flash_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_flash_ic")
    /// Image `yellowPointer`.
    static let yellowPointer = Rswift.ImageResource(bundle: R.hostingBundle, name: "yellowPointer")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoodChartBack", bundle: ..., traitCollection: ...)`
    static func moodChartBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moodChartBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Selected1Scale", bundle: ..., traitCollection: ...)`
    static func selected1Scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected1Scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Selected2Scale", bundle: ..., traitCollection: ...)`
    static func selected2Scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected2Scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Selected3Scale", bundle: ..., traitCollection: ...)`
    static func selected3Scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected3Scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Selected4Scale", bundle: ..., traitCollection: ...)`
    static func selected4Scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected4Scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Selected5Scale", bundle: ..., traitCollection: ...)`
    static func selected5Scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected5Scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Unselected1Scale", bundle: ..., traitCollection: ...)`
    static func unselected1Scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected1Scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Unselected2Scale", bundle: ..., traitCollection: ...)`
    static func unselected2Scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected2Scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Unselected3Scale", bundle: ..., traitCollection: ...)`
    static func unselected3Scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected3Scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Unselected4Scale", bundle: ..., traitCollection: ...)`
    static func unselected4Scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected4Scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Unselected5Scale", bundle: ..., traitCollection: ...)`
    static func unselected5Scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected5Scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right_ic", bundle: ..., traitCollection: ...)`
    static func arrow_right_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auth_apple_ic", bundle: ..., traitCollection: ...)`
    static func auth_apple_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auth_apple_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auth_fb_ic", bundle: ..., traitCollection: ...)`
    static func auth_fb_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auth_fb_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auth_note_see_pass_ic", bundle: ..., traitCollection: ...)`
    static func auth_note_see_pass_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auth_note_see_pass_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auth_see_pass_ic", bundle: ..., traitCollection: ...)`
    static func auth_see_pass_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auth_see_pass_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backBtn", bundle: ..., traitCollection: ...)`
    static func backBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backBtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ballAward", bundle: ..., traitCollection: ...)`
    static func ballAward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ballAward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "buildDone", bundle: ..., traitCollection: ...)`
    static func buildDone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buildDone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "buildPopUpBack", bundle: ..., traitCollection: ...)`
    static func buildPopUpBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buildPopUpBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coin_v2.gif", bundle: ..., traitCollection: ...)`
    static func coin_v2Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coin_v2Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coin_v3.gif", bundle: ..., traitCollection: ...)`
    static func coin_v3Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coin_v3Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "construction3.gif", bundle: ..., traitCollection: ...)`
    static func construction3Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.construction3Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deersFinish", bundle: ..., traitCollection: ...)`
    static func deersFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deersFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deersFirst", bundle: ..., traitCollection: ...)`
    static func deersFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deersFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deersFourth", bundle: ..., traitCollection: ...)`
    static func deersFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deersFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deersSecond", bundle: ..., traitCollection: ...)`
    static func deersSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deersSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deersStart", bundle: ..., traitCollection: ...)`
    static func deersStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deersStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deersThird", bundle: ..., traitCollection: ...)`
    static func deersThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deersThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dollar", bundle: ..., traitCollection: ...)`
    static func dollar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dollar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doubleLightning", bundle: ..., traitCollection: ...)`
    static func doubleLightning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doubleLightning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummyAward", bundle: ..., traitCollection: ...)`
    static func dummyAward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummyAward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummyFace", bundle: ..., traitCollection: ...)`
    static func dummyFace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummyFace, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "en_flag", bundle: ..., traitCollection: ...)`
    static func en_flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.en_flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "en_hammer", bundle: ..., traitCollection: ...)`
    static func en_hammer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.en_hammer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "en_lightning", bundle: ..., traitCollection: ...)`
    static func en_lightning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.en_lightning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "en_moneyBag", bundle: ..., traitCollection: ...)`
    static func en_moneyBag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.en_moneyBag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "en_pound", bundle: ..., traitCollection: ...)`
    static func en_pound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.en_pound, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_arrow_back_ic", bundle: ..., traitCollection: ...)`
    static func energy_arrow_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_arrow_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_arrow_down_ic", bundle: ..., traitCollection: ...)`
    static func energy_arrow_down_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_arrow_down_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_arrow_forward_ic", bundle: ..., traitCollection: ...)`
    static func energy_arrow_forward_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_arrow_forward_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_coins_ic", bundle: ..., traitCollection: ...)`
    static func energy_coins_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_coins_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_energy_ic", bundle: ..., traitCollection: ...)`
    static func energy_energy_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_energy_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_eyea_ic", bundle: ..., traitCollection: ...)`
    static func energy_eyea_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_eyea_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_info_ic", bundle: ..., traitCollection: ...)`
    static func energy_info_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_info_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_meals_add_ic", bundle: ..., traitCollection: ...)`
    static func energy_meals_add_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_meals_add_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_mood_badly_ic", bundle: ..., traitCollection: ...)`
    static func energy_mood_badly_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_mood_badly_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_mood_good_ic", bundle: ..., traitCollection: ...)`
    static func energy_mood_good_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_mood_good_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_mood_not_bad_ic", bundle: ..., traitCollection: ...)`
    static func energy_mood_not_bad_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_mood_not_bad_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_today_pin_ic", bundle: ..., traitCollection: ...)`
    static func energy_today_pin_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_today_pin_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_water_active_ic", bundle: ..., traitCollection: ...)`
    static func energy_water_active_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_water_active_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_water_empty_ic", bundle: ..., traitCollection: ...)`
    static func energy_water_empty_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_water_empty_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_water_flash_ic", bundle: ..., traitCollection: ...)`
    static func energy_water_flash_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_water_flash_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_weight_selected_ic", bundle: ..., traitCollection: ...)`
    static func energy_weight_selected_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_weight_selected_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_1bigBenPop", bundle: ..., traitCollection: ...)`
    static func eng_1bigBenPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_1bigBenPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_1bridgePop", bundle: ..., traitCollection: ...)`
    static func eng_1bridgePop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_1bridgePop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_1busPop", bundle: ..., traitCollection: ...)`
    static func eng_1busPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_1busPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_1phonePop", bundle: ..., traitCollection: ...)`
    static func eng_1phonePop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_1phonePop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_1shipPop", bundle: ..., traitCollection: ...)`
    static func eng_1shipPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_1shipPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_2bigBenPop", bundle: ..., traitCollection: ...)`
    static func eng_2bigBenPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_2bigBenPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_2bridgePop", bundle: ..., traitCollection: ...)`
    static func eng_2bridgePop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_2bridgePop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_2busPop", bundle: ..., traitCollection: ...)`
    static func eng_2busPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_2busPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_2phonePop", bundle: ..., traitCollection: ...)`
    static func eng_2phonePop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_2phonePop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_2shipPop", bundle: ..., traitCollection: ...)`
    static func eng_2shipPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_2shipPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_3bigBenPop", bundle: ..., traitCollection: ...)`
    static func eng_3bigBenPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_3bigBenPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_3bridgePop", bundle: ..., traitCollection: ...)`
    static func eng_3bridgePop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_3bridgePop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_3busPop", bundle: ..., traitCollection: ...)`
    static func eng_3busPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_3busPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_3phonePop", bundle: ..., traitCollection: ...)`
    static func eng_3phonePop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_3phonePop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_3shipPop", bundle: ..., traitCollection: ...)`
    static func eng_3shipPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_3shipPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_4bigBenPop", bundle: ..., traitCollection: ...)`
    static func eng_4bigBenPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_4bigBenPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_4bridgePop", bundle: ..., traitCollection: ...)`
    static func eng_4bridgePop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_4bridgePop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_4busPop", bundle: ..., traitCollection: ...)`
    static func eng_4busPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_4busPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_4phonePop", bundle: ..., traitCollection: ...)`
    static func eng_4phonePop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_4phonePop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_4shipPop", bundle: ..., traitCollection: ...)`
    static func eng_4shipPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_4shipPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_5bigBenPop", bundle: ..., traitCollection: ...)`
    static func eng_5bigBenPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_5bigBenPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_5bridgePop", bundle: ..., traitCollection: ...)`
    static func eng_5bridgePop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_5bridgePop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_5busPop", bundle: ..., traitCollection: ...)`
    static func eng_5busPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_5busPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_5phonePop", bundle: ..., traitCollection: ...)`
    static func eng_5phonePop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_5phonePop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_5shipPop", bundle: ..., traitCollection: ...)`
    static func eng_5shipPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_5shipPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bigBenFinish", bundle: ..., traitCollection: ...)`
    static func eng_bigBenFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bigBenFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bigBenFirst", bundle: ..., traitCollection: ...)`
    static func eng_bigBenFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bigBenFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bigBenFourth", bundle: ..., traitCollection: ...)`
    static func eng_bigBenFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bigBenFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bigBenSecond", bundle: ..., traitCollection: ...)`
    static func eng_bigBenSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bigBenSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bigBenStart", bundle: ..., traitCollection: ...)`
    static func eng_bigBenStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bigBenStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bigBenThird", bundle: ..., traitCollection: ...)`
    static func eng_bigBenThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bigBenThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bridgeFinish", bundle: ..., traitCollection: ...)`
    static func eng_bridgeFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bridgeFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bridgeFirst", bundle: ..., traitCollection: ...)`
    static func eng_bridgeFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bridgeFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bridgeFourth", bundle: ..., traitCollection: ...)`
    static func eng_bridgeFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bridgeFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bridgeSecond", bundle: ..., traitCollection: ...)`
    static func eng_bridgeSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bridgeSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bridgeStart", bundle: ..., traitCollection: ...)`
    static func eng_bridgeStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bridgeStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_bridgeThird", bundle: ..., traitCollection: ...)`
    static func eng_bridgeThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_bridgeThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_busFinish", bundle: ..., traitCollection: ...)`
    static func eng_busFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_busFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_busFirst", bundle: ..., traitCollection: ...)`
    static func eng_busFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_busFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_busFourth", bundle: ..., traitCollection: ...)`
    static func eng_busFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_busFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_busSecond", bundle: ..., traitCollection: ...)`
    static func eng_busSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_busSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_busStart", bundle: ..., traitCollection: ...)`
    static func eng_busStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_busStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_busThird", bundle: ..., traitCollection: ...)`
    static func eng_busThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_busThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_phoneFinish", bundle: ..., traitCollection: ...)`
    static func eng_phoneFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_phoneFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_phoneFirst", bundle: ..., traitCollection: ...)`
    static func eng_phoneFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_phoneFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_phoneFourth", bundle: ..., traitCollection: ...)`
    static func eng_phoneFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_phoneFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_phoneSecond", bundle: ..., traitCollection: ...)`
    static func eng_phoneSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_phoneSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_phoneStart", bundle: ..., traitCollection: ...)`
    static func eng_phoneStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_phoneStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_phoneThird", bundle: ..., traitCollection: ...)`
    static func eng_phoneThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_phoneThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_popStart", bundle: ..., traitCollection: ...)`
    static func eng_popStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_popStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_shipFinish", bundle: ..., traitCollection: ...)`
    static func eng_shipFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_shipFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_shipFirst", bundle: ..., traitCollection: ...)`
    static func eng_shipFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_shipFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_shipFourth", bundle: ..., traitCollection: ...)`
    static func eng_shipFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_shipFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_shipSecond", bundle: ..., traitCollection: ...)`
    static func eng_shipSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_shipSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_shipStart", bundle: ..., traitCollection: ...)`
    static func eng_shipStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_shipStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eng_shipThird", bundle: ..., traitCollection: ...)`
    static func eng_shipThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eng_shipThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "england_freeHummer", bundle: ..., traitCollection: ...)`
    static func england_freeHummer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.england_freeHummer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "england_gameBack", bundle: ..., traitCollection: ...)`
    static func england_gameBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.england_gameBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "england_slotBack", bundle: ..., traitCollection: ...)`
    static func england_slotBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.england_slotBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "england_slotHouse", bundle: ..., traitCollection: ...)`
    static func england_slotHouse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.england_slotHouse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "england_uponBack", bundle: ..., traitCollection: ...)`
    static func england_uponBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.england_uponBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fishFinish", bundle: ..., traitCollection: ...)`
    static func fishFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fishFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fishFirst", bundle: ..., traitCollection: ...)`
    static func fishFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fishFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fishFourth", bundle: ..., traitCollection: ...)`
    static func fishFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fishFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fishSecond", bundle: ..., traitCollection: ...)`
    static func fishSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fishSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fishStart", bundle: ..., traitCollection: ...)`
    static func fishStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fishStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fishThird", bundle: ..., traitCollection: ...)`
    static func fishThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fishThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_arrow_down_ic", bundle: ..., traitCollection: ...)`
    static func food_arrow_down_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_arrow_down_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_background_ic", bundle: ..., traitCollection: ...)`
    static func food_background_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_background_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_clear_search_ic", bundle: ..., traitCollection: ...)`
    static func food_clear_search_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_clear_search_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_search_ic", bundle: ..., traitCollection: ...)`
    static func food_search_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_search_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_1archPop", bundle: ..., traitCollection: ...)`
    static func fr_1archPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_1archPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_1fieldPop", bundle: ..., traitCollection: ...)`
    static func fr_1fieldPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_1fieldPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_1luvrPop", bundle: ..., traitCollection: ...)`
    static func fr_1luvrPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_1luvrPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_1towerPop", bundle: ..., traitCollection: ...)`
    static func fr_1towerPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_1towerPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_1vineyardPop", bundle: ..., traitCollection: ...)`
    static func fr_1vineyardPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_1vineyardPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_2archPop", bundle: ..., traitCollection: ...)`
    static func fr_2archPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_2archPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_2fieldPop", bundle: ..., traitCollection: ...)`
    static func fr_2fieldPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_2fieldPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_2luvrPop", bundle: ..., traitCollection: ...)`
    static func fr_2luvrPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_2luvrPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_2towerPop", bundle: ..., traitCollection: ...)`
    static func fr_2towerPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_2towerPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_2vineyardPop", bundle: ..., traitCollection: ...)`
    static func fr_2vineyardPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_2vineyardPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_3archPop", bundle: ..., traitCollection: ...)`
    static func fr_3archPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_3archPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_3fieldPop", bundle: ..., traitCollection: ...)`
    static func fr_3fieldPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_3fieldPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_3luvrPop", bundle: ..., traitCollection: ...)`
    static func fr_3luvrPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_3luvrPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_3towerPop", bundle: ..., traitCollection: ...)`
    static func fr_3towerPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_3towerPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_3vineyardPop", bundle: ..., traitCollection: ...)`
    static func fr_3vineyardPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_3vineyardPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_4archPop", bundle: ..., traitCollection: ...)`
    static func fr_4archPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_4archPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_4fieldPop", bundle: ..., traitCollection: ...)`
    static func fr_4fieldPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_4fieldPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_4luvrPop", bundle: ..., traitCollection: ...)`
    static func fr_4luvrPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_4luvrPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_4towerPop", bundle: ..., traitCollection: ...)`
    static func fr_4towerPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_4towerPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_4vineyardPop", bundle: ..., traitCollection: ...)`
    static func fr_4vineyardPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_4vineyardPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_5archPop", bundle: ..., traitCollection: ...)`
    static func fr_5archPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_5archPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_5fieldPop", bundle: ..., traitCollection: ...)`
    static func fr_5fieldPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_5fieldPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_5luvrPop", bundle: ..., traitCollection: ...)`
    static func fr_5luvrPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_5luvrPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_5towerPop", bundle: ..., traitCollection: ...)`
    static func fr_5towerPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_5towerPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_5vineyardPop", bundle: ..., traitCollection: ...)`
    static func fr_5vineyardPop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_5vineyardPop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_archFinish", bundle: ..., traitCollection: ...)`
    static func fr_archFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_archFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_archFirst", bundle: ..., traitCollection: ...)`
    static func fr_archFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_archFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_archFourth", bundle: ..., traitCollection: ...)`
    static func fr_archFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_archFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_archSecond", bundle: ..., traitCollection: ...)`
    static func fr_archSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_archSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_archStart", bundle: ..., traitCollection: ...)`
    static func fr_archStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_archStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_archThird", bundle: ..., traitCollection: ...)`
    static func fr_archThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_archThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_fieldFinish", bundle: ..., traitCollection: ...)`
    static func fr_fieldFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_fieldFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_fieldFirst", bundle: ..., traitCollection: ...)`
    static func fr_fieldFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_fieldFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_fieldFourth", bundle: ..., traitCollection: ...)`
    static func fr_fieldFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_fieldFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_fieldSecond", bundle: ..., traitCollection: ...)`
    static func fr_fieldSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_fieldSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_fieldStart", bundle: ..., traitCollection: ...)`
    static func fr_fieldStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_fieldStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_fieldThird", bundle: ..., traitCollection: ...)`
    static func fr_fieldThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_fieldThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_flag", bundle: ..., traitCollection: ...)`
    static func fr_flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_hammer", bundle: ..., traitCollection: ...)`
    static func fr_hammer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_hammer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_lightning", bundle: ..., traitCollection: ...)`
    static func fr_lightning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_lightning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_luvrFinish", bundle: ..., traitCollection: ...)`
    static func fr_luvrFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_luvrFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_luvrFirst", bundle: ..., traitCollection: ...)`
    static func fr_luvrFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_luvrFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_luvrFourth", bundle: ..., traitCollection: ...)`
    static func fr_luvrFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_luvrFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_luvrSecond", bundle: ..., traitCollection: ...)`
    static func fr_luvrSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_luvrSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_luvrStart", bundle: ..., traitCollection: ...)`
    static func fr_luvrStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_luvrStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_luvrThird", bundle: ..., traitCollection: ...)`
    static func fr_luvrThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_luvrThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_moneyBag", bundle: ..., traitCollection: ...)`
    static func fr_moneyBag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_moneyBag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_pound", bundle: ..., traitCollection: ...)`
    static func fr_pound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_pound, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_towerFinish", bundle: ..., traitCollection: ...)`
    static func fr_towerFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_towerFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_towerFirst", bundle: ..., traitCollection: ...)`
    static func fr_towerFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_towerFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_towerFourth", bundle: ..., traitCollection: ...)`
    static func fr_towerFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_towerFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_towerSecond", bundle: ..., traitCollection: ...)`
    static func fr_towerSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_towerSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_towerStart", bundle: ..., traitCollection: ...)`
    static func fr_towerStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_towerStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_towerThird", bundle: ..., traitCollection: ...)`
    static func fr_towerThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_towerThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_vineyardFinish", bundle: ..., traitCollection: ...)`
    static func fr_vineyardFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_vineyardFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_vineyardFirst", bundle: ..., traitCollection: ...)`
    static func fr_vineyardFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_vineyardFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_vineyardFourth", bundle: ..., traitCollection: ...)`
    static func fr_vineyardFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_vineyardFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_vineyardSecond", bundle: ..., traitCollection: ...)`
    static func fr_vineyardSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_vineyardSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_vineyardStart", bundle: ..., traitCollection: ...)`
    static func fr_vineyardStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_vineyardStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr_vineyardThird", bundle: ..., traitCollection: ...)`
    static func fr_vineyardThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr_vineyardThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "france_bump", bundle: ..., traitCollection: ...)`
    static func france_bump(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.france_bump, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "france_freeHummer", bundle: ..., traitCollection: ...)`
    static func france_freeHummer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.france_freeHummer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "france_gameBack", bundle: ..., traitCollection: ...)`
    static func france_gameBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.france_gameBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "france_slotBack", bundle: ..., traitCollection: ...)`
    static func france_slotBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.france_slotBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "france_slotHouse", bundle: ..., traitCollection: ...)`
    static func france_slotHouse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.france_slotHouse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "france_uponBack", bundle: ..., traitCollection: ...)`
    static func france_uponBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.france_uponBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "freeHummer", bundle: ..., traitCollection: ...)`
    static func freeHummer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.freeHummer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameBackOne", bundle: ..., traitCollection: ...)`
    static func gameBackOne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameBackOne, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameBackTwo", bundle: ..., traitCollection: ...)`
    static func gameBackTwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameBackTwo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameBarBack", bundle: ..., traitCollection: ...)`
    static func gameBarBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameBarBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameBarBackSafeArea", bundle: ..., traitCollection: ...)`
    static func gameBarBackSafeArea(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameBarBackSafeArea, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameTabBarBuild", bundle: ..., traitCollection: ...)`
    static func gameTabBarBuild(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameTabBarBuild, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameTabBarBuildSelected", bundle: ..., traitCollection: ...)`
    static func gameTabBarBuildSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameTabBarBuildSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameTabBarEnergy", bundle: ..., traitCollection: ...)`
    static func gameTabBarEnergy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameTabBarEnergy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameTabBarMap", bundle: ..., traitCollection: ...)`
    static func gameTabBarMap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameTabBarMap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameTabBarMapSelected", bundle: ..., traitCollection: ...)`
    static func gameTabBarMapSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameTabBarMapSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameTabBarSpin", bundle: ..., traitCollection: ...)`
    static func gameTabBarSpin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameTabBarSpin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameTabBarSpinSelected", bundle: ..., traitCollection: ...)`
    static func gameTabBarSpinSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameTabBarSpinSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goldFinish", bundle: ..., traitCollection: ...)`
    static func goldFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goldFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goldFirst", bundle: ..., traitCollection: ...)`
    static func goldFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goldFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goldFourth", bundle: ..., traitCollection: ...)`
    static func goldFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goldFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goldSecond", bundle: ..., traitCollection: ...)`
    static func goldSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goldSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goldStart", bundle: ..., traitCollection: ...)`
    static func goldStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goldStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goldThird", bundle: ..., traitCollection: ...)`
    static func goldThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goldThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greenBuyBtn", bundle: ..., traitCollection: ...)`
    static func greenBuyBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenBuyBtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greenCounterImg", bundle: ..., traitCollection: ...)`
    static func greenCounterImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenCounterImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greenDone", bundle: ..., traitCollection: ...)`
    static func greenDone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenDone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hammer", bundle: ..., traitCollection: ...)`
    static func hammer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hammer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "igluFinish", bundle: ..., traitCollection: ...)`
    static func igluFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.igluFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "igluFirst", bundle: ..., traitCollection: ...)`
    static func igluFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.igluFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "igluFourth", bundle: ..., traitCollection: ...)`
    static func igluFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.igluFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "igluSecond", bundle: ..., traitCollection: ...)`
    static func igluSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.igluSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "igluStart", bundle: ..., traitCollection: ...)`
    static func igluStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.igluStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "igluThird", bundle: ..., traitCollection: ...)`
    static func igluThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.igluThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "largeBuildPopUpBack", bundle: ..., traitCollection: ...)`
    static func largeBuildPopUpBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.largeBuildPopUpBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "levelBack", bundle: ..., traitCollection: ...)`
    static func levelBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.levelBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "levelFinishPopUpBack", bundle: ..., traitCollection: ...)`
    static func levelFinishPopUpBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.levelFinishPopUpBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "levelShadowViewBack", bundle: ..., traitCollection: ...)`
    static func levelShadowViewBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.levelShadowViewBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_england_back", bundle: ..., traitCollection: ...)`
    static func level_england_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_england_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_france_back", bundle: ..., traitCollection: ...)`
    static func level_france_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_france_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lightning", bundle: ..., traitCollection: ...)`
    static func lightning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lightning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapBarBack", bundle: ..., traitCollection: ...)`
    static func mapBarBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapBarBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapPoint_Arctic_act", bundle: ..., traitCollection: ...)`
    static func mapPoint_Arctic_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapPoint_Arctic_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapPoint_Arctic_pass", bundle: ..., traitCollection: ...)`
    static func mapPoint_Arctic_pass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapPoint_Arctic_pass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapPoint_England_act", bundle: ..., traitCollection: ...)`
    static func mapPoint_England_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapPoint_England_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapPoint_England_pass", bundle: ..., traitCollection: ...)`
    static func mapPoint_England_pass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapPoint_England_pass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapPoint_France_act", bundle: ..., traitCollection: ...)`
    static func mapPoint_France_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapPoint_France_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapPoint_France_pass", bundle: ..., traitCollection: ...)`
    static func mapPoint_France_pass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapPoint_France_pass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapViewBack", bundle: ..., traitCollection: ...)`
    static func mapViewBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapViewBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_1pathAct", bundle: ..., traitCollection: ...)`
    static func map_1pathAct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_1pathAct, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_1pathPass", bundle: ..., traitCollection: ...)`
    static func map_1pathPass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_1pathPass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_2pathAct", bundle: ..., traitCollection: ...)`
    static func map_2pathAct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_2pathAct, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_2pathPass", bundle: ..., traitCollection: ...)`
    static func map_2pathPass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_2pathPass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_3pathAct", bundle: ..., traitCollection: ...)`
    static func map_3pathAct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_3pathAct, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_3pathPass", bundle: ..., traitCollection: ...)`
    static func map_3pathPass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_3pathPass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_4pathAct", bundle: ..., traitCollection: ...)`
    static func map_4pathAct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_4pathAct, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_4pathPass", bundle: ..., traitCollection: ...)`
    static func map_4pathPass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_4pathPass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_arrow_right_ic", bundle: ..., traitCollection: ...)`
    static func menu_arrow_right_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_arrow_right_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_flag_ic", bundle: ..., traitCollection: ...)`
    static func menu_flag_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_flag_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "militaryAward", bundle: ..., traitCollection: ...)`
    static func militaryAward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.militaryAward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moneyBag", bundle: ..., traitCollection: ...)`
    static func moneyBag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneyBag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nextMapBtn", bundle: ..., traitCollection: ...)`
    static func nextMapBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextMapBtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onBuildVillage", bundle: ..., traitCollection: ...)`
    static func onBuildVillage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBuildVillage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onCUP", bundle: ..., traitCollection: ...)`
    static func onCUP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onCUP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onFUN", bundle: ..., traitCollection: ...)`
    static func onFUN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onFUN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onGraph", bundle: ..., traitCollection: ...)`
    static func onGraph(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onGraph, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onNotEnoughCoins", bundle: ..., traitCollection: ...)`
    static func onNotEnoughCoins(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onNotEnoughCoins, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onSpinButton", bundle: ..., traitCollection: ...)`
    static func onSpinButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onSpinButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onToEnergy", bundle: ..., traitCollection: ...)`
    static func onToEnergy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onToEnergy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onUpgradeBuild", bundle: ..., traitCollection: ...)`
    static func onUpgradeBuild(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onUpgradeBuild, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboading_swipe_1_ic", bundle: ..., traitCollection: ...)`
    static func onboading_swipe_1_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboading_swipe_1_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboading_swipe_2_ic", bundle: ..., traitCollection: ...)`
    static func onboading_swipe_2_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboading_swipe_2_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboading_swipe_3_ic", bundle: ..., traitCollection: ...)`
    static func onboading_swipe_3_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboading_swipe_3_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboading_swipe_4_ic", bundle: ..., traitCollection: ...)`
    static func onboading_swipe_4_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboading_swipe_4_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingEnergy", bundle: ..., traitCollection: ...)`
    static func onboardingEnergy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingEnergy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingFun", bundle: ..., traitCollection: ...)`
    static func onboardingFun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingFun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingLightning", bundle: ..., traitCollection: ...)`
    static func onboardingLightning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingLightning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingRightSign", bundle: ..., traitCollection: ...)`
    static func onboardingRightSign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingRightSign, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingVillage", bundle: ..., traitCollection: ...)`
    static func onboardingVillage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingVillage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_back_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_background_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_background_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_background_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_classic_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_classic_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_classic_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_keto_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_keto_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_keto_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_pesca_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_pesca_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_pesca_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_vegan_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_vegan_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_vegan_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_vegetarian_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_vegetarian_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_vegetarian_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_gender_man_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_gender_man_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_gender_man_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_gender_women_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_gender_women_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_gender_women_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_selected_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_selected_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_selected_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_newbie_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_newbie_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_newbie_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_not_all_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_not_all_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_not_all_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_professional_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_professional_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_professional_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_regulary_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_regulary_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_regulary_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_swipe_back_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_swipe_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_swipe_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_swipe_logo_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_swipe_logo_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_swipe_logo_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_target_flag_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_target_flag_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_target_flag_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onePurchaseBack", bundle: ..., traitCollection: ...)`
    static func onePurchaseBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onePurchaseBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "payer_shadow_ic", bundle: ..., traitCollection: ...)`
    static func payer_shadow_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.payer_shadow_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_above_text_ic", bundle: ..., traitCollection: ...)`
    static func paywall_above_text_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_above_text_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_bottom_ellipse_ic", bundle: ..., traitCollection: ...)`
    static func paywall_bottom_ellipse_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_bottom_ellipse_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_close_dark_ic", bundle: ..., traitCollection: ...)`
    static func paywall_close_dark_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_close_dark_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_close_white_ic", bundle: ..., traitCollection: ...)`
    static func paywall_close_white_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_close_white_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_fade_down_ic", bundle: ..., traitCollection: ...)`
    static func paywall_fade_down_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_fade_down_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_one_time_back_women_ic", bundle: ..., traitCollection: ...)`
    static func paywall_one_time_back_women_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_one_time_back_women_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_one_time_front_women_ic", bundle: ..., traitCollection: ...)`
    static func paywall_one_time_front_women_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_one_time_front_women_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_one_time_main_ellipse_ic", bundle: ..., traitCollection: ...)`
    static func paywall_one_time_main_ellipse_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_one_time_main_ellipse_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_one_time_top_ellipse_ic", bundle: ..., traitCollection: ...)`
    static func paywall_one_time_top_ellipse_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_one_time_top_ellipse_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_sale_ic", bundle: ..., traitCollection: ...)`
    static func paywall_sale_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_sale_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_selected_ic", bundle: ..., traitCollection: ...)`
    static func paywall_selected_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_selected_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_top_ellipse_ic", bundle: ..., traitCollection: ...)`
    static func paywall_top_ellipse_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_top_ellipse_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_women_complete_ic", bundle: ..., traitCollection: ...)`
    static func paywall_women_complete_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_women_complete_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_women_ic", bundle: ..., traitCollection: ...)`
    static func paywall_women_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_women_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paywall_women_shadow_ic", bundle: ..., traitCollection: ...)`
    static func paywall_women_shadow_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paywall_women_shadow_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_big_sport_ic", bundle: ..., traitCollection: ...)`
    static func placeholder_big_sport_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_big_sport_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_big_sport_two_ic", bundle: ..., traitCollection: ...)`
    static func placeholder_big_sport_two_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_big_sport_two_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_food_ic", bundle: ..., traitCollection: ...)`
    static func placeholder_food_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_food_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_food_two_ic", bundle: ..., traitCollection: ...)`
    static func placeholder_food_two_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_food_two_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_bubles_ic", bundle: ..., traitCollection: ...)`
    static func player_bubles_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_bubles_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_landscape_mute_ic", bundle: ..., traitCollection: ...)`
    static func player_landscape_mute_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_landscape_mute_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_landscape_shadow_ic", bundle: ..., traitCollection: ...)`
    static func player_landscape_shadow_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_landscape_shadow_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_landscape_unmute_ic", bundle: ..., traitCollection: ...)`
    static func player_landscape_unmute_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_landscape_unmute_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_next_ic", bundle: ..., traitCollection: ...)`
    static func player_next_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_next_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_next_inactive_ic", bundle: ..., traitCollection: ...)`
    static func player_next_inactive_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_next_inactive_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_play_ic", bundle: ..., traitCollection: ...)`
    static func player_play_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_play_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_portrait_mute_ic", bundle: ..., traitCollection: ...)`
    static func player_portrait_mute_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_portrait_mute_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_portrait_unmute_ic", bundle: ..., traitCollection: ...)`
    static func player_portrait_unmute_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_portrait_unmute_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_prev_active_ic", bundle: ..., traitCollection: ...)`
    static func player_prev_active_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_prev_active_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_prev_ic", bundle: ..., traitCollection: ...)`
    static func player_prev_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_prev_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_stop_ic", bundle: ..., traitCollection: ...)`
    static func player_stop_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_stop_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop1Deers", bundle: ..., traitCollection: ...)`
    static func pop1Deers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop1Deers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop1Fish", bundle: ..., traitCollection: ...)`
    static func pop1Fish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop1Fish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop1Gold", bundle: ..., traitCollection: ...)`
    static func pop1Gold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop1Gold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop1Iglu", bundle: ..., traitCollection: ...)`
    static func pop1Iglu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop1Iglu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop1Ship", bundle: ..., traitCollection: ...)`
    static func pop1Ship(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop1Ship, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop2Deers", bundle: ..., traitCollection: ...)`
    static func pop2Deers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop2Deers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop2Fish", bundle: ..., traitCollection: ...)`
    static func pop2Fish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop2Fish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop2Gold", bundle: ..., traitCollection: ...)`
    static func pop2Gold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop2Gold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop2Iglu", bundle: ..., traitCollection: ...)`
    static func pop2Iglu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop2Iglu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop2Ship", bundle: ..., traitCollection: ...)`
    static func pop2Ship(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop2Ship, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop3Deers", bundle: ..., traitCollection: ...)`
    static func pop3Deers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop3Deers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop3Fish", bundle: ..., traitCollection: ...)`
    static func pop3Fish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop3Fish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop3Gold", bundle: ..., traitCollection: ...)`
    static func pop3Gold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop3Gold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop3Iglu", bundle: ..., traitCollection: ...)`
    static func pop3Iglu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop3Iglu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop3Ship", bundle: ..., traitCollection: ...)`
    static func pop3Ship(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop3Ship, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop4Deers", bundle: ..., traitCollection: ...)`
    static func pop4Deers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop4Deers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop4Fish", bundle: ..., traitCollection: ...)`
    static func pop4Fish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop4Fish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop4Gold", bundle: ..., traitCollection: ...)`
    static func pop4Gold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop4Gold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop4Iglu", bundle: ..., traitCollection: ...)`
    static func pop4Iglu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop4Iglu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop4Ship", bundle: ..., traitCollection: ...)`
    static func pop4Ship(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop4Ship, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop5Deers", bundle: ..., traitCollection: ...)`
    static func pop5Deers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop5Deers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop5Fish", bundle: ..., traitCollection: ...)`
    static func pop5Fish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop5Fish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop5Gold", bundle: ..., traitCollection: ...)`
    static func pop5Gold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop5Gold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop5Iglu", bundle: ..., traitCollection: ...)`
    static func pop5Iglu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop5Iglu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pop5Ship", bundle: ..., traitCollection: ...)`
    static func pop5Ship(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pop5Ship, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "popStartState", bundle: ..., traitCollection: ...)`
    static func popStartState(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popStartState, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "progressActive", bundle: ..., traitCollection: ...)`
    static func progressActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.progressActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "progress_back_ic", bundle: ..., traitCollection: ...)`
    static func progress_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.progress_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "progress_cube_ic", bundle: ..., traitCollection: ...)`
    static func progress_cube_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.progress_cube_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "progress_forward_ic", bundle: ..., traitCollection: ...)`
    static func progress_forward_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.progress_forward_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "purchaseCoin1", bundle: ..., traitCollection: ...)`
    static func purchaseCoin1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purchaseCoin1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "purchaseCoin2", bundle: ..., traitCollection: ...)`
    static func purchaseCoin2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purchaseCoin2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "purchaseCoin3", bundle: ..., traitCollection: ...)`
    static func purchaseCoin3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purchaseCoin3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "purchaseLightning1", bundle: ..., traitCollection: ...)`
    static func purchaseLightning1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purchaseLightning1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "purchaseLightning2", bundle: ..., traitCollection: ...)`
    static func purchaseLightning2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purchaseLightning2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "purchaseLightning3", bundle: ..., traitCollection: ...)`
    static func purchaseLightning3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purchaseLightning3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rTest ", bundle: ..., traitCollection: ...)`
    static func rTest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rTest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ray.gif", bundle: ..., traitCollection: ...)`
    static func rayGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rayGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shipFinish", bundle: ..., traitCollection: ...)`
    static func shipFinish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shipFinish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shipFirst", bundle: ..., traitCollection: ...)`
    static func shipFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shipFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shipFourth", bundle: ..., traitCollection: ...)`
    static func shipFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shipFourth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shipSecond", bundle: ..., traitCollection: ...)`
    static func shipSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shipSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shipStart", bundle: ..., traitCollection: ...)`
    static func shipStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shipStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shipThird", bundle: ..., traitCollection: ...)`
    static func shipThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shipThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slotBack", bundle: ..., traitCollection: ...)`
    static func slotBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slotBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slotHouse", bundle: ..., traitCollection: ...)`
    static func slotHouse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slotHouse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "snowflake", bundle: ..., traitCollection: ...)`
    static func snowflake(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snowflake, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spinBtnNormal", bundle: ..., traitCollection: ...)`
    static func spinBtnNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spinBtnNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spinBtnSelected", bundle: ..., traitCollection: ...)`
    static func spinBtnSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spinBtnSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sportsAward", bundle: ..., traitCollection: ...)`
    static func sportsAward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sportsAward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_back_ic", bundle: ..., traitCollection: ...)`
    static func start_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_gradient_ic", bundle: ..., traitCollection: ...)`
    static func start_gradient_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_gradient_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_login_button_ic", bundle: ..., traitCollection: ...)`
    static func start_login_button_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_login_button_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_logo_ic", bundle: ..., traitCollection: ...)`
    static func start_logo_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_logo_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "steps_back_ic", bundle: ..., traitCollection: ...)`
    static func steps_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.steps_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sunIsShineAnimation", bundle: ..., traitCollection: ...)`
    static func sunIsShineAnimation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunIsShineAnimation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_energy_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_energy_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_energy_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_fun_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_fun_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_fun_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_menu_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_menu_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_menu_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_profile_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_workout_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_workout_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_workout_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_activity_ic", bundle: ..., traitCollection: ...)`
    static func temp_activity_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_activity_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_workout_gradient_ic", bundle: ..., traitCollection: ...)`
    static func temp_workout_gradient_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_workout_gradient_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_workout_ic", bundle: ..., traitCollection: ...)`
    static func temp_workout_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_workout_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "threePurchaseBack", bundle: ..., traitCollection: ...)`
    static func threePurchaseBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.threePurchaseBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top_view_coin_ic", bundle: ..., traitCollection: ...)`
    static func top_view_coin_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_view_coin_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top_view_elipse_ic", bundle: ..., traitCollection: ...)`
    static func top_view_elipse_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_view_elipse_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top_view_flash_ic", bundle: ..., traitCollection: ...)`
    static func top_view_flash_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_view_flash_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "twoPurchaseBack", bundle: ..., traitCollection: ...)`
    static func twoPurchaseBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twoPurchaseBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upgradeBtn", bundle: ..., traitCollection: ...)`
    static func upgradeBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upgradeBtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upgradeBtnUnActive", bundle: ..., traitCollection: ...)`
    static func upgradeBtnUnActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upgradeBtnUnActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upgradeLevel", bundle: ..., traitCollection: ...)`
    static func upgradeLevel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upgradeLevel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_finished_excellent_ic", bundle: ..., traitCollection: ...)`
    static func video_finished_excellent_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_finished_excellent_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_finished_hard_ic", bundle: ..., traitCollection: ...)`
    static func video_finished_hard_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_finished_hard_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_finished_main_ic", bundle: ..., traitCollection: ...)`
    static func video_finished_main_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_finished_main_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_finished_more_ic", bundle: ..., traitCollection: ...)`
    static func video_finished_more_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_finished_more_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_not_end_hard_ic", bundle: ..., traitCollection: ...)`
    static func video_not_end_hard_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_not_end_hard_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_not_end_long_ic", bundle: ..., traitCollection: ...)`
    static func video_not_end_long_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_not_end_long_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_not_end_main_ic", bundle: ..., traitCollection: ...)`
    static func video_not_end_main_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_not_end_main_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_not_end_other_ic", bundle: ..., traitCollection: ...)`
    static func video_not_end_other_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_not_end_other_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_not_end_watch_ic", bundle: ..., traitCollection: ...)`
    static func video_not_end_watch_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_not_end_watch_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_activities_ic", bundle: ..., traitCollection: ...)`
    static func workout_activities_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_activities_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_arrow_right_ic", bundle: ..., traitCollection: ...)`
    static func workout_arrow_right_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_arrow_right_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_back_ic", bundle: ..., traitCollection: ...)`
    static func workout_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_blocked_ic", bundle: ..., traitCollection: ...)`
    static func workout_blocked_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_blocked_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_clock_ic", bundle: ..., traitCollection: ...)`
    static func workout_clock_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_clock_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_fire_ic", bundle: ..., traitCollection: ...)`
    static func workout_fire_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_fire_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_flash_ic", bundle: ..., traitCollection: ...)`
    static func workout_flash_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_flash_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yellowPointer", bundle: ..., traitCollection: ...)`
    static func yellowPointer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellowPointer, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 88 nibs.
  struct nib {
    /// Nib `AwardsTableCell`.
    static let awardsTableCell = _R.nib._AwardsTableCell()
    /// Nib `BuildPopUpView`.
    static let buildPopUpView = _R.nib._BuildPopUpView()
    /// Nib `ChartCollectionCell`.
    static let chartCollectionCell = _R.nib._ChartCollectionCell()
    /// Nib `ChartTableCell`.
    static let chartTableCell = _R.nib._ChartTableCell()
    /// Nib `EnerdyTodayCell`.
    static let enerdyTodayCell = _R.nib._EnerdyTodayCell()
    /// Nib `EnergyAddActivityCell`.
    static let energyAddActivityCell = _R.nib._EnergyAddActivityCell()
    /// Nib `EnergyChooseActivityCell`.
    static let energyChooseActivityCell = _R.nib._EnergyChooseActivityCell()
    /// Nib `EnergyChooseActivityCollectionCell`.
    static let energyChooseActivityCollectionCell = _R.nib._EnergyChooseActivityCollectionCell()
    /// Nib `EnergyController`.
    static let energyController = _R.nib._EnergyController()
    /// Nib `EnergyDrinkWaterCell`.
    static let energyDrinkWaterCell = _R.nib._EnergyDrinkWaterCell()
    /// Nib `EnergyMealsCell`.
    static let energyMealsCell = _R.nib._EnergyMealsCell()
    /// Nib `EnergyMoodCell`.
    static let energyMoodCell = _R.nib._EnergyMoodCell()
    /// Nib `EnergyProgressController`.
    static let energyProgressController = _R.nib._EnergyProgressController()
    /// Nib `EnergySleepCell`.
    static let energySleepCell = _R.nib._EnergySleepCell()
    /// Nib `EnergySpecialPriceCell`.
    static let energySpecialPriceCell = _R.nib._EnergySpecialPriceCell()
    /// Nib `EnergyStepsCell`.
    static let energyStepsCell = _R.nib._EnergyStepsCell()
    /// Nib `EnergyStepsCollectionCell`.
    static let energyStepsCollectionCell = _R.nib._EnergyStepsCollectionCell()
    /// Nib `EnergyTrainingCell`.
    static let energyTrainingCell = _R.nib._EnergyTrainingCell()
    /// Nib `EnergyUpdateWeightController`.
    static let energyUpdateWeightController = _R.nib._EnergyUpdateWeightController()
    /// Nib `EnergyWeightCell`.
    static let energyWeightCell = _R.nib._EnergyWeightCell()
    /// Nib `FoodAddController`.
    static let foodAddController = _R.nib._FoodAddController()
    /// Nib `FoodController`.
    static let foodController = _R.nib._FoodController()
    /// Nib `FoodRecomendedCell`.
    static let foodRecomendedCell = _R.nib._FoodRecomendedCell()
    /// Nib `FoodTopTitleCell`.
    static let foodTopTitleCell = _R.nib._FoodTopTitleCell()
    /// Nib `LevelController`.
    static let levelController = _R.nib._LevelController()
    /// Nib `LoginController`.
    static let loginController = _R.nib._LoginController()
    /// Nib `MainTabBarController`.
    static let mainTabBarController = _R.nib._MainTabBarController()
    /// Nib `MenuAgeController`.
    static let menuAgeController = _R.nib._MenuAgeController()
    /// Nib `MenuCell`.
    static let menuCell = _R.nib._MenuCell()
    /// Nib `MenuController`.
    static let menuController = _R.nib._MenuController()
    /// Nib `MenuDeleteAccount`.
    static let menuDeleteAccount = _R.nib._MenuDeleteAccount()
    /// Nib `MenuEmailController`.
    static let menuEmailController = _R.nib._MenuEmailController()
    /// Nib `MenuFitnessController`.
    static let menuFitnessController = _R.nib._MenuFitnessController()
    /// Nib `MenuFoodController`.
    static let menuFoodController = _R.nib._MenuFoodController()
    /// Nib `MenuFoodSwitchCell`.
    static let menuFoodSwitchCell = _R.nib._MenuFoodSwitchCell()
    /// Nib `MenuFoodTitleCellCell`.
    static let menuFoodTitleCellCell = _R.nib._MenuFoodTitleCellCell()
    /// Nib `MenuHeightController`.
    static let menuHeightController = _R.nib._MenuHeightController()
    /// Nib `MenuLanguageController`.
    static let menuLanguageController = _R.nib._MenuLanguageController()
    /// Nib `MenuLanguagesTitleCell`.
    static let menuLanguagesTitleCell = _R.nib._MenuLanguagesTitleCell()
    /// Nib `MenuLogoutCell`.
    static let menuLogoutCell = _R.nib._MenuLogoutCell()
    /// Nib `MenuNameController`.
    static let menuNameController = _R.nib._MenuNameController()
    /// Nib `MenuTargetWeightController`.
    static let menuTargetWeightController = _R.nib._MenuTargetWeightController()
    /// Nib `MenuWeightController`.
    static let menuWeightController = _R.nib._MenuWeightController()
    /// Nib `MenuWriteQuestionController`.
    static let menuWriteQuestionController = _R.nib._MenuWriteQuestionController()
    /// Nib `MoodTableCell`.
    static let moodTableCell = _R.nib._MoodTableCell()
    /// Nib `OnboardingSwipeCell`.
    static let onboardingSwipeCell = _R.nib._OnboardingSwipeCell()
    /// Nib `OnboardingSwipeContoller`.
    static let onboardingSwipeContoller = _R.nib._OnboardingSwipeContoller()
    /// Nib `PaywallController`.
    static let paywallController = _R.nib._PaywallController()
    /// Nib `PaywallMultiplyController`.
    static let paywallMultiplyController = _R.nib._PaywallMultiplyController()
    /// Nib `PaywallOneTimeController`.
    static let paywallOneTimeController = _R.nib._PaywallOneTimeController()
    /// Nib `PaywallSingleController`.
    static let paywallSingleController = _R.nib._PaywallSingleController()
    /// Nib `PositionTableCell`.
    static let positionTableCell = _R.nib._PositionTableCell()
    /// Nib `ProfileController`.
    static let profileController = _R.nib._ProfileController()
    /// Nib `ProgressCell`.
    static let progressCell = _R.nib._ProgressCell()
    /// Nib `QuizeAgeController`.
    static let quizeAgeController = _R.nib._QuizeAgeController()
    /// Nib `QuizeEmailController`.
    static let quizeEmailController = _R.nib._QuizeEmailController()
    /// Nib `QuizeFoodCell`.
    static let quizeFoodCell = _R.nib._QuizeFoodCell()
    /// Nib `QuizeFoodController`.
    static let quizeFoodController = _R.nib._QuizeFoodController()
    /// Nib `QuizeGenderController`.
    static let quizeGenderController = _R.nib._QuizeGenderController()
    /// Nib `QuizeGoalController`.
    static let quizeGoalController = _R.nib._QuizeGoalController()
    /// Nib `QuizeHeightController`.
    static let quizeHeightController = _R.nib._QuizeHeightController()
    /// Nib `QuizeNameController`.
    static let quizeNameController = _R.nib._QuizeNameController()
    /// Nib `QuizeProgressController`.
    static let quizeProgressController = _R.nib._QuizeProgressController()
    /// Nib `QuizeSportController`.
    static let quizeSportController = _R.nib._QuizeSportController()
    /// Nib `QuizeTargetWeightController`.
    static let quizeTargetWeightController = _R.nib._QuizeTargetWeightController()
    /// Nib `QuizeVideoController`.
    static let quizeVideoController = _R.nib._QuizeVideoController()
    /// Nib `QuizeWeightController`.
    static let quizeWeightController = _R.nib._QuizeWeightController()
    /// Nib `SplashViewController`.
    static let splashViewController = _R.nib._SplashViewController()
    /// Nib `StartController`.
    static let startController = _R.nib._StartController()
    /// Nib `VideoFinishedController`.
    static let videoFinishedController = _R.nib._VideoFinishedController()
    /// Nib `VideoNotFinished`.
    static let videoNotFinished = _R.nib._VideoNotFinished()
    /// Nib `VideoPlayerController`.
    static let videoPlayerController = _R.nib._VideoPlayerController()
    /// Nib `WeightTableCell`.
    static let weightTableCell = _R.nib._WeightTableCell()
    /// Nib `WorkoutActivitiesCell`.
    static let workoutActivitiesCell = _R.nib._WorkoutActivitiesCell()
    /// Nib `WorkoutActivityCollectionCell`.
    static let workoutActivityCollectionCell = _R.nib._WorkoutActivityCollectionCell()
    /// Nib `WorkoutController`.
    static let workoutController = _R.nib._WorkoutController()
    /// Nib `WorkoutDetailController`.
    static let workoutDetailController = _R.nib._WorkoutDetailController()
    /// Nib `WorkoutDetailDescriptionCell`.
    static let workoutDetailDescriptionCell = _R.nib._WorkoutDetailDescriptionCell()
    /// Nib `WorkoutDetailHeaderCell`.
    static let workoutDetailHeaderCell = _R.nib._WorkoutDetailHeaderCell()
    /// Nib `WorkoutDetailMuscleController`.
    static let workoutDetailMuscleController = _R.nib._WorkoutDetailMuscleController()
    /// Nib `WorkoutDetailMuscleСell`.
    static let workoutDetailMuscleСell = _R.nib._WorkoutDetailMuscleСell()
    /// Nib `WorkoutDetailSectionCell`.
    static let workoutDetailSectionCell = _R.nib._WorkoutDetailSectionCell()
    /// Nib `WorkoutDetailTrainCell`.
    static let workoutDetailTrainCell = _R.nib._WorkoutDetailTrainCell()
    /// Nib `WorkoutExercisesCell`.
    static let workoutExercisesCell = _R.nib._WorkoutExercisesCell()
    /// Nib `WorkoutExercisesDetailCell`.
    static let workoutExercisesDetailCell = _R.nib._WorkoutExercisesDetailCell()
    /// Nib `WorkoutSpecialCell`.
    static let workoutSpecialCell = _R.nib._WorkoutSpecialCell()
    /// Nib `WorkoutSpecialDetailCell`.
    static let workoutSpecialDetailCell = _R.nib._WorkoutSpecialDetailCell()
    /// Nib `WriteToUsController`.
    static let writeToUsController = _R.nib._WriteToUsController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AwardsTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.awardsTableCell) instead")
    static func awardsTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.awardsTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BuildPopUpView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.buildPopUpView) instead")
    static func buildPopUpView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.buildPopUpView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChartCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chartCollectionCell) instead")
    static func chartCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chartCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChartTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chartTableCell) instead")
    static func chartTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chartTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnerdyTodayCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.enerdyTodayCell) instead")
    static func enerdyTodayCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.enerdyTodayCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyAddActivityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyAddActivityCell) instead")
    static func energyAddActivityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyAddActivityCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyChooseActivityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyChooseActivityCell) instead")
    static func energyChooseActivityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyChooseActivityCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyChooseActivityCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyChooseActivityCollectionCell) instead")
    static func energyChooseActivityCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyChooseActivityCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyController) instead")
    static func energyController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyDrinkWaterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyDrinkWaterCell) instead")
    static func energyDrinkWaterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyDrinkWaterCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyMealsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyMealsCell) instead")
    static func energyMealsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyMealsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyMoodCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyMoodCell) instead")
    static func energyMoodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyMoodCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyProgressController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyProgressController) instead")
    static func energyProgressController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyProgressController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergySleepCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energySleepCell) instead")
    static func energySleepCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energySleepCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergySpecialPriceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energySpecialPriceCell) instead")
    static func energySpecialPriceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energySpecialPriceCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyStepsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyStepsCell) instead")
    static func energyStepsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyStepsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyStepsCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyStepsCollectionCell) instead")
    static func energyStepsCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyStepsCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyTrainingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyTrainingCell) instead")
    static func energyTrainingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyTrainingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyUpdateWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyUpdateWeightController) instead")
    static func energyUpdateWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyUpdateWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyWeightCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyWeightCell) instead")
    static func energyWeightCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyWeightCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FoodAddController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foodAddController) instead")
    static func foodAddController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foodAddController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FoodController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foodController) instead")
    static func foodController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foodController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FoodRecomendedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foodRecomendedCell) instead")
    static func foodRecomendedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foodRecomendedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FoodTopTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foodTopTitleCell) instead")
    static func foodTopTitleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foodTopTitleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LevelController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.levelController) instead")
    static func levelController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.levelController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginController) instead")
    static func loginController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MainTabBarController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainTabBarController) instead")
    static func mainTabBarController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainTabBarController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuAgeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuAgeController) instead")
    static func menuAgeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuAgeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuCell) instead")
    static func menuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuController) instead")
    static func menuController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuDeleteAccount", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuDeleteAccount) instead")
    static func menuDeleteAccount(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuDeleteAccount)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuEmailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuEmailController) instead")
    static func menuEmailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuEmailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFitnessController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFitnessController) instead")
    static func menuFitnessController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFitnessController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFoodController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFoodController) instead")
    static func menuFoodController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFoodController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFoodSwitchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFoodSwitchCell) instead")
    static func menuFoodSwitchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFoodSwitchCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFoodTitleCellCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFoodTitleCellCell) instead")
    static func menuFoodTitleCellCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFoodTitleCellCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuHeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuHeightController) instead")
    static func menuHeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuHeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuLanguageController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuLanguageController) instead")
    static func menuLanguageController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuLanguageController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuLanguagesTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuLanguagesTitleCell) instead")
    static func menuLanguagesTitleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuLanguagesTitleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuLogoutCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuLogoutCell) instead")
    static func menuLogoutCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuLogoutCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuNameController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuNameController) instead")
    static func menuNameController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuNameController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuTargetWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuTargetWeightController) instead")
    static func menuTargetWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuTargetWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuWeightController) instead")
    static func menuWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuWriteQuestionController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuWriteQuestionController) instead")
    static func menuWriteQuestionController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuWriteQuestionController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MoodTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moodTableCell) instead")
    static func moodTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moodTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingSwipeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingSwipeCell) instead")
    static func onboardingSwipeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingSwipeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingSwipeContoller", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingSwipeContoller) instead")
    static func onboardingSwipeContoller(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingSwipeContoller)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaywallController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paywallController) instead")
    static func paywallController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paywallController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaywallMultiplyController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paywallMultiplyController) instead")
    static func paywallMultiplyController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paywallMultiplyController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaywallOneTimeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paywallOneTimeController) instead")
    static func paywallOneTimeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paywallOneTimeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaywallSingleController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paywallSingleController) instead")
    static func paywallSingleController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paywallSingleController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PositionTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.positionTableCell) instead")
    static func positionTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.positionTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileController) instead")
    static func profileController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProgressCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.progressCell) instead")
    static func progressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.progressCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeAgeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeAgeController) instead")
    static func quizeAgeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeAgeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeEmailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeEmailController) instead")
    static func quizeEmailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeEmailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeFoodCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeFoodCell) instead")
    static func quizeFoodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeFoodCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeFoodController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeFoodController) instead")
    static func quizeFoodController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeFoodController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeGenderController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeGenderController) instead")
    static func quizeGenderController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeGenderController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeGoalController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeGoalController) instead")
    static func quizeGoalController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeGoalController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeHeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeHeightController) instead")
    static func quizeHeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeHeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeNameController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeNameController) instead")
    static func quizeNameController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeNameController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeProgressController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeProgressController) instead")
    static func quizeProgressController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeProgressController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeSportController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeSportController) instead")
    static func quizeSportController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeSportController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeTargetWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeTargetWeightController) instead")
    static func quizeTargetWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeTargetWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeVideoController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeVideoController) instead")
    static func quizeVideoController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeVideoController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeWeightController) instead")
    static func quizeWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SplashViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.splashViewController) instead")
    static func splashViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splashViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StartController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.startController) instead")
    static func startController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.startController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoFinishedController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoFinishedController) instead")
    static func videoFinishedController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoFinishedController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoNotFinished", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoNotFinished) instead")
    static func videoNotFinished(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoNotFinished)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoPlayerController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoPlayerController) instead")
    static func videoPlayerController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoPlayerController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeightTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weightTableCell) instead")
    static func weightTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weightTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutActivitiesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutActivitiesCell) instead")
    static func workoutActivitiesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutActivitiesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutActivityCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutActivityCollectionCell) instead")
    static func workoutActivityCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutActivityCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutController) instead")
    static func workoutController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailController) instead")
    static func workoutDetailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailDescriptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailDescriptionCell) instead")
    static func workoutDetailDescriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailDescriptionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailHeaderCell) instead")
    static func workoutDetailHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailMuscleController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailMuscleController) instead")
    static func workoutDetailMuscleController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailMuscleController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailMuscleСell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailMuscleСell) instead")
    static func workoutDetailMuscleСell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailMuscleСell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailSectionCell) instead")
    static func workoutDetailSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailSectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailTrainCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailTrainCell) instead")
    static func workoutDetailTrainCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailTrainCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutExercisesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutExercisesCell) instead")
    static func workoutExercisesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutExercisesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutExercisesDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutExercisesDetailCell) instead")
    static func workoutExercisesDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutExercisesDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutSpecialCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutSpecialCell) instead")
    static func workoutSpecialCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutSpecialCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutSpecialDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutSpecialDetailCell) instead")
    static func workoutSpecialDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutSpecialDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WriteToUsController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.writeToUsController) instead")
    static func writeToUsController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.writeToUsController)
    }
    #endif

    static func awardsTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PolicyCell? {
      return R.nib.awardsTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PolicyCell
    }

    static func buildPopUpView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.buildPopUpView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func chartCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChartCollectionCell? {
      return R.nib.chartCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChartCollectionCell
    }

    static func chartTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChartTableCell? {
      return R.nib.chartTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChartTableCell
    }

    static func enerdyTodayCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnerdyTodayCell? {
      return R.nib.enerdyTodayCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnerdyTodayCell
    }

    static func energyAddActivityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyAddActivityCell? {
      return R.nib.energyAddActivityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyAddActivityCell
    }

    static func energyChooseActivityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyChooseActivityCell? {
      return R.nib.energyChooseActivityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyChooseActivityCell
    }

    static func energyChooseActivityCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyChooseActivityCollectionCell? {
      return R.nib.energyChooseActivityCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyChooseActivityCollectionCell
    }

    static func energyController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.energyController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func energyDrinkWaterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyDrinkWaterCell? {
      return R.nib.energyDrinkWaterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyDrinkWaterCell
    }

    static func energyMealsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyMealsCell? {
      return R.nib.energyMealsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyMealsCell
    }

    static func energyMoodCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyMoodCell? {
      return R.nib.energyMoodCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyMoodCell
    }

    static func energyProgressController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.energyProgressController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func energySleepCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergySleepCell? {
      return R.nib.energySleepCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergySleepCell
    }

    static func energySpecialPriceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergySpecialPriceCell? {
      return R.nib.energySpecialPriceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergySpecialPriceCell
    }

    static func energyStepsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyStepsCell? {
      return R.nib.energyStepsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyStepsCell
    }

    static func energyStepsCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyStepsCollectionCell? {
      return R.nib.energyStepsCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyStepsCollectionCell
    }

    static func energyTrainingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyTrainingCell? {
      return R.nib.energyTrainingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyTrainingCell
    }

    static func energyUpdateWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.energyUpdateWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func energyWeightCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyWeightCell? {
      return R.nib.energyWeightCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyWeightCell
    }

    static func foodAddController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.foodAddController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func foodController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.foodController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func foodRecomendedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodRecomendedCell? {
      return R.nib.foodRecomendedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodRecomendedCell
    }

    static func foodTopTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodTopTitleCell? {
      return R.nib.foodTopTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodTopTitleCell
    }

    static func levelController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.levelController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mainTabBarController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mainTabBarController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuAgeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuAgeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuCell? {
      return R.nib.menuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuCell
    }

    static func menuController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuDeleteAccount(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuDeleteAccount? {
      return R.nib.menuDeleteAccount.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuDeleteAccount
    }

    static func menuEmailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuEmailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuFitnessController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuFitnessController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuFoodController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuFoodController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuFoodSwitchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodSwitchCell? {
      return R.nib.menuFoodSwitchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodSwitchCell
    }

    static func menuFoodTitleCellCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodTitleCellCell? {
      return R.nib.menuFoodTitleCellCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodTitleCellCell
    }

    static func menuHeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuHeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuLanguageController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuLanguageController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuLanguagesTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuLanguagesTitleCell? {
      return R.nib.menuLanguagesTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuLanguagesTitleCell
    }

    static func menuLogoutCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuLogoutCell? {
      return R.nib.menuLogoutCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuLogoutCell
    }

    static func menuNameController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuNameController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuTargetWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuTargetWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuWriteQuestionController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuWriteQuestionController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func moodTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoodTableCell? {
      return R.nib.moodTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoodTableCell
    }

    static func onboardingSwipeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OnboardingSwipeCell? {
      return R.nib.onboardingSwipeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnboardingSwipeCell
    }

    static func onboardingSwipeContoller(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingSwipeContoller.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func paywallController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.paywallController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func paywallMultiplyController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.paywallMultiplyController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func paywallOneTimeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.paywallOneTimeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func paywallSingleController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.paywallSingleController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func positionTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PositionTableCell? {
      return R.nib.positionTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PositionTableCell
    }

    static func profileController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func progressCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProgressCell? {
      return R.nib.progressCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProgressCell
    }

    static func quizeAgeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeAgeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeEmailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeEmailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeFoodCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuizeFoodCell? {
      return R.nib.quizeFoodCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuizeFoodCell
    }

    static func quizeFoodController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeFoodController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeGenderController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeGenderController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeGoalController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeGoalController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeHeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeHeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeNameController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeNameController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeProgressController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeProgressController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeSportController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeSportController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeTargetWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeTargetWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeVideoController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeVideoController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func splashViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.splashViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func startController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.startController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoFinishedController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoFinishedController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoNotFinished(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoNotFinished.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoPlayerController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoPlayerController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func weightTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeightTableCell? {
      return R.nib.weightTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeightTableCell
    }

    static func workoutActivitiesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutActivitiesCell? {
      return R.nib.workoutActivitiesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutActivitiesCell
    }

    static func workoutActivityCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutActivityCollectionCell? {
      return R.nib.workoutActivityCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutActivityCollectionCell
    }

    static func workoutController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.workoutController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func workoutDetailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.workoutDetailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func workoutDetailDescriptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailDescriptionCell? {
      return R.nib.workoutDetailDescriptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailDescriptionCell
    }

    static func workoutDetailHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailHeaderCell? {
      return R.nib.workoutDetailHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailHeaderCell
    }

    static func workoutDetailMuscleController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.workoutDetailMuscleController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func workoutDetailMuscleСell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailMuscleСell? {
      return R.nib.workoutDetailMuscleСell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailMuscleСell
    }

    static func workoutDetailSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailSectionCell? {
      return R.nib.workoutDetailSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailSectionCell
    }

    static func workoutDetailTrainCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailTrainCell? {
      return R.nib.workoutDetailTrainCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailTrainCell
    }

    static func workoutExercisesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutExercisesCell? {
      return R.nib.workoutExercisesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutExercisesCell
    }

    static func workoutExercisesDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutExercisesDetailCell? {
      return R.nib.workoutExercisesDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutExercisesDetailCell
    }

    static func workoutSpecialCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutSpecialCell? {
      return R.nib.workoutSpecialCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutSpecialCell
    }

    static func workoutSpecialDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutSpecialDetailCell? {
      return R.nib.workoutSpecialDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutSpecialDetailCell
    }

    static func writeToUsController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.writeToUsController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 40 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AwardsTableCell`.
    static let awardsTableCell: Rswift.ReuseIdentifier<PolicyCell> = Rswift.ReuseIdentifier(identifier: "AwardsTableCell")
    /// Reuse identifier `ChartCollectionCell`.
    static let chartCollectionCell: Rswift.ReuseIdentifier<ChartCollectionCell> = Rswift.ReuseIdentifier(identifier: "ChartCollectionCell")
    /// Reuse identifier `ChartTableCell`.
    static let chartTableCell: Rswift.ReuseIdentifier<ChartTableCell> = Rswift.ReuseIdentifier(identifier: "ChartTableCell")
    /// Reuse identifier `EnerdyTodayCell`.
    static let enerdyTodayCell: Rswift.ReuseIdentifier<EnerdyTodayCell> = Rswift.ReuseIdentifier(identifier: "EnerdyTodayCell")
    /// Reuse identifier `EnergyAddActivityCell`.
    static let energyAddActivityCell: Rswift.ReuseIdentifier<EnergyAddActivityCell> = Rswift.ReuseIdentifier(identifier: "EnergyAddActivityCell")
    /// Reuse identifier `EnergyChooseActivityCell`.
    static let energyChooseActivityCell: Rswift.ReuseIdentifier<EnergyChooseActivityCell> = Rswift.ReuseIdentifier(identifier: "EnergyChooseActivityCell")
    /// Reuse identifier `EnergyChooseActivityCollectionCell`.
    static let energyChooseActivityCollectionCell: Rswift.ReuseIdentifier<EnergyChooseActivityCollectionCell> = Rswift.ReuseIdentifier(identifier: "EnergyChooseActivityCollectionCell")
    /// Reuse identifier `EnergyDrinkWaterCell`.
    static let energyDrinkWaterCell: Rswift.ReuseIdentifier<EnergyDrinkWaterCell> = Rswift.ReuseIdentifier(identifier: "EnergyDrinkWaterCell")
    /// Reuse identifier `EnergyMealsCell`.
    static let energyMealsCell: Rswift.ReuseIdentifier<EnergyMealsCell> = Rswift.ReuseIdentifier(identifier: "EnergyMealsCell")
    /// Reuse identifier `EnergyMoodCell`.
    static let energyMoodCell: Rswift.ReuseIdentifier<EnergyMoodCell> = Rswift.ReuseIdentifier(identifier: "EnergyMoodCell")
    /// Reuse identifier `EnergySleepCell`.
    static let energySleepCell: Rswift.ReuseIdentifier<EnergySleepCell> = Rswift.ReuseIdentifier(identifier: "EnergySleepCell")
    /// Reuse identifier `EnergySpecialPriceCell`.
    static let energySpecialPriceCell: Rswift.ReuseIdentifier<EnergySpecialPriceCell> = Rswift.ReuseIdentifier(identifier: "EnergySpecialPriceCell")
    /// Reuse identifier `EnergyStepsCell`.
    static let energyStepsCell: Rswift.ReuseIdentifier<EnergyStepsCell> = Rswift.ReuseIdentifier(identifier: "EnergyStepsCell")
    /// Reuse identifier `EnergyStepsCollectionCell`.
    static let energyStepsCollectionCell: Rswift.ReuseIdentifier<EnergyStepsCollectionCell> = Rswift.ReuseIdentifier(identifier: "EnergyStepsCollectionCell")
    /// Reuse identifier `EnergyTrainingCell`.
    static let energyTrainingCell: Rswift.ReuseIdentifier<EnergyTrainingCell> = Rswift.ReuseIdentifier(identifier: "EnergyTrainingCell")
    /// Reuse identifier `EnergyWeightCell`.
    static let energyWeightCell: Rswift.ReuseIdentifier<EnergyWeightCell> = Rswift.ReuseIdentifier(identifier: "EnergyWeightCell")
    /// Reuse identifier `FoodRecomendedCell`.
    static let foodRecomendedCell: Rswift.ReuseIdentifier<FoodRecomendedCell> = Rswift.ReuseIdentifier(identifier: "FoodRecomendedCell")
    /// Reuse identifier `FoodTopTitleCell`.
    static let foodTopTitleCell: Rswift.ReuseIdentifier<FoodTopTitleCell> = Rswift.ReuseIdentifier(identifier: "FoodTopTitleCell")
    /// Reuse identifier `MenuDeleteAccount`.
    static let menuDeleteAccount: Rswift.ReuseIdentifier<MenuDeleteAccount> = Rswift.ReuseIdentifier(identifier: "MenuDeleteAccount")
    /// Reuse identifier `MenuFoodSwitchCell`.
    static let menuFoodSwitchCell: Rswift.ReuseIdentifier<MenuFoodSwitchCell> = Rswift.ReuseIdentifier(identifier: "MenuFoodSwitchCell")
    /// Reuse identifier `MenuFoodTitleCellCell`.
    static let menuFoodTitleCellCell: Rswift.ReuseIdentifier<MenuFoodTitleCellCell> = Rswift.ReuseIdentifier(identifier: "MenuFoodTitleCellCell")
    /// Reuse identifier `MenuLanguagesTitleCell`.
    static let menuLanguagesTitleCell: Rswift.ReuseIdentifier<MenuLanguagesTitleCell> = Rswift.ReuseIdentifier(identifier: "MenuLanguagesTitleCell")
    /// Reuse identifier `MenuLogoutCell`.
    static let menuLogoutCell: Rswift.ReuseIdentifier<MenuLogoutCell> = Rswift.ReuseIdentifier(identifier: "MenuLogoutCell")
    /// Reuse identifier `MoodTableCell`.
    static let moodTableCell: Rswift.ReuseIdentifier<MoodTableCell> = Rswift.ReuseIdentifier(identifier: "MoodTableCell")
    /// Reuse identifier `OnboardingSwipeCell`.
    static let onboardingSwipeCell: Rswift.ReuseIdentifier<OnboardingSwipeCell> = Rswift.ReuseIdentifier(identifier: "OnboardingSwipeCell")
    /// Reuse identifier `PositionTableCell`.
    static let positionTableCell: Rswift.ReuseIdentifier<PositionTableCell> = Rswift.ReuseIdentifier(identifier: "PositionTableCell")
    /// Reuse identifier `ProgressCell`.
    static let progressCell: Rswift.ReuseIdentifier<ProgressCell> = Rswift.ReuseIdentifier(identifier: "ProgressCell")
    /// Reuse identifier `QuizeFoodCell`.
    static let quizeFoodCell: Rswift.ReuseIdentifier<QuizeFoodCell> = Rswift.ReuseIdentifier(identifier: "QuizeFoodCell")
    /// Reuse identifier `WeightTableCell`.
    static let weightTableCell: Rswift.ReuseIdentifier<WeightTableCell> = Rswift.ReuseIdentifier(identifier: "WeightTableCell")
    /// Reuse identifier `WorkoutActivitiesCell`.
    static let workoutActivitiesCell: Rswift.ReuseIdentifier<WorkoutActivitiesCell> = Rswift.ReuseIdentifier(identifier: "WorkoutActivitiesCell")
    /// Reuse identifier `WorkoutActivityCollectionCell`.
    static let workoutActivityCollectionCell: Rswift.ReuseIdentifier<WorkoutActivityCollectionCell> = Rswift.ReuseIdentifier(identifier: "WorkoutActivityCollectionCell")
    /// Reuse identifier `WorkoutDetailDescriptionCell`.
    static let workoutDetailDescriptionCell: Rswift.ReuseIdentifier<WorkoutDetailDescriptionCell> = Rswift.ReuseIdentifier(identifier: "WorkoutDetailDescriptionCell")
    /// Reuse identifier `WorkoutDetailHeaderCell`.
    static let workoutDetailHeaderCell: Rswift.ReuseIdentifier<WorkoutDetailHeaderCell> = Rswift.ReuseIdentifier(identifier: "WorkoutDetailHeaderCell")
    /// Reuse identifier `WorkoutDetailMuscleСell`.
    static let workoutDetailMuscleСell: Rswift.ReuseIdentifier<WorkoutDetailMuscleСell> = Rswift.ReuseIdentifier(identifier: "WorkoutDetailMuscleСell")
    /// Reuse identifier `WorkoutDetailSectionCell`.
    static let workoutDetailSectionCell: Rswift.ReuseIdentifier<WorkoutDetailSectionCell> = Rswift.ReuseIdentifier(identifier: "WorkoutDetailSectionCell")
    /// Reuse identifier `WorkoutDetailTrainCell`.
    static let workoutDetailTrainCell: Rswift.ReuseIdentifier<WorkoutDetailTrainCell> = Rswift.ReuseIdentifier(identifier: "WorkoutDetailTrainCell")
    /// Reuse identifier `WorkoutExercisesCell`.
    static let workoutExercisesCell: Rswift.ReuseIdentifier<WorkoutExercisesCell> = Rswift.ReuseIdentifier(identifier: "WorkoutExercisesCell")
    /// Reuse identifier `WorkoutExercisesDetailCell`.
    static let workoutExercisesDetailCell: Rswift.ReuseIdentifier<WorkoutExercisesDetailCell> = Rswift.ReuseIdentifier(identifier: "WorkoutExercisesDetailCell")
    /// Reuse identifier `WorkoutSpecialCell`.
    static let workoutSpecialCell: Rswift.ReuseIdentifier<WorkoutSpecialCell> = Rswift.ReuseIdentifier(identifier: "WorkoutSpecialCell")
    /// Reuse identifier `WorkoutSpecialDetailCell`.
    static let workoutSpecialDetailCell: Rswift.ReuseIdentifier<WorkoutSpecialDetailCell> = Rswift.ReuseIdentifier(identifier: "WorkoutSpecialDetailCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 204 localization keys.
    struct localizable {
      /// en translation: %d Carb
      ///
      /// Locales: en
      static let food_carbs_description = Rswift.StringResource(key: "food_carbs_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d Fats
      ///
      /// Locales: en
      static let food_fats_description = Rswift.StringResource(key: "food_fats_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d Prot
      ///
      /// Locales: en
      static let food_prot_description = Rswift.StringResource(key: "food_prot_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d from %d
      ///
      /// Locales: en
      static let energy_training_from = Rswift.StringResource(key: "energy_training_from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d from %d
      ///
      /// Locales: en
      static let onboarding_count = Rswift.StringResource(key: "onboarding_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d left
      ///
      /// Locales: en
      static let food_gramm_lefts = Rswift.StringResource(key: "food_gramm_lefts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %dg left
      ///
      /// Locales: en
      static let energy_meals_gramm = Rswift.StringResource(key: "energy_meals_gramm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %dml left
      ///
      /// Locales: en
      static let water_widget_ml_left = Rswift.StringResource(key: "water_widget_ml_left", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en
      static let food_add = Rswift.StringResource(key: "food_add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add product
      ///
      /// Locales: en
      static let write_to_us_add_product = Rswift.StringResource(key: "write_to_us_add_product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add your activity
      ///
      /// Locales: en
      static let profile_add_your_activity = Rswift.StringResource(key: "profile_add_your_activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add your activity
      ///
      /// Locales: en
      static let progress_activity = Rswift.StringResource(key: "progress_activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add your own product
      ///
      /// Locales: en
      static let write_to_us_title = Rswift.StringResource(key: "write_to_us_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Age
      ///
      /// Locales: en
      static let menu_age = Rswift.StringResource(key: "menu_age", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Already eaten
      ///
      /// Locales: en
      static let food_already_eate = Rswift.StringResource(key: "food_already_eate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Awards
      ///
      /// Locales: en
      static let profile_awards = Rswift.StringResource(key: "profile_awards", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bad
      ///
      /// Locales: en
      static let energy_sleep_bad = Rswift.StringResource(key: "energy_sleep_bad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Badly
      ///
      /// Locales: en
      static let energy_mood_badly = Rswift.StringResource(key: "energy_mood_badly", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Before creating your subscriptions, make sure you know about the requirements and best practices that will help you deliver a great user experience. The guidelines below provide details on what your subscriptions need to include and how they should be presented in your app, as well as information on making changes to existing subscriptions, offering free trials, and more.Before creating your subscriptions, make sure you know about the requirements and best practices that will help you deliver a great user experience. The guidelines below provide details on what your subscriptions need to include and how they should be presented in your app, as well as information on making changes to existing subscriptions, offering free trials, and more.
      ///
      /// Locales: en
      static let paywall_one_time_purchase_info = Rswift.StringResource(key: "paywall_one_time_purchase_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Better boiled or steamed
      ///
      /// Locales: en
      static let food_better = Rswift.StringResource(key: "food_better", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Breakfast
      ///
      /// Locales: en
      static let energy_meals_breakfast = Rswift.StringResource(key: "energy_meals_breakfast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Breakfast
      ///
      /// Locales: en
      static let food_breakfast = Rswift.StringResource(key: "food_breakfast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Build healthy habits
      ///
      /// Locales: en
      static let paywall_one_time_habits = Rswift.StringResource(key: "paywall_one_time_habits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Build muscle
      ///
      /// Locales: en
      static let onboarding_goal_muscle = Rswift.StringResource(key: "onboarding_goal_muscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Burn calories and play game
      ///
      /// Locales: en
      static let paywall_one_time_calories_game = Rswift.StringResource(key: "paywall_one_time_calories_game", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: By continuing you accept our
      ///
      /// Locales: en
      static let login_by_continue = Rswift.StringResource(key: "login_by_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Calories
      ///
      /// Locales: en
      static let payer_finished_calories = Rswift.StringResource(key: "payer_finished_calories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Calories
      ///
      /// Locales: en
      static let profile_calories = Rswift.StringResource(key: "profile_calories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let login_forgot_cancel = Rswift.StringResource(key: "login_forgot_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Carbs
      ///
      /// Locales: en
      static let energy_meals_carbs = Rswift.StringResource(key: "energy_meals_carbs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Carbs
      ///
      /// Locales: en
      static let food_main_carbs = Rswift.StringResource(key: "food_main_carbs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Carbs %.1fg
      ///
      /// Locales: en
      static let food_carbs_float = Rswift.StringResource(key: "food_carbs_float", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Carbs %dg
      ///
      /// Locales: en
      static let food_carbs = Rswift.StringResource(key: "food_carbs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Choose activity
      ///
      /// Locales: en
      static let energy_choose_activity = Rswift.StringResource(key: "energy_choose_activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Classic
      ///
      /// Locales: en
      static let onboarding_food_classic = Rswift.StringResource(key: "onboarding_food_classic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Comment
      ///
      /// Locales: en
      static let write_to_us_comment = Rswift.StringResource(key: "write_to_us_comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Congratulations!
      ///
      /// Locales: en
      static let payer_finished_title = Rswift.StringResource(key: "payer_finished_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Continue training
      ///
      /// Locales: en
      static let energy_training_continue = Rswift.StringResource(key: "energy_training_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Country position
      ///
      /// Locales: en
      static let profile_country_position = Rswift.StringResource(key: "profile_country_position", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en
      static let food_delete = Rswift.StringResource(key: "food_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: en
      static let workout_detail_description = Rswift.StringResource(key: "workout_detail_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Diet Preferences
      ///
      /// Locales: en
      static let menu_food_preferences_title1 = Rswift.StringResource(key: "menu_food_preferences_title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dinner
      ///
      /// Locales: en
      static let energy_meals_dinner = Rswift.StringResource(key: "energy_meals_dinner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dinner
      ///
      /// Locales: en
      static let food_dinner = Rswift.StringResource(key: "food_dinner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Do you sports?
      ///
      /// Locales: en
      static let onboarding_sport_title = Rswift.StringResource(key: "onboarding_sport_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Drink water
      ///
      /// Locales: en
      static let water_widget_title = Rswift.StringResource(key: "water_widget_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en
      static let login_email = Rswift.StringResource(key: "login_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en
      static let menu_email = Rswift.StringResource(key: "menu_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Energy
      ///
      /// Locales: en
      static let payer_finished_energy = Rswift.StringResource(key: "payer_finished_energy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en
      static let menu_english = Rswift.StringResource(key: "menu_english", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Excellent
      ///
      /// Locales: en
      static let payer_finished_excellent = Rswift.StringResource(key: "payer_finished_excellent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Excellent! Good workout %d min
      ///
      /// Locales: en
      static let energy_training_excellent = Rswift.StringResource(key: "energy_training_excellent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Exclude from menu
      ///
      /// Locales: en
      static let menu_food_preferences_title2 = Rswift.StringResource(key: "menu_food_preferences_title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Exclude problem areas
      ///
      /// Locales: en
      static let menu_fitness_problem = Rswift.StringResource(key: "menu_fitness_problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: FT
      ///
      /// Locales: en
      static let onboarding_height_ft = Rswift.StringResource(key: "onboarding_height_ft", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fats
      ///
      /// Locales: en
      static let energy_meals_fats = Rswift.StringResource(key: "energy_meals_fats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fats
      ///
      /// Locales: en
      static let food_main_fats = Rswift.StringResource(key: "food_main_fats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fats %.1fg
      ///
      /// Locales: en
      static let food_fats_float = Rswift.StringResource(key: "food_fats_float", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fats %dg
      ///
      /// Locales: en
      static let food_fats = Rswift.StringResource(key: "food_fats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: en
      static let onboarding_female = Rswift.StringResource(key: "onboarding_female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fitness level
      ///
      /// Locales: en
      static let menu_fitness_leve = Rswift.StringResource(key: "menu_fitness_leve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fitness preferences
      ///
      /// Locales: en
      static let menu_fitness = Rswift.StringResource(key: "menu_fitness", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Food preferences
      ///
      /// Locales: en
      static let menu_food_preferences = Rswift.StringResource(key: "menu_food_preferences", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Food preferences
      ///
      /// Locales: en
      static let onboarding_food_title = Rswift.StringResource(key: "onboarding_food_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static let login_fogot_pass = Rswift.StringResource(key: "login_fogot_pass", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static let login_forgot_title = Rswift.StringResource(key: "login_forgot_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fri
      ///
      /// Locales: en
      static let progress_fri = Rswift.StringResource(key: "progress_fri", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Get My Plan
      ///
      /// Locales: en
      static let onboarding_email_get_plan = Rswift.StringResource(key: "onboarding_email_get_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Get access to premium fitness programs, workouts & meal plans
      ///
      /// Locales: en
      static let paywall_one_time_premium_access = Rswift.StringResource(key: "paywall_one_time_premium_access", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Get ready
      ///
      /// Locales: en
      static let video_player_get_ready = Rswift.StringResource(key: "video_player_get_ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Gey my personal plan
      ///
      /// Locales: en
      static let onboarding_get_plan = Rswift.StringResource(key: "onboarding_get_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Global position
      ///
      /// Locales: en
      static let profile_global_position = Rswift.StringResource(key: "profile_global_position", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Go back and continue
      ///
      /// Locales: en
      static let player_not_finisged_go_back = Rswift.StringResource(key: "player_not_finisged_go_back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Go next
      ///
      /// Locales: en
      static let onboarding_go_next = Rswift.StringResource(key: "onboarding_go_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Goal %.1f %@
      ///
      /// Locales: en
      static let energy_update_weight_goal = Rswift.StringResource(key: "energy_update_weight_goal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Good
      ///
      /// Locales: en
      static let energy_mood_good = Rswift.StringResource(key: "energy_mood_good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Good
      ///
      /// Locales: en
      static let energy_sleep_good = Rswift.StringResource(key: "energy_sleep_good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Height
      ///
      /// Locales: en
      static let menu_height = Rswift.StringResource(key: "menu_height", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Hey, %@
      ///
      /// Locales: en
      static let energy_header_title = Rswift.StringResource(key: "energy_header_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: How are you feeling?
      ///
      /// Locales: en
      static let payer_finished_feeling = Rswift.StringResource(key: "payer_finished_feeling", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: How are you today?
      ///
      /// Locales: en
      static let energy_mood_title = Rswift.StringResource(key: "energy_mood_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: How did you sleep?
      ///
      /// Locales: en
      static let energy_sleep_title = Rswift.StringResource(key: "energy_sleep_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I can do more
      ///
      /// Locales: en
      static let payer_finished_cand_do_more = Rswift.StringResource(key: "payer_finished_cand_do_more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I do it regularly
      ///
      /// Locales: en
      static let onboarding_sport_regulary = Rswift.StringResource(key: "onboarding_sport_regulary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I'm just watching
      ///
      /// Locales: en
      static let player_not_finisged_watching = Rswift.StringResource(key: "player_not_finisged_watching", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Improve your life & wellbeing
      ///
      /// Locales: en
      static let paywall_one_time_wellbeing = Rswift.StringResource(key: "paywall_one_time_wellbeing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: It's hard for me
      ///
      /// Locales: en
      static let player_not_finisged_hard = Rswift.StringResource(key: "player_not_finisged_hard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Just let me play
      ///
      /// Locales: en
      static let onboarding_goal_just_play = Rswift.StringResource(key: "onboarding_goal_just_play", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: KG
      ///
      /// Locales: en
      static let onboarding_weight_kg = Rswift.StringResource(key: "onboarding_weight_kg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Keep fit
      ///
      /// Locales: en
      static let onboarding_goal_keep_fit = Rswift.StringResource(key: "onboarding_goal_keep_fit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Keto
      ///
      /// Locales: en
      static let onboarding_food_keto = Rswift.StringResource(key: "onboarding_food_keto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: LB
      ///
      /// Locales: en
      static let onboarding_weight_lb = Rswift.StringResource(key: "onboarding_weight_lb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en
      static let menu_language = Rswift.StringResource(key: "menu_language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Level
      ///
      /// Locales: en
      static let profile_level = Rswift.StringResource(key: "profile_level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Log In
      ///
      /// Locales: en
      static let login_title = Rswift.StringResource(key: "login_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en
      static let login_button = Rswift.StringResource(key: "login_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lose weight
      ///
      /// Locales: en
      static let onboarding_goal_lose_weight = Rswift.StringResource(key: "onboarding_goal_lose_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lunch
      ///
      /// Locales: en
      static let energy_meals_lunch = Rswift.StringResource(key: "energy_meals_lunch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lunch
      ///
      /// Locales: en
      static let food_lunch = Rswift.StringResource(key: "food_lunch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en
      static let onboarding_male = Rswift.StringResource(key: "onboarding_male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Meals
      ///
      /// Locales: en
      static let login_meals = Rswift.StringResource(key: "login_meals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mon
      ///
      /// Locales: en
      static let progress_mon = Rswift.StringResource(key: "progress_mon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mood
      ///
      /// Locales: en
      static let profile_mood = Rswift.StringResource(key: "profile_mood", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Muscle group
      ///
      /// Locales: en
      static let workout_detail_muscle = Rswift.StringResource(key: "workout_detail_muscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en
      static let menu_name = Rswift.StringResource(key: "menu_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Newbie
      ///
      /// Locales: en
      static let onboarding_sport_newbie = Rswift.StringResource(key: "onboarding_sport_newbie", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next exercise
      ///
      /// Locales: en
      static let video_player_next = Rswift.StringResource(key: "video_player_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No, I don't want to save
      ///
      /// Locales: en
      static let paywall_one_time_subscribe = Rswift.StringResource(key: "paywall_one_time_subscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Not at all
      ///
      /// Locales: en
      static let onboarding_sport_not_all = Rswift.StringResource(key: "onboarding_sport_not_all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Not bad
      ///
      /// Locales: en
      static let energy_mood_not_bad = Rswift.StringResource(key: "energy_mood_not_bad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Notification
      ///
      /// Locales: en
      static let menu_notification = Rswift.StringResource(key: "menu_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Offer
      ///
      /// Locales: en
      static let paywall_one_time_offer = Rswift.StringResource(key: "paywall_one_time_offer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: One Time
      ///
      /// Locales: en
      static let paywall_one_time_one_time = Rswift.StringResource(key: "paywall_one_time_one_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: One year
      ///
      /// Locales: en
      static let paywall_one_time_one_year = Rswift.StringResource(key: "paywall_one_time_one_year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en
      static let onboarding_other = Rswift.StringResource(key: "onboarding_other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en
      static let player_not_finisged_other = Rswift.StringResource(key: "player_not_finisged_other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en
      static let login_password = Rswift.StringResource(key: "login_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Personal
      ///
      /// Locales: en
      static let paywall_one_time_personal = Rswift.StringResource(key: "paywall_one_time_personal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pescatarian
      ///
      /// Locales: en
      static let onboarding_food_pesca = Rswift.StringResource(key: "onboarding_food_pesca", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Playing
      ///
      /// Locales: en
      static let login_playing = Rswift.StringResource(key: "login_playing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter the email address that you used when creating your account.
      ///
      /// Locales: en
      static let login_forgot_subTitle = Rswift.StringResource(key: "login_forgot_subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static let login_privacy = Rswift.StringResource(key: "login_privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static let menu_privacy = Rswift.StringResource(key: "menu_privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static let profile_privacy_policy = Rswift.StringResource(key: "profile_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy,
      ///
      /// Locales: en
      static let login_privacy_policy = Rswift.StringResource(key: "login_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Processing
      ///
      /// Locales: en
      static let onboarding_processing_title = Rswift.StringResource(key: "onboarding_processing_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Product name
      ///
      /// Locales: en
      static let write_to_us_product_name = Rswift.StringResource(key: "write_to_us_product_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Professional
      ///
      /// Locales: en
      static let onboarding_sport_professional = Rswift.StringResource(key: "onboarding_sport_professional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en
      static let profile = Rswift.StringResource(key: "profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Proteins
      ///
      /// Locales: en
      static let energy_meals_protein = Rswift.StringResource(key: "energy_meals_protein", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Proteins
      ///
      /// Locales: en
      static let food_main_proteins = Rswift.StringResource(key: "food_main_proteins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Proteins %.1fg
      ///
      /// Locales: en
      static let food_proteins_float = Rswift.StringResource(key: "food_proteins_float", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Proteins %dg
      ///
      /// Locales: en
      static let food_proteins = Rswift.StringResource(key: "food_proteins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Rank
      ///
      /// Locales: en
      static let profile_rank = Rswift.StringResource(key: "profile_rank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Recent
      ///
      /// Locales: en
      static let food_recent = Rswift.StringResource(key: "food_recent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Reduce hunger
      ///
      /// Locales: en
      static let paywall_one_time_hunger = Rswift.StringResource(key: "paywall_one_time_hunger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Reminders
      ///
      /// Locales: en
      static let menu_reminders = Rswift.StringResource(key: "menu_reminders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Resting
      ///
      /// Locales: en
      static let workout_detail_resting = Rswift.StringResource(key: "workout_detail_resting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Restore Purchases
      ///
      /// Locales: en
      static let paywall_one_time_restore = Rswift.StringResource(key: "paywall_one_time_restore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SM
      ///
      /// Locales: en
      static let onboarding_height_sm = Rswift.StringResource(key: "onboarding_height_sm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sat
      ///
      /// Locales: en
      static let progress_sat = Rswift.StringResource(key: "progress_sat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en
      static let paywall_one_time_save = Rswift.StringResource(key: "paywall_one_time_save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save Changes
      ///
      /// Locales: en
      static let menu_save_changes = Rswift.StringResource(key: "menu_save_changes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en
      static let food_search = Rswift.StringResource(key: "food_search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en
      static let menu_write_us_send = Rswift.StringResource(key: "menu_write_us_send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en
      static let menu_title = Rswift.StringResource(key: "menu_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en
      static let onboarding_food_skip = Rswift.StringResource(key: "onboarding_food_skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Snack
      ///
      /// Locales: en
      static let energy_meals_snack = Rswift.StringResource(key: "energy_meals_snack", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Snack
      ///
      /// Locales: en
      static let food_snack = Rswift.StringResource(key: "food_snack", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en
      static let login_start = Rswift.StringResource(key: "login_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start training
      ///
      /// Locales: en
      static let energy_training_start_training = Rswift.StringResource(key: "energy_training_start_training", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start workout
      ///
      /// Locales: en
      static let workout_detail_start = Rswift.StringResource(key: "workout_detail_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start your new life easy and fun!
      ///
      /// Locales: en
      static let login_title_update = Rswift.StringResource(key: "login_title_update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start your workout
      ///
      /// Locales: en
      static let video_player_start = Rswift.StringResource(key: "video_player_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en
      static let login_forgot_submit = Rswift.StringResource(key: "login_forgot_submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sun
      ///
      /// Locales: en
      static let progress_sun = Rswift.StringResource(key: "progress_sun", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Target
      ///
      /// Locales: en
      static let profile_target = Rswift.StringResource(key: "profile_target", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Target weight
      ///
      /// Locales: en
      static let menu_target_weight = Rswift.StringResource(key: "menu_target_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Target weight
      ///
      /// Locales: en
      static let onboarding_targe_weight_title = Rswift.StringResource(key: "onboarding_targe_weight_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tell us why you interrupted your workout and we will find you the next one that suits you best.
      ///
      /// Locales: en
      static let player_not_finisged_subtTite = Rswift.StringResource(key: "player_not_finisged_subtTite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Subscribe
      ///
      /// Locales: en
      static let login_terms_of_subscribe = Rswift.StringResource(key: "login_terms_of_subscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let login_terms = Rswift.StringResource(key: "login_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let login_terms_use = Rswift.StringResource(key: "login_terms_use", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let menu_terms = Rswift.StringResource(key: "menu_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let profile_terms_of_use = Rswift.StringResource(key: "profile_terms_of_use", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Text your message
      ///
      /// Locales: en
      static let menu_write_us_plcaheloder = Rswift.StringResource(key: "menu_write_us_plcaheloder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Thu
      ///
      /// Locales: en
      static let progress_thu = Rswift.StringResource(key: "progress_thu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Time
      ///
      /// Locales: en
      static let payer_finished_time = Rswift.StringResource(key: "payer_finished_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Too long for me
      ///
      /// Locales: en
      static let player_not_finisged_long = Rswift.StringResource(key: "player_not_finisged_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Training
      ///
      /// Locales: en
      static let energy_training_training = Rswift.StringResource(key: "energy_training_training", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Try 3 days for free
      ///
      /// Locales: en
      static let paywall_one_time_trial = Rswift.StringResource(key: "paywall_one_time_trial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tue
      ///
      /// Locales: en
      static let progress_tue = Rswift.StringResource(key: "progress_tue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en
      static let energy_update_button = Rswift.StringResource(key: "energy_update_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en
      static let food_update = Rswift.StringResource(key: "food_update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Update weight
      ///
      /// Locales: en
      static let energy_update_weight_title = Rswift.StringResource(key: "energy_update_weight_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Vegan
      ///
      /// Locales: en
      static let onboarding_food_vegan = Rswift.StringResource(key: "onboarding_food_vegan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Vegetarian
      ///
      /// Locales: en
      static let onboarding_food_vegetarian = Rswift.StringResource(key: "onboarding_food_vegetarian", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Very hard
      ///
      /// Locales: en
      static let payer_finished_hard = Rswift.StringResource(key: "payer_finished_hard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: We create your personal nutrition and workout plan
      ///
      /// Locales: en
      static let onboarding_processing_subTitle = Rswift.StringResource(key: "onboarding_processing_subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: We recomend
      ///
      /// Locales: en
      static let food_we_recomend = Rswift.StringResource(key: "food_we_recomend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: We will check the correctness of your product and add it to our base
      ///
      /// Locales: en
      static let write_to_us_subtitle = Rswift.StringResource(key: "write_to_us_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wed
      ///
      /// Locales: en
      static let progress_wed = Rswift.StringResource(key: "progress_wed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Weight
      ///
      /// Locales: en
      static let menu_weight = Rswift.StringResource(key: "menu_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Weight
      ///
      /// Locales: en
      static let profile_weight = Rswift.StringResource(key: "profile_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: What's your goal?
      ///
      /// Locales: en
      static let onboarding_goal_title = Rswift.StringResource(key: "onboarding_goal_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Workouts
      ///
      /// Locales: en
      static let login_workouts = Rswift.StringResource(key: "login_workouts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Write to us
      ///
      /// Locales: en
      static let menu_write = Rswift.StringResource(key: "menu_write", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Write to us
      ///
      /// Locales: en
      static let profile_write_to_us = Rswift.StringResource(key: "profile_write_to_us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Write us to ask any question
      ///
      /// Locales: en
      static let menu_write_us_title = Rswift.StringResource(key: "menu_write_us_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You have finished your workout!
      ///
      /// Locales: en
      static let payer_finished_subTitle = Rswift.StringResource(key: "payer_finished_subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You have not finished your fasting!
      ///
      /// Locales: en
      static let player_not_finisged_title = Rswift.StringResource(key: "player_not_finisged_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your age
      ///
      /// Locales: en
      static let onboarding_age_title = Rswift.StringResource(key: "onboarding_age_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your email
      ///
      /// Locales: en
      static let onboarding_email_title = Rswift.StringResource(key: "onboarding_email_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your gender
      ///
      /// Locales: en
      static let onboarding_gender_title = Rswift.StringResource(key: "onboarding_gender_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your height
      ///
      /// Locales: en
      static let onboarding_height_title = Rswift.StringResource(key: "onboarding_height_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your meals
      ///
      /// Locales: en
      static let energy_meals_title = Rswift.StringResource(key: "energy_meals_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your name
      ///
      /// Locales: en
      static let onboarding_name = Rswift.StringResource(key: "onboarding_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your next workout %d min
      ///
      /// Locales: en
      static let energy_training_next_workout = Rswift.StringResource(key: "energy_training_next_workout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your progress
      ///
      /// Locales: en
      static let progress_title = Rswift.StringResource(key: "progress_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your progress %d%
      ///
      /// Locales: en
      static let energy_progress_percent = Rswift.StringResource(key: "energy_progress_percent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your weight
      ///
      /// Locales: en
      static let onboarding_weight_title = Rswift.StringResource(key: "onboarding_weight_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: and
      ///
      /// Locales: en
      static let login_and = Rswift.StringResource(key: "login_and", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: per year
      ///
      /// Locales: en
      static let paywall_one_time_per_year = Rswift.StringResource(key: "paywall_one_time_per_year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: reps
      ///
      /// Locales: en
      static let video_player_reps = Rswift.StringResource(key: "video_player_reps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: %d Carb
      ///
      /// Locales: en
      static func food_carbs_description(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_carbs_description", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_carbs_description"
        }

        let format = NSLocalizedString("food_carbs_description", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d Fats
      ///
      /// Locales: en
      static func food_fats_description(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_fats_description", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_fats_description"
        }

        let format = NSLocalizedString("food_fats_description", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d Prot
      ///
      /// Locales: en
      static func food_prot_description(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_prot_description", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_prot_description"
        }

        let format = NSLocalizedString("food_prot_description", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d from %d
      ///
      /// Locales: en
      static func energy_training_from(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_training_from", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_from"
        }

        let format = NSLocalizedString("energy_training_from", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %d from %d
      ///
      /// Locales: en
      static func onboarding_count(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("onboarding_count", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_count"
        }

        let format = NSLocalizedString("onboarding_count", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %d left
      ///
      /// Locales: en
      static func food_gramm_lefts(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_gramm_lefts", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_gramm_lefts"
        }

        let format = NSLocalizedString("food_gramm_lefts", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %dg left
      ///
      /// Locales: en
      static func energy_meals_gramm(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_meals_gramm", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_gramm"
        }

        let format = NSLocalizedString("energy_meals_gramm", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %dml left
      ///
      /// Locales: en
      static func water_widget_ml_left(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("water_widget_ml_left", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "water_widget_ml_left"
        }

        let format = NSLocalizedString("water_widget_ml_left", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Add
      ///
      /// Locales: en
      static func food_add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_add"
        }

        return NSLocalizedString("food_add", bundle: bundle, comment: "")
      }

      /// en translation: Add product
      ///
      /// Locales: en
      static func write_to_us_add_product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_us_add_product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_us_add_product"
        }

        return NSLocalizedString("write_to_us_add_product", bundle: bundle, comment: "")
      }

      /// en translation: Add your activity
      ///
      /// Locales: en
      static func profile_add_your_activity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_add_your_activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_add_your_activity"
        }

        return NSLocalizedString("profile_add_your_activity", bundle: bundle, comment: "")
      }

      /// en translation: Add your activity
      ///
      /// Locales: en
      static func progress_activity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_activity"
        }

        return NSLocalizedString("progress_activity", bundle: bundle, comment: "")
      }

      /// en translation: Add your own product
      ///
      /// Locales: en
      static func write_to_us_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_us_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_us_title"
        }

        return NSLocalizedString("write_to_us_title", bundle: bundle, comment: "")
      }

      /// en translation: Age
      ///
      /// Locales: en
      static func menu_age(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_age", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_age"
        }

        return NSLocalizedString("menu_age", bundle: bundle, comment: "")
      }

      /// en translation: Already eaten
      ///
      /// Locales: en
      static func food_already_eate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_already_eate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_already_eate"
        }

        return NSLocalizedString("food_already_eate", bundle: bundle, comment: "")
      }

      /// en translation: Awards
      ///
      /// Locales: en
      static func profile_awards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_awards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_awards"
        }

        return NSLocalizedString("profile_awards", bundle: bundle, comment: "")
      }

      /// en translation: Bad
      ///
      /// Locales: en
      static func energy_sleep_bad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_sleep_bad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_sleep_bad"
        }

        return NSLocalizedString("energy_sleep_bad", bundle: bundle, comment: "")
      }

      /// en translation: Badly
      ///
      /// Locales: en
      static func energy_mood_badly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_mood_badly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_mood_badly"
        }

        return NSLocalizedString("energy_mood_badly", bundle: bundle, comment: "")
      }

      /// en translation: Before creating your subscriptions, make sure you know about the requirements and best practices that will help you deliver a great user experience. The guidelines below provide details on what your subscriptions need to include and how they should be presented in your app, as well as information on making changes to existing subscriptions, offering free trials, and more.Before creating your subscriptions, make sure you know about the requirements and best practices that will help you deliver a great user experience. The guidelines below provide details on what your subscriptions need to include and how they should be presented in your app, as well as information on making changes to existing subscriptions, offering free trials, and more.
      ///
      /// Locales: en
      static func paywall_one_time_purchase_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_purchase_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_purchase_info"
        }

        return NSLocalizedString("paywall_one_time_purchase_info", bundle: bundle, comment: "")
      }

      /// en translation: Better boiled or steamed
      ///
      /// Locales: en
      static func food_better(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_better", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_better"
        }

        return NSLocalizedString("food_better", bundle: bundle, comment: "")
      }

      /// en translation: Breakfast
      ///
      /// Locales: en
      static func energy_meals_breakfast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_breakfast", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_breakfast"
        }

        return NSLocalizedString("energy_meals_breakfast", bundle: bundle, comment: "")
      }

      /// en translation: Breakfast
      ///
      /// Locales: en
      static func food_breakfast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_breakfast", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_breakfast"
        }

        return NSLocalizedString("food_breakfast", bundle: bundle, comment: "")
      }

      /// en translation: Build healthy habits
      ///
      /// Locales: en
      static func paywall_one_time_habits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_habits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_habits"
        }

        return NSLocalizedString("paywall_one_time_habits", bundle: bundle, comment: "")
      }

      /// en translation: Build muscle
      ///
      /// Locales: en
      static func onboarding_goal_muscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_muscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_muscle"
        }

        return NSLocalizedString("onboarding_goal_muscle", bundle: bundle, comment: "")
      }

      /// en translation: Burn calories and play game
      ///
      /// Locales: en
      static func paywall_one_time_calories_game(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_calories_game", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_calories_game"
        }

        return NSLocalizedString("paywall_one_time_calories_game", bundle: bundle, comment: "")
      }

      /// en translation: By continuing you accept our
      ///
      /// Locales: en
      static func login_by_continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_by_continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_by_continue"
        }

        return NSLocalizedString("login_by_continue", bundle: bundle, comment: "")
      }

      /// en translation: Calories
      ///
      /// Locales: en
      static func payer_finished_calories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payer_finished_calories", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payer_finished_calories"
        }

        return NSLocalizedString("payer_finished_calories", bundle: bundle, comment: "")
      }

      /// en translation: Calories
      ///
      /// Locales: en
      static func profile_calories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_calories", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_calories"
        }

        return NSLocalizedString("profile_calories", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func login_forgot_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_cancel"
        }

        return NSLocalizedString("login_forgot_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Carbs
      ///
      /// Locales: en
      static func energy_meals_carbs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_carbs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_carbs"
        }

        return NSLocalizedString("energy_meals_carbs", bundle: bundle, comment: "")
      }

      /// en translation: Carbs
      ///
      /// Locales: en
      static func food_main_carbs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_main_carbs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_main_carbs"
        }

        return NSLocalizedString("food_main_carbs", bundle: bundle, comment: "")
      }

      /// en translation: Carbs %.1fg
      ///
      /// Locales: en
      static func food_carbs_float(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_carbs_float", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_carbs_float"
        }

        let format = NSLocalizedString("food_carbs_float", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Carbs %dg
      ///
      /// Locales: en
      static func food_carbs(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_carbs", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_carbs"
        }

        let format = NSLocalizedString("food_carbs", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Choose activity
      ///
      /// Locales: en
      static func energy_choose_activity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_choose_activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_choose_activity"
        }

        return NSLocalizedString("energy_choose_activity", bundle: bundle, comment: "")
      }

      /// en translation: Classic
      ///
      /// Locales: en
      static func onboarding_food_classic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_classic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_classic"
        }

        return NSLocalizedString("onboarding_food_classic", bundle: bundle, comment: "")
      }

      /// en translation: Comment
      ///
      /// Locales: en
      static func write_to_us_comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_us_comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_us_comment"
        }

        return NSLocalizedString("write_to_us_comment", bundle: bundle, comment: "")
      }

      /// en translation: Congratulations!
      ///
      /// Locales: en
      static func payer_finished_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payer_finished_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payer_finished_title"
        }

        return NSLocalizedString("payer_finished_title", bundle: bundle, comment: "")
      }

      /// en translation: Continue training
      ///
      /// Locales: en
      static func energy_training_continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_training_continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_continue"
        }

        return NSLocalizedString("energy_training_continue", bundle: bundle, comment: "")
      }

      /// en translation: Country position
      ///
      /// Locales: en
      static func profile_country_position(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_country_position", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_country_position"
        }

        return NSLocalizedString("profile_country_position", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en
      static func food_delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_delete"
        }

        return NSLocalizedString("food_delete", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: en
      static func workout_detail_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("workout_detail_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "workout_detail_description"
        }

        return NSLocalizedString("workout_detail_description", bundle: bundle, comment: "")
      }

      /// en translation: Diet Preferences
      ///
      /// Locales: en
      static func menu_food_preferences_title1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_food_preferences_title1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_food_preferences_title1"
        }

        return NSLocalizedString("menu_food_preferences_title1", bundle: bundle, comment: "")
      }

      /// en translation: Dinner
      ///
      /// Locales: en
      static func energy_meals_dinner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_dinner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_dinner"
        }

        return NSLocalizedString("energy_meals_dinner", bundle: bundle, comment: "")
      }

      /// en translation: Dinner
      ///
      /// Locales: en
      static func food_dinner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_dinner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_dinner"
        }

        return NSLocalizedString("food_dinner", bundle: bundle, comment: "")
      }

      /// en translation: Do you sports?
      ///
      /// Locales: en
      static func onboarding_sport_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_title"
        }

        return NSLocalizedString("onboarding_sport_title", bundle: bundle, comment: "")
      }

      /// en translation: Drink water
      ///
      /// Locales: en
      static func water_widget_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water_widget_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "water_widget_title"
        }

        return NSLocalizedString("water_widget_title", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en
      static func login_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_email"
        }

        return NSLocalizedString("login_email", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en
      static func menu_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_email"
        }

        return NSLocalizedString("menu_email", bundle: bundle, comment: "")
      }

      /// en translation: Energy
      ///
      /// Locales: en
      static func payer_finished_energy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payer_finished_energy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payer_finished_energy"
        }

        return NSLocalizedString("payer_finished_energy", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en
      static func menu_english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_english", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_english"
        }

        return NSLocalizedString("menu_english", bundle: bundle, comment: "")
      }

      /// en translation: Excellent
      ///
      /// Locales: en
      static func payer_finished_excellent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payer_finished_excellent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payer_finished_excellent"
        }

        return NSLocalizedString("payer_finished_excellent", bundle: bundle, comment: "")
      }

      /// en translation: Excellent! Good workout %d min
      ///
      /// Locales: en
      static func energy_training_excellent(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_training_excellent", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_excellent"
        }

        let format = NSLocalizedString("energy_training_excellent", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Exclude from menu
      ///
      /// Locales: en
      static func menu_food_preferences_title2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_food_preferences_title2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_food_preferences_title2"
        }

        return NSLocalizedString("menu_food_preferences_title2", bundle: bundle, comment: "")
      }

      /// en translation: Exclude problem areas
      ///
      /// Locales: en
      static func menu_fitness_problem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_fitness_problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_fitness_problem"
        }

        return NSLocalizedString("menu_fitness_problem", bundle: bundle, comment: "")
      }

      /// en translation: FT
      ///
      /// Locales: en
      static func onboarding_height_ft(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_height_ft", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_height_ft"
        }

        return NSLocalizedString("onboarding_height_ft", bundle: bundle, comment: "")
      }

      /// en translation: Fats
      ///
      /// Locales: en
      static func energy_meals_fats(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_fats", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_fats"
        }

        return NSLocalizedString("energy_meals_fats", bundle: bundle, comment: "")
      }

      /// en translation: Fats
      ///
      /// Locales: en
      static func food_main_fats(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_main_fats", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_main_fats"
        }

        return NSLocalizedString("food_main_fats", bundle: bundle, comment: "")
      }

      /// en translation: Fats %.1fg
      ///
      /// Locales: en
      static func food_fats_float(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_fats_float", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_fats_float"
        }

        let format = NSLocalizedString("food_fats_float", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Fats %dg
      ///
      /// Locales: en
      static func food_fats(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_fats", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_fats"
        }

        let format = NSLocalizedString("food_fats", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Female
      ///
      /// Locales: en
      static func onboarding_female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_female"
        }

        return NSLocalizedString("onboarding_female", bundle: bundle, comment: "")
      }

      /// en translation: Fitness level
      ///
      /// Locales: en
      static func menu_fitness_leve(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_fitness_leve", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_fitness_leve"
        }

        return NSLocalizedString("menu_fitness_leve", bundle: bundle, comment: "")
      }

      /// en translation: Fitness preferences
      ///
      /// Locales: en
      static func menu_fitness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_fitness", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_fitness"
        }

        return NSLocalizedString("menu_fitness", bundle: bundle, comment: "")
      }

      /// en translation: Food preferences
      ///
      /// Locales: en
      static func menu_food_preferences(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_food_preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_food_preferences"
        }

        return NSLocalizedString("menu_food_preferences", bundle: bundle, comment: "")
      }

      /// en translation: Food preferences
      ///
      /// Locales: en
      static func onboarding_food_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_title"
        }

        return NSLocalizedString("onboarding_food_title", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static func login_fogot_pass(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_fogot_pass", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_fogot_pass"
        }

        return NSLocalizedString("login_fogot_pass", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static func login_forgot_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_title"
        }

        return NSLocalizedString("login_forgot_title", bundle: bundle, comment: "")
      }

      /// en translation: Fri
      ///
      /// Locales: en
      static func progress_fri(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_fri", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_fri"
        }

        return NSLocalizedString("progress_fri", bundle: bundle, comment: "")
      }

      /// en translation: Get My Plan
      ///
      /// Locales: en
      static func onboarding_email_get_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_email_get_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_email_get_plan"
        }

        return NSLocalizedString("onboarding_email_get_plan", bundle: bundle, comment: "")
      }

      /// en translation: Get access to premium fitness programs, workouts & meal plans
      ///
      /// Locales: en
      static func paywall_one_time_premium_access(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_premium_access", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_premium_access"
        }

        return NSLocalizedString("paywall_one_time_premium_access", bundle: bundle, comment: "")
      }

      /// en translation: Get ready
      ///
      /// Locales: en
      static func video_player_get_ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_player_get_ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_player_get_ready"
        }

        return NSLocalizedString("video_player_get_ready", bundle: bundle, comment: "")
      }

      /// en translation: Gey my personal plan
      ///
      /// Locales: en
      static func onboarding_get_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_get_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_get_plan"
        }

        return NSLocalizedString("onboarding_get_plan", bundle: bundle, comment: "")
      }

      /// en translation: Global position
      ///
      /// Locales: en
      static func profile_global_position(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_global_position", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_global_position"
        }

        return NSLocalizedString("profile_global_position", bundle: bundle, comment: "")
      }

      /// en translation: Go back and continue
      ///
      /// Locales: en
      static func player_not_finisged_go_back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("player_not_finisged_go_back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "player_not_finisged_go_back"
        }

        return NSLocalizedString("player_not_finisged_go_back", bundle: bundle, comment: "")
      }

      /// en translation: Go next
      ///
      /// Locales: en
      static func onboarding_go_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_go_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_go_next"
        }

        return NSLocalizedString("onboarding_go_next", bundle: bundle, comment: "")
      }

      /// en translation: Goal %.1f %@
      ///
      /// Locales: en
      static func energy_update_weight_goal(_ value1: Double, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_update_weight_goal", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_update_weight_goal"
        }

        let format = NSLocalizedString("energy_update_weight_goal", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Good
      ///
      /// Locales: en
      static func energy_mood_good(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_mood_good", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_mood_good"
        }

        return NSLocalizedString("energy_mood_good", bundle: bundle, comment: "")
      }

      /// en translation: Good
      ///
      /// Locales: en
      static func energy_sleep_good(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_sleep_good", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_sleep_good"
        }

        return NSLocalizedString("energy_sleep_good", bundle: bundle, comment: "")
      }

      /// en translation: Height
      ///
      /// Locales: en
      static func menu_height(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_height", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_height"
        }

        return NSLocalizedString("menu_height", bundle: bundle, comment: "")
      }

      /// en translation: Hey, %@
      ///
      /// Locales: en
      static func energy_header_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_header_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_header_title"
        }

        let format = NSLocalizedString("energy_header_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: How are you feeling?
      ///
      /// Locales: en
      static func payer_finished_feeling(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payer_finished_feeling", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payer_finished_feeling"
        }

        return NSLocalizedString("payer_finished_feeling", bundle: bundle, comment: "")
      }

      /// en translation: How are you today?
      ///
      /// Locales: en
      static func energy_mood_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_mood_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_mood_title"
        }

        return NSLocalizedString("energy_mood_title", bundle: bundle, comment: "")
      }

      /// en translation: How did you sleep?
      ///
      /// Locales: en
      static func energy_sleep_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_sleep_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_sleep_title"
        }

        return NSLocalizedString("energy_sleep_title", bundle: bundle, comment: "")
      }

      /// en translation: I can do more
      ///
      /// Locales: en
      static func payer_finished_cand_do_more(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payer_finished_cand_do_more", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payer_finished_cand_do_more"
        }

        return NSLocalizedString("payer_finished_cand_do_more", bundle: bundle, comment: "")
      }

      /// en translation: I do it regularly
      ///
      /// Locales: en
      static func onboarding_sport_regulary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_regulary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_regulary"
        }

        return NSLocalizedString("onboarding_sport_regulary", bundle: bundle, comment: "")
      }

      /// en translation: I'm just watching
      ///
      /// Locales: en
      static func player_not_finisged_watching(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("player_not_finisged_watching", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "player_not_finisged_watching"
        }

        return NSLocalizedString("player_not_finisged_watching", bundle: bundle, comment: "")
      }

      /// en translation: Improve your life & wellbeing
      ///
      /// Locales: en
      static func paywall_one_time_wellbeing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_wellbeing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_wellbeing"
        }

        return NSLocalizedString("paywall_one_time_wellbeing", bundle: bundle, comment: "")
      }

      /// en translation: It's hard for me
      ///
      /// Locales: en
      static func player_not_finisged_hard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("player_not_finisged_hard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "player_not_finisged_hard"
        }

        return NSLocalizedString("player_not_finisged_hard", bundle: bundle, comment: "")
      }

      /// en translation: Just let me play
      ///
      /// Locales: en
      static func onboarding_goal_just_play(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_just_play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_just_play"
        }

        return NSLocalizedString("onboarding_goal_just_play", bundle: bundle, comment: "")
      }

      /// en translation: KG
      ///
      /// Locales: en
      static func onboarding_weight_kg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_weight_kg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_weight_kg"
        }

        return NSLocalizedString("onboarding_weight_kg", bundle: bundle, comment: "")
      }

      /// en translation: Keep fit
      ///
      /// Locales: en
      static func onboarding_goal_keep_fit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_keep_fit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_keep_fit"
        }

        return NSLocalizedString("onboarding_goal_keep_fit", bundle: bundle, comment: "")
      }

      /// en translation: Keto
      ///
      /// Locales: en
      static func onboarding_food_keto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_keto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_keto"
        }

        return NSLocalizedString("onboarding_food_keto", bundle: bundle, comment: "")
      }

      /// en translation: LB
      ///
      /// Locales: en
      static func onboarding_weight_lb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_weight_lb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_weight_lb"
        }

        return NSLocalizedString("onboarding_weight_lb", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en
      static func menu_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_language"
        }

        return NSLocalizedString("menu_language", bundle: bundle, comment: "")
      }

      /// en translation: Level
      ///
      /// Locales: en
      static func profile_level(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_level", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_level"
        }

        return NSLocalizedString("profile_level", bundle: bundle, comment: "")
      }

      /// en translation: Log In
      ///
      /// Locales: en
      static func login_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_title"
        }

        return NSLocalizedString("login_title", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en
      static func login_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_button"
        }

        return NSLocalizedString("login_button", bundle: bundle, comment: "")
      }

      /// en translation: Lose weight
      ///
      /// Locales: en
      static func onboarding_goal_lose_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_lose_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_lose_weight"
        }

        return NSLocalizedString("onboarding_goal_lose_weight", bundle: bundle, comment: "")
      }

      /// en translation: Lunch
      ///
      /// Locales: en
      static func energy_meals_lunch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_lunch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_lunch"
        }

        return NSLocalizedString("energy_meals_lunch", bundle: bundle, comment: "")
      }

      /// en translation: Lunch
      ///
      /// Locales: en
      static func food_lunch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_lunch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_lunch"
        }

        return NSLocalizedString("food_lunch", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en
      static func onboarding_male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_male"
        }

        return NSLocalizedString("onboarding_male", bundle: bundle, comment: "")
      }

      /// en translation: Meals
      ///
      /// Locales: en
      static func login_meals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_meals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_meals"
        }

        return NSLocalizedString("login_meals", bundle: bundle, comment: "")
      }

      /// en translation: Mon
      ///
      /// Locales: en
      static func progress_mon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_mon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_mon"
        }

        return NSLocalizedString("progress_mon", bundle: bundle, comment: "")
      }

      /// en translation: Mood
      ///
      /// Locales: en
      static func profile_mood(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_mood", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_mood"
        }

        return NSLocalizedString("profile_mood", bundle: bundle, comment: "")
      }

      /// en translation: Muscle group
      ///
      /// Locales: en
      static func workout_detail_muscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("workout_detail_muscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "workout_detail_muscle"
        }

        return NSLocalizedString("workout_detail_muscle", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en
      static func menu_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_name"
        }

        return NSLocalizedString("menu_name", bundle: bundle, comment: "")
      }

      /// en translation: Newbie
      ///
      /// Locales: en
      static func onboarding_sport_newbie(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_newbie", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_newbie"
        }

        return NSLocalizedString("onboarding_sport_newbie", bundle: bundle, comment: "")
      }

      /// en translation: Next exercise
      ///
      /// Locales: en
      static func video_player_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_player_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_player_next"
        }

        return NSLocalizedString("video_player_next", bundle: bundle, comment: "")
      }

      /// en translation: No, I don't want to save
      ///
      /// Locales: en
      static func paywall_one_time_subscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_subscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_subscribe"
        }

        return NSLocalizedString("paywall_one_time_subscribe", bundle: bundle, comment: "")
      }

      /// en translation: Not at all
      ///
      /// Locales: en
      static func onboarding_sport_not_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_not_all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_not_all"
        }

        return NSLocalizedString("onboarding_sport_not_all", bundle: bundle, comment: "")
      }

      /// en translation: Not bad
      ///
      /// Locales: en
      static func energy_mood_not_bad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_mood_not_bad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_mood_not_bad"
        }

        return NSLocalizedString("energy_mood_not_bad", bundle: bundle, comment: "")
      }

      /// en translation: Notification
      ///
      /// Locales: en
      static func menu_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_notification"
        }

        return NSLocalizedString("menu_notification", bundle: bundle, comment: "")
      }

      /// en translation: Offer
      ///
      /// Locales: en
      static func paywall_one_time_offer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_offer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_offer"
        }

        return NSLocalizedString("paywall_one_time_offer", bundle: bundle, comment: "")
      }

      /// en translation: One Time
      ///
      /// Locales: en
      static func paywall_one_time_one_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_one_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_one_time"
        }

        return NSLocalizedString("paywall_one_time_one_time", bundle: bundle, comment: "")
      }

      /// en translation: One year
      ///
      /// Locales: en
      static func paywall_one_time_one_year(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_one_year", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_one_year"
        }

        return NSLocalizedString("paywall_one_time_one_year", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en
      static func onboarding_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_other"
        }

        return NSLocalizedString("onboarding_other", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en
      static func player_not_finisged_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("player_not_finisged_other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "player_not_finisged_other"
        }

        return NSLocalizedString("player_not_finisged_other", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en
      static func login_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_password"
        }

        return NSLocalizedString("login_password", bundle: bundle, comment: "")
      }

      /// en translation: Personal
      ///
      /// Locales: en
      static func paywall_one_time_personal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_personal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_personal"
        }

        return NSLocalizedString("paywall_one_time_personal", bundle: bundle, comment: "")
      }

      /// en translation: Pescatarian
      ///
      /// Locales: en
      static func onboarding_food_pesca(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_pesca", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_pesca"
        }

        return NSLocalizedString("onboarding_food_pesca", bundle: bundle, comment: "")
      }

      /// en translation: Playing
      ///
      /// Locales: en
      static func login_playing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_playing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_playing"
        }

        return NSLocalizedString("login_playing", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the email address that you used when creating your account.
      ///
      /// Locales: en
      static func login_forgot_subTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_subTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_subTitle"
        }

        return NSLocalizedString("login_forgot_subTitle", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static func login_privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_privacy"
        }

        return NSLocalizedString("login_privacy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static func menu_privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_privacy"
        }

        return NSLocalizedString("menu_privacy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static func profile_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_privacy_policy"
        }

        return NSLocalizedString("profile_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy,
      ///
      /// Locales: en
      static func login_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_privacy_policy"
        }

        return NSLocalizedString("login_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Processing
      ///
      /// Locales: en
      static func onboarding_processing_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_processing_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_processing_title"
        }

        return NSLocalizedString("onboarding_processing_title", bundle: bundle, comment: "")
      }

      /// en translation: Product name
      ///
      /// Locales: en
      static func write_to_us_product_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_us_product_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_us_product_name"
        }

        return NSLocalizedString("write_to_us_product_name", bundle: bundle, comment: "")
      }

      /// en translation: Professional
      ///
      /// Locales: en
      static func onboarding_sport_professional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_professional", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_professional"
        }

        return NSLocalizedString("onboarding_sport_professional", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile"
        }

        return NSLocalizedString("profile", bundle: bundle, comment: "")
      }

      /// en translation: Proteins
      ///
      /// Locales: en
      static func energy_meals_protein(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_protein", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_protein"
        }

        return NSLocalizedString("energy_meals_protein", bundle: bundle, comment: "")
      }

      /// en translation: Proteins
      ///
      /// Locales: en
      static func food_main_proteins(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_main_proteins", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_main_proteins"
        }

        return NSLocalizedString("food_main_proteins", bundle: bundle, comment: "")
      }

      /// en translation: Proteins %.1fg
      ///
      /// Locales: en
      static func food_proteins_float(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_proteins_float", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_proteins_float"
        }

        let format = NSLocalizedString("food_proteins_float", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Proteins %dg
      ///
      /// Locales: en
      static func food_proteins(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_proteins", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_proteins"
        }

        let format = NSLocalizedString("food_proteins", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Rank
      ///
      /// Locales: en
      static func profile_rank(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_rank", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_rank"
        }

        return NSLocalizedString("profile_rank", bundle: bundle, comment: "")
      }

      /// en translation: Recent
      ///
      /// Locales: en
      static func food_recent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_recent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_recent"
        }

        return NSLocalizedString("food_recent", bundle: bundle, comment: "")
      }

      /// en translation: Reduce hunger
      ///
      /// Locales: en
      static func paywall_one_time_hunger(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_hunger", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_hunger"
        }

        return NSLocalizedString("paywall_one_time_hunger", bundle: bundle, comment: "")
      }

      /// en translation: Reminders
      ///
      /// Locales: en
      static func menu_reminders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_reminders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_reminders"
        }

        return NSLocalizedString("menu_reminders", bundle: bundle, comment: "")
      }

      /// en translation: Resting
      ///
      /// Locales: en
      static func workout_detail_resting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("workout_detail_resting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "workout_detail_resting"
        }

        return NSLocalizedString("workout_detail_resting", bundle: bundle, comment: "")
      }

      /// en translation: Restore Purchases
      ///
      /// Locales: en
      static func paywall_one_time_restore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_restore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_restore"
        }

        return NSLocalizedString("paywall_one_time_restore", bundle: bundle, comment: "")
      }

      /// en translation: SM
      ///
      /// Locales: en
      static func onboarding_height_sm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_height_sm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_height_sm"
        }

        return NSLocalizedString("onboarding_height_sm", bundle: bundle, comment: "")
      }

      /// en translation: Sat
      ///
      /// Locales: en
      static func progress_sat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_sat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_sat"
        }

        return NSLocalizedString("progress_sat", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en
      static func paywall_one_time_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_save"
        }

        return NSLocalizedString("paywall_one_time_save", bundle: bundle, comment: "")
      }

      /// en translation: Save Changes
      ///
      /// Locales: en
      static func menu_save_changes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_save_changes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_save_changes"
        }

        return NSLocalizedString("menu_save_changes", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en
      static func food_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_search"
        }

        return NSLocalizedString("food_search", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en
      static func menu_write_us_send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write_us_send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write_us_send"
        }

        return NSLocalizedString("menu_write_us_send", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en
      static func menu_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_title"
        }

        return NSLocalizedString("menu_title", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en
      static func onboarding_food_skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_skip"
        }

        return NSLocalizedString("onboarding_food_skip", bundle: bundle, comment: "")
      }

      /// en translation: Snack
      ///
      /// Locales: en
      static func energy_meals_snack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_snack", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_snack"
        }

        return NSLocalizedString("energy_meals_snack", bundle: bundle, comment: "")
      }

      /// en translation: Snack
      ///
      /// Locales: en
      static func food_snack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_snack", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_snack"
        }

        return NSLocalizedString("food_snack", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en
      static func login_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_start"
        }

        return NSLocalizedString("login_start", bundle: bundle, comment: "")
      }

      /// en translation: Start training
      ///
      /// Locales: en
      static func energy_training_start_training(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_training_start_training", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_start_training"
        }

        return NSLocalizedString("energy_training_start_training", bundle: bundle, comment: "")
      }

      /// en translation: Start workout
      ///
      /// Locales: en
      static func workout_detail_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("workout_detail_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "workout_detail_start"
        }

        return NSLocalizedString("workout_detail_start", bundle: bundle, comment: "")
      }

      /// en translation: Start your new life easy and fun!
      ///
      /// Locales: en
      static func login_title_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_title_update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_title_update"
        }

        return NSLocalizedString("login_title_update", bundle: bundle, comment: "")
      }

      /// en translation: Start your workout
      ///
      /// Locales: en
      static func video_player_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_player_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_player_start"
        }

        return NSLocalizedString("video_player_start", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en
      static func login_forgot_submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_submit"
        }

        return NSLocalizedString("login_forgot_submit", bundle: bundle, comment: "")
      }

      /// en translation: Sun
      ///
      /// Locales: en
      static func progress_sun(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_sun", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_sun"
        }

        return NSLocalizedString("progress_sun", bundle: bundle, comment: "")
      }

      /// en translation: Target
      ///
      /// Locales: en
      static func profile_target(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_target", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_target"
        }

        return NSLocalizedString("profile_target", bundle: bundle, comment: "")
      }

      /// en translation: Target weight
      ///
      /// Locales: en
      static func menu_target_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_target_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_target_weight"
        }

        return NSLocalizedString("menu_target_weight", bundle: bundle, comment: "")
      }

      /// en translation: Target weight
      ///
      /// Locales: en
      static func onboarding_targe_weight_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_targe_weight_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_targe_weight_title"
        }

        return NSLocalizedString("onboarding_targe_weight_title", bundle: bundle, comment: "")
      }

      /// en translation: Tell us why you interrupted your workout and we will find you the next one that suits you best.
      ///
      /// Locales: en
      static func player_not_finisged_subtTite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("player_not_finisged_subtTite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "player_not_finisged_subtTite"
        }

        return NSLocalizedString("player_not_finisged_subtTite", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Subscribe
      ///
      /// Locales: en
      static func login_terms_of_subscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_terms_of_subscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_terms_of_subscribe"
        }

        return NSLocalizedString("login_terms_of_subscribe", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func login_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_terms"
        }

        return NSLocalizedString("login_terms", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func login_terms_use(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_terms_use", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_terms_use"
        }

        return NSLocalizedString("login_terms_use", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func menu_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_terms"
        }

        return NSLocalizedString("menu_terms", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func profile_terms_of_use(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_terms_of_use", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_terms_of_use"
        }

        return NSLocalizedString("profile_terms_of_use", bundle: bundle, comment: "")
      }

      /// en translation: Text your message
      ///
      /// Locales: en
      static func menu_write_us_plcaheloder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write_us_plcaheloder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write_us_plcaheloder"
        }

        return NSLocalizedString("menu_write_us_plcaheloder", bundle: bundle, comment: "")
      }

      /// en translation: Thu
      ///
      /// Locales: en
      static func progress_thu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_thu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_thu"
        }

        return NSLocalizedString("progress_thu", bundle: bundle, comment: "")
      }

      /// en translation: Time
      ///
      /// Locales: en
      static func payer_finished_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payer_finished_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payer_finished_time"
        }

        return NSLocalizedString("payer_finished_time", bundle: bundle, comment: "")
      }

      /// en translation: Too long for me
      ///
      /// Locales: en
      static func player_not_finisged_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("player_not_finisged_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "player_not_finisged_long"
        }

        return NSLocalizedString("player_not_finisged_long", bundle: bundle, comment: "")
      }

      /// en translation: Training
      ///
      /// Locales: en
      static func energy_training_training(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_training_training", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_training"
        }

        return NSLocalizedString("energy_training_training", bundle: bundle, comment: "")
      }

      /// en translation: Try 3 days for free
      ///
      /// Locales: en
      static func paywall_one_time_trial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_trial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_trial"
        }

        return NSLocalizedString("paywall_one_time_trial", bundle: bundle, comment: "")
      }

      /// en translation: Tue
      ///
      /// Locales: en
      static func progress_tue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_tue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_tue"
        }

        return NSLocalizedString("progress_tue", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en
      static func energy_update_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_update_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_update_button"
        }

        return NSLocalizedString("energy_update_button", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en
      static func food_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_update"
        }

        return NSLocalizedString("food_update", bundle: bundle, comment: "")
      }

      /// en translation: Update weight
      ///
      /// Locales: en
      static func energy_update_weight_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_update_weight_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_update_weight_title"
        }

        return NSLocalizedString("energy_update_weight_title", bundle: bundle, comment: "")
      }

      /// en translation: Vegan
      ///
      /// Locales: en
      static func onboarding_food_vegan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_vegan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_vegan"
        }

        return NSLocalizedString("onboarding_food_vegan", bundle: bundle, comment: "")
      }

      /// en translation: Vegetarian
      ///
      /// Locales: en
      static func onboarding_food_vegetarian(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_vegetarian", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_vegetarian"
        }

        return NSLocalizedString("onboarding_food_vegetarian", bundle: bundle, comment: "")
      }

      /// en translation: Very hard
      ///
      /// Locales: en
      static func payer_finished_hard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payer_finished_hard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payer_finished_hard"
        }

        return NSLocalizedString("payer_finished_hard", bundle: bundle, comment: "")
      }

      /// en translation: We create your personal nutrition and workout plan
      ///
      /// Locales: en
      static func onboarding_processing_subTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_processing_subTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_processing_subTitle"
        }

        return NSLocalizedString("onboarding_processing_subTitle", bundle: bundle, comment: "")
      }

      /// en translation: We recomend
      ///
      /// Locales: en
      static func food_we_recomend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_we_recomend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_we_recomend"
        }

        return NSLocalizedString("food_we_recomend", bundle: bundle, comment: "")
      }

      /// en translation: We will check the correctness of your product and add it to our base
      ///
      /// Locales: en
      static func write_to_us_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_us_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_us_subtitle"
        }

        return NSLocalizedString("write_to_us_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Wed
      ///
      /// Locales: en
      static func progress_wed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_wed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_wed"
        }

        return NSLocalizedString("progress_wed", bundle: bundle, comment: "")
      }

      /// en translation: Weight
      ///
      /// Locales: en
      static func menu_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_weight"
        }

        return NSLocalizedString("menu_weight", bundle: bundle, comment: "")
      }

      /// en translation: Weight
      ///
      /// Locales: en
      static func profile_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_weight"
        }

        return NSLocalizedString("profile_weight", bundle: bundle, comment: "")
      }

      /// en translation: What's your goal?
      ///
      /// Locales: en
      static func onboarding_goal_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_title"
        }

        return NSLocalizedString("onboarding_goal_title", bundle: bundle, comment: "")
      }

      /// en translation: Workouts
      ///
      /// Locales: en
      static func login_workouts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_workouts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_workouts"
        }

        return NSLocalizedString("login_workouts", bundle: bundle, comment: "")
      }

      /// en translation: Write to us
      ///
      /// Locales: en
      static func menu_write(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write"
        }

        return NSLocalizedString("menu_write", bundle: bundle, comment: "")
      }

      /// en translation: Write to us
      ///
      /// Locales: en
      static func profile_write_to_us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_write_to_us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_write_to_us"
        }

        return NSLocalizedString("profile_write_to_us", bundle: bundle, comment: "")
      }

      /// en translation: Write us to ask any question
      ///
      /// Locales: en
      static func menu_write_us_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write_us_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write_us_title"
        }

        return NSLocalizedString("menu_write_us_title", bundle: bundle, comment: "")
      }

      /// en translation: You have finished your workout!
      ///
      /// Locales: en
      static func payer_finished_subTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payer_finished_subTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payer_finished_subTitle"
        }

        return NSLocalizedString("payer_finished_subTitle", bundle: bundle, comment: "")
      }

      /// en translation: You have not finished your fasting!
      ///
      /// Locales: en
      static func player_not_finisged_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("player_not_finisged_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "player_not_finisged_title"
        }

        return NSLocalizedString("player_not_finisged_title", bundle: bundle, comment: "")
      }

      /// en translation: Your age
      ///
      /// Locales: en
      static func onboarding_age_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_age_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_age_title"
        }

        return NSLocalizedString("onboarding_age_title", bundle: bundle, comment: "")
      }

      /// en translation: Your email
      ///
      /// Locales: en
      static func onboarding_email_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_email_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_email_title"
        }

        return NSLocalizedString("onboarding_email_title", bundle: bundle, comment: "")
      }

      /// en translation: Your gender
      ///
      /// Locales: en
      static func onboarding_gender_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_gender_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_gender_title"
        }

        return NSLocalizedString("onboarding_gender_title", bundle: bundle, comment: "")
      }

      /// en translation: Your height
      ///
      /// Locales: en
      static func onboarding_height_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_height_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_height_title"
        }

        return NSLocalizedString("onboarding_height_title", bundle: bundle, comment: "")
      }

      /// en translation: Your meals
      ///
      /// Locales: en
      static func energy_meals_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_title"
        }

        return NSLocalizedString("energy_meals_title", bundle: bundle, comment: "")
      }

      /// en translation: Your name
      ///
      /// Locales: en
      static func onboarding_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_name"
        }

        return NSLocalizedString("onboarding_name", bundle: bundle, comment: "")
      }

      /// en translation: Your next workout %d min
      ///
      /// Locales: en
      static func energy_training_next_workout(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_training_next_workout", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_next_workout"
        }

        let format = NSLocalizedString("energy_training_next_workout", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Your progress
      ///
      /// Locales: en
      static func progress_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_title"
        }

        return NSLocalizedString("progress_title", bundle: bundle, comment: "")
      }

      /// en translation: Your progress %d%
      ///
      /// Locales: en
      static func energy_progress_percent(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_progress_percent", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_progress_percent"
        }

        let format = NSLocalizedString("energy_progress_percent", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Your weight
      ///
      /// Locales: en
      static func onboarding_weight_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_weight_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_weight_title"
        }

        return NSLocalizedString("onboarding_weight_title", bundle: bundle, comment: "")
      }

      /// en translation: and
      ///
      /// Locales: en
      static func login_and(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_and", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_and"
        }

        return NSLocalizedString("login_and", bundle: bundle, comment: "")
      }

      /// en translation: per year
      ///
      /// Locales: en
      static func paywall_one_time_per_year(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paywall_one_time_per_year", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paywall_one_time_per_year"
        }

        return NSLocalizedString("paywall_one_time_per_year", bundle: bundle, comment: "")
      }

      /// en translation: reps
      ///
      /// Locales: en
      static func video_player_reps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_player_reps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_player_reps"
        }

        return NSLocalizedString("video_player_reps", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BuildPopUpView.validate()
      try _EnerdyTodayCell.validate()
      try _EnergyChooseActivityCell.validate()
      try _EnergyChooseActivityCollectionCell.validate()
      try _EnergyController.validate()
      try _EnergyDrinkWaterCell.validate()
      try _EnergyMealsCell.validate()
      try _EnergyMoodCell.validate()
      try _EnergyProgressController.validate()
      try _EnergySleepCell.validate()
      try _EnergySpecialPriceCell.validate()
      try _EnergyStepsCell.validate()
      try _EnergyTrainingCell.validate()
      try _EnergyWeightCell.validate()
      try _FoodController.validate()
      try _FoodRecomendedCell.validate()
      try _LevelController.validate()
      try _LoginController.validate()
      try _MainTabBarController.validate()
      try _MenuAgeController.validate()
      try _MenuCell.validate()
      try _MenuController.validate()
      try _MenuEmailController.validate()
      try _MenuFitnessController.validate()
      try _MenuFoodController.validate()
      try _MenuHeightController.validate()
      try _MenuLanguageController.validate()
      try _MenuLanguagesTitleCell.validate()
      try _MenuNameController.validate()
      try _MenuTargetWeightController.validate()
      try _MenuWeightController.validate()
      try _MenuWriteQuestionController.validate()
      try _MoodTableCell.validate()
      try _OnboardingSwipeCell.validate()
      try _OnboardingSwipeContoller.validate()
      try _PaywallController.validate()
      try _PaywallMultiplyController.validate()
      try _PaywallOneTimeController.validate()
      try _PaywallSingleController.validate()
      try _ProfileController.validate()
      try _QuizeAgeController.validate()
      try _QuizeEmailController.validate()
      try _QuizeFoodCell.validate()
      try _QuizeFoodController.validate()
      try _QuizeGenderController.validate()
      try _QuizeGoalController.validate()
      try _QuizeHeightController.validate()
      try _QuizeNameController.validate()
      try _QuizeProgressController.validate()
      try _QuizeSportController.validate()
      try _QuizeTargetWeightController.validate()
      try _QuizeVideoController.validate()
      try _QuizeWeightController.validate()
      try _SplashViewController.validate()
      try _StartController.validate()
      try _VideoFinishedController.validate()
      try _VideoNotFinished.validate()
      try _VideoPlayerController.validate()
      try _WeightTableCell.validate()
      try _WorkoutController.validate()
      try _WorkoutDetailController.validate()
      try _WorkoutDetailDescriptionCell.validate()
      try _WorkoutDetailHeaderCell.validate()
      try _WorkoutDetailMuscleController.validate()
      try _WorkoutDetailTrainCell.validate()
      try _WorkoutExercisesDetailCell.validate()
      try _WorkoutSpecialDetailCell.validate()
      try _WriteToUsController.validate()
    }

    struct _AwardsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PolicyCell

      let bundle = R.hostingBundle
      let identifier = "AwardsTableCell"
      let name = "AwardsTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PolicyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PolicyCell
      }

      fileprivate init() {}
    }

    struct _BuildPopUpView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BuildPopUpView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Unselected1Scale", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Unselected1Scale' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Unselected2Scale", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Unselected2Scale' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Unselected3Scale", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Unselected3Scale' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Unselected4Scale", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Unselected4Scale' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Unselected5Scale", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Unselected5Scale' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backBtn' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "buildPopUpBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'buildPopUpBack' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "freeHummer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'freeHummer' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pop1Gold", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pop1Gold' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pop2Gold", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pop2Gold' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top_view_coin_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_view_coin_ic' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "upgradeBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'upgradeBtn' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "yellowPointer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'yellowPointer' is used in nib 'BuildPopUpView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ChartCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChartCollectionCell

      let bundle = R.hostingBundle
      let identifier = "ChartCollectionCell"
      let name = "ChartCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChartCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChartCollectionCell
      }

      fileprivate init() {}
    }

    struct _ChartTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChartTableCell

      let bundle = R.hostingBundle
      let identifier = "ChartTableCell"
      let name = "ChartTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChartTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChartTableCell
      }

      fileprivate init() {}
    }

    struct _EnerdyTodayCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnerdyTodayCell

      let bundle = R.hostingBundle
      let identifier = "EnerdyTodayCell"
      let name = "EnerdyTodayCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnerdyTodayCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnerdyTodayCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_arrow_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_arrow_back_ic' is used in nib 'EnerdyTodayCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_arrow_forward_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_arrow_forward_ic' is used in nib 'EnerdyTodayCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_today_pin_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_today_pin_ic' is used in nib 'EnerdyTodayCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyAddActivityCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EnergyAddActivityCell

      let bundle = R.hostingBundle
      let identifier = "EnergyAddActivityCell"
      let name = "EnergyAddActivityCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyAddActivityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyAddActivityCell
      }

      fileprivate init() {}
    }

    struct _EnergyChooseActivityCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyChooseActivityCell

      let bundle = R.hostingBundle
      let identifier = "EnergyChooseActivityCell"
      let name = "EnergyChooseActivityCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyChooseActivityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyChooseActivityCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyChooseActivityCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyChooseActivityCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyChooseActivityCollectionCell

      let bundle = R.hostingBundle
      let identifier = "EnergyChooseActivityCollectionCell"
      let name = "EnergyChooseActivityCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyChooseActivityCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyChooseActivityCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_big_sport_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_big_sport_ic' is used in nib 'EnergyChooseActivityCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_blocked_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_blocked_ic' is used in nib 'EnergyChooseActivityCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EnergyController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_coins_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_coins_ic' is used in nib 'EnergyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'EnergyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'EnergyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_food_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_food_ic' is used in nib 'EnergyController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyDrinkWaterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyDrinkWaterCell

      let bundle = R.hostingBundle
      let identifier = "EnergyDrinkWaterCell"
      let name = "EnergyDrinkWaterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyDrinkWaterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyDrinkWaterCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_arrow_down_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_arrow_down_ic' is used in nib 'EnergyDrinkWaterCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_eyea_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_eyea_ic' is used in nib 'EnergyDrinkWaterCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_info_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_info_ic' is used in nib 'EnergyDrinkWaterCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_water_empty_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_empty_ic' is used in nib 'EnergyDrinkWaterCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyDrinkWaterCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyMealsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyMealsCell

      let bundle = R.hostingBundle
      let identifier = "EnergyMealsCell"
      let name = "EnergyMealsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyMealsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyMealsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_arrow_down_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_arrow_down_ic' is used in nib 'EnergyMealsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_eyea_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_eyea_ic' is used in nib 'EnergyMealsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_info_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_info_ic' is used in nib 'EnergyMealsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyMealsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'EnergyMealsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyMoodCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyMoodCell

      let bundle = R.hostingBundle
      let identifier = "EnergyMoodCell"
      let name = "EnergyMoodCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyMoodCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyMoodCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_mood_badly_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_mood_badly_ic' is used in nib 'EnergyMoodCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_mood_good_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_mood_good_ic' is used in nib 'EnergyMoodCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_mood_not_bad_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_mood_not_bad_ic' is used in nib 'EnergyMoodCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyMoodCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyProgressController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EnergyProgressController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'EnergyProgressController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'EnergyProgressController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "progress_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'progress_back_ic' is used in nib 'EnergyProgressController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "progress_cube_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'progress_cube_ic' is used in nib 'EnergyProgressController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "progress_forward_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'progress_forward_ic' is used in nib 'EnergyProgressController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergySleepCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergySleepCell

      let bundle = R.hostingBundle
      let identifier = "EnergySleepCell"
      let name = "EnergySleepCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergySleepCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergySleepCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergySleepCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergySpecialPriceCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergySpecialPriceCell

      let bundle = R.hostingBundle
      let identifier = "EnergySpecialPriceCell"
      let name = "EnergySpecialPriceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergySpecialPriceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergySpecialPriceCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_big_sport_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_big_sport_ic' is used in nib 'EnergySpecialPriceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyStepsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyStepsCell

      let bundle = R.hostingBundle
      let identifier = "EnergyStepsCell"
      let name = "EnergyStepsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyStepsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyStepsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_arrow_down_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_arrow_down_ic' is used in nib 'EnergyStepsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_eyea_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_eyea_ic' is used in nib 'EnergyStepsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_info_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_info_ic' is used in nib 'EnergyStepsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyStepsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "grayText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayText' is used in nib 'EnergyStepsCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "pinkTarget", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'pinkTarget' is used in nib 'EnergyStepsCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "profileCellBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'profileCellBack' is used in nib 'EnergyStepsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _EnergyStepsCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EnergyStepsCollectionCell

      let bundle = R.hostingBundle
      let identifier = "EnergyStepsCollectionCell"
      let name = "EnergyStepsCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyStepsCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyStepsCollectionCell
      }

      fileprivate init() {}
    }

    struct _EnergyTrainingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyTrainingCell

      let bundle = R.hostingBundle
      let identifier = "EnergyTrainingCell"
      let name = "EnergyTrainingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyTrainingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyTrainingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyTrainingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'EnergyTrainingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "temp_activity_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_activity_ic' is used in nib 'EnergyTrainingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyUpdateWeightController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EnergyUpdateWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _EnergyWeightCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyWeightCell

      let bundle = R.hostingBundle
      let identifier = "EnergyWeightCell"
      let name = "EnergyWeightCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyWeightCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyWeightCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyWeightCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FoodAddController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FoodAddController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FoodController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FoodController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "food_arrow_down_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'food_arrow_down_ic' is used in nib 'FoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "food_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'food_background_ic' is used in nib 'FoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "food_clear_search_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'food_clear_search_ic' is used in nib 'FoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "food_search_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'food_search_ic' is used in nib 'FoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:3sc-gp-9Zw:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:3sc-gp-9Zw:image' is used in nib 'FoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'FoodController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FoodRecomendedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FoodRecomendedCell

      let bundle = R.hostingBundle
      let identifier = "FoodRecomendedCell"
      let name = "FoodRecomendedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodRecomendedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodRecomendedCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_meals_add_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_meals_add_ic' is used in nib 'FoodRecomendedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_food_two_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_food_two_ic' is used in nib 'FoodRecomendedCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FoodTopTitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FoodTopTitleCell

      let bundle = R.hostingBundle
      let identifier = "FoodTopTitleCell"
      let name = "FoodTopTitleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodTopTitleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodTopTitleCell
      }

      fileprivate init() {}
    }

    struct _LevelController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LevelController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "deersStart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deersStart' is used in nib 'LevelController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fishStart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fishStart' is used in nib 'LevelController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "freeHummer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'freeHummer' is used in nib 'LevelController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "goldStart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'goldStart' is used in nib 'LevelController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "igluStart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'igluStart' is used in nib 'LevelController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "levelBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'levelBack' is used in nib 'LevelController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shipStart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shipStart' is used in nib 'LevelController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LoginController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "auth_apple_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'auth_apple_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "auth_fb_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'auth_fb_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "auth_note_see_pass_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'auth_note_see_pass_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MainTabBarController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainTabBarController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tab_bar_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_energy_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_fun_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_fun_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_menu_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_menu_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_profile_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_workout_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_workout_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuAgeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuAgeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuAgeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuAgeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "menu_arrow_right_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_arrow_right_ic' is used in nib 'MenuCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_flag_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_flag_ic' is used in nib 'MenuCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuDeleteAccount: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuDeleteAccount

      let bundle = R.hostingBundle
      let identifier = "MenuDeleteAccount"
      let name = "MenuDeleteAccount"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuDeleteAccount? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuDeleteAccount
      }

      fileprivate init() {}
    }

    struct _MenuEmailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuEmailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuEmailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuEmailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuFitnessController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuFitnessController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuFitnessController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuFitnessController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuFoodController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuFoodController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuFoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuFoodController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuFoodSwitchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuFoodSwitchCell

      let bundle = R.hostingBundle
      let identifier = "MenuFoodSwitchCell"
      let name = "MenuFoodSwitchCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodSwitchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodSwitchCell
      }

      fileprivate init() {}
    }

    struct _MenuFoodTitleCellCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuFoodTitleCellCell

      let bundle = R.hostingBundle
      let identifier = "MenuFoodTitleCellCell"
      let name = "MenuFoodTitleCellCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodTitleCellCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodTitleCellCell
      }

      fileprivate init() {}
    }

    struct _MenuHeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuHeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuHeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuHeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuLanguageController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuLanguageController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuLanguageController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuLanguageController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuLanguagesTitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MenuLanguagesTitleCell

      let bundle = R.hostingBundle
      let identifier = "MenuLanguagesTitleCell"
      let name = "MenuLanguagesTitleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuLanguagesTitleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuLanguagesTitleCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'MenuLanguagesTitleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuLogoutCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuLogoutCell

      let bundle = R.hostingBundle
      let identifier = "MenuLogoutCell"
      let name = "MenuLogoutCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuLogoutCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuLogoutCell
      }

      fileprivate init() {}
    }

    struct _MenuNameController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuNameController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuNameController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuNameController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuTargetWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuTargetWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_target_flag_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_target_flag_ic' is used in nib 'MenuTargetWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuWriteQuestionController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuWriteQuestionController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuWriteQuestionController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuWriteQuestionController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MoodTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MoodTableCell

      let bundle = R.hostingBundle
      let identifier = "MoodTableCell"
      let name = "MoodTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoodTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoodTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "MoodChartBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MoodChartBack' is used in nib 'MoodTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "grayText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayText' is used in nib 'MoodTableCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "profileCellBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'profileCellBack' is used in nib 'MoodTableCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OnboardingSwipeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OnboardingSwipeCell

      let bundle = R.hostingBundle
      let identifier = "OnboardingSwipeCell"
      let name = "OnboardingSwipeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OnboardingSwipeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnboardingSwipeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboading_swipe_1_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboading_swipe_1_ic' is used in nib 'OnboardingSwipeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OnboardingSwipeContoller: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnboardingSwipeContoller"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'OnboardingSwipeContoller', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_swipe_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_swipe_back_ic' is used in nib 'OnboardingSwipeContoller', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_swipe_logo_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_swipe_logo_ic' is used in nib 'OnboardingSwipeContoller', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PaywallController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaywallController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'PaywallController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_above_text_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_above_text_ic' is used in nib 'PaywallController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_close_white_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_close_white_ic' is used in nib 'PaywallController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_fade_down_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_fade_down_ic' is used in nib 'PaywallController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_selected_ic' is used in nib 'PaywallController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_women_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_women_ic' is used in nib 'PaywallController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_women_shadow_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_women_shadow_ic' is used in nib 'PaywallController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PaywallMultiplyController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaywallMultiplyController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "paywall_above_text_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_above_text_ic' is used in nib 'PaywallMultiplyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_close_white_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_close_white_ic' is used in nib 'PaywallMultiplyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_selected_ic' is used in nib 'PaywallMultiplyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_women_complete_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_women_complete_ic' is used in nib 'PaywallMultiplyController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PaywallOneTimeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaywallOneTimeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "paywall_above_text_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_above_text_ic' is used in nib 'PaywallOneTimeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_close_white_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_close_white_ic' is used in nib 'PaywallOneTimeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_one_time_back_women_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_one_time_back_women_ic' is used in nib 'PaywallOneTimeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_one_time_front_women_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_one_time_front_women_ic' is used in nib 'PaywallOneTimeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_one_time_main_ellipse_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_one_time_main_ellipse_ic' is used in nib 'PaywallOneTimeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_one_time_top_ellipse_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_one_time_top_ellipse_ic' is used in nib 'PaywallOneTimeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_selected_ic' is used in nib 'PaywallOneTimeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PaywallSingleController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaywallSingleController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "paywall_above_text_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_above_text_ic' is used in nib 'PaywallSingleController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_close_white_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_close_white_ic' is used in nib 'PaywallSingleController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_fade_down_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_fade_down_ic' is used in nib 'PaywallSingleController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_sale_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_sale_ic' is used in nib 'PaywallSingleController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_selected_ic' is used in nib 'PaywallSingleController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_women_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_women_ic' is used in nib 'PaywallSingleController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paywall_women_shadow_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_women_shadow_ic' is used in nib 'PaywallSingleController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PositionTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PositionTableCell

      let bundle = R.hostingBundle
      let identifier = "PositionTableCell"
      let name = "PositionTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PositionTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PositionTableCell
      }

      fileprivate init() {}
    }

    struct _ProfileController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "dummyFace", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dummyFace' is used in nib 'ProfileController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'ProfileController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top_view_coin_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_view_coin_ic' is used in nib 'ProfileController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top_view_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_view_flash_ic' is used in nib 'ProfileController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProgressCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProgressCell

      let bundle = R.hostingBundle
      let identifier = "ProgressCell"
      let name = "ProgressCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProgressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProgressCell
      }

      fileprivate init() {}
    }

    struct _QuizeAgeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeAgeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'QuizeAgeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeAgeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeAgeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeEmailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeEmailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeEmailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeEmailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeFoodCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QuizeFoodCell

      let bundle = R.hostingBundle
      let identifier = "QuizeFoodCell"
      let name = "QuizeFoodCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuizeFoodCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuizeFoodCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_food_classic_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_food_classic_ic' is used in nib 'QuizeFoodCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'QuizeFoodCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeFoodController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeFoodController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'QuizeFoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeFoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeFoodController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeGenderController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeGenderController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_gender_man_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_gender_man_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_gender_women_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_gender_women_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeGoalController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeGoalController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'QuizeGoalController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeGoalController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeGoalController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeHeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeHeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'QuizeHeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeHeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeHeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeNameController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeNameController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'QuizeNameController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeNameController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeNameController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeProgressController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeProgressController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeProgressController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeSportController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeSportController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_food_classic_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_food_classic_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeTargetWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeTargetWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'QuizeTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_target_flag_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_target_flag_ic' is used in nib 'QuizeTargetWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeVideoController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeVideoController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "paywall_close_white_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paywall_close_white_ic' is used in nib 'QuizeVideoController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'QuizeWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SplashViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SplashViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "start_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_back_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_gradient_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_login_button_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_login_button_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_logo_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_logo_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _StartController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StartController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "start_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_back_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_gradient_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_logo_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_logo_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoFinishedController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoFinishedController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'VideoFinishedController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'VideoFinishedController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'VideoFinishedController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_finished_excellent_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_finished_excellent_ic' is used in nib 'VideoFinishedController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_finished_hard_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_finished_hard_ic' is used in nib 'VideoFinishedController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_finished_main_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_finished_main_ic' is used in nib 'VideoFinishedController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_finished_more_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_finished_more_ic' is used in nib 'VideoFinishedController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_flash_ic' is used in nib 'VideoFinishedController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoNotFinished: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoNotFinished"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'VideoNotFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'VideoNotFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_not_end_hard_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_not_end_hard_ic' is used in nib 'VideoNotFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_not_end_long_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_not_end_long_ic' is used in nib 'VideoNotFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_not_end_main_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_not_end_main_ic' is used in nib 'VideoNotFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_not_end_other_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_not_end_other_ic' is used in nib 'VideoNotFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video_not_end_watch_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video_not_end_watch_ic' is used in nib 'VideoNotFinished', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoPlayerController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoPlayerController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "payer_shadow_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'payer_shadow_ic' is used in nib 'VideoPlayerController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "player_bubles_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'player_bubles_ic' is used in nib 'VideoPlayerController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "player_landscape_shadow_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'player_landscape_shadow_ic' is used in nib 'VideoPlayerController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "player_next_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'player_next_ic' is used in nib 'VideoPlayerController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "player_play_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'player_play_ic' is used in nib 'VideoPlayerController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "player_portrait_mute_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'player_portrait_mute_ic' is used in nib 'VideoPlayerController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "player_prev_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'player_prev_ic' is used in nib 'VideoPlayerController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "temp_workout_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_workout_ic' is used in nib 'VideoPlayerController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top_view_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_view_flash_ic' is used in nib 'VideoPlayerController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_back_ic' is used in nib 'VideoPlayerController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WeightTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WeightTableCell

      let bundle = R.hostingBundle
      let identifier = "WeightTableCell"
      let name = "WeightTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeightTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeightTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "MoodChartBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MoodChartBack' is used in nib 'WeightTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "grayText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayText' is used in nib 'WeightTableCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "pinkTarget", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'pinkTarget' is used in nib 'WeightTableCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "profileCellBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'profileCellBack' is used in nib 'WeightTableCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutActivitiesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutActivitiesCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutActivitiesCell"
      let name = "WorkoutActivitiesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutActivitiesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutActivitiesCell
      }

      fileprivate init() {}
    }

    struct _WorkoutActivityCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutActivityCollectionCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutActivityCollectionCell"
      let name = "WorkoutActivityCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutActivityCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutActivityCollectionCell
      }

      fileprivate init() {}
    }

    struct _WorkoutController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WorkoutController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_coins_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_coins_ic' is used in nib 'WorkoutController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'WorkoutController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_food_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_food_ic' is used in nib 'WorkoutController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top_view_elipse_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_view_elipse_ic' is used in nib 'WorkoutController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WorkoutDetailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'WorkoutDetailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailDescriptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WorkoutDetailDescriptionCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutDetailDescriptionCell"
      let name = "WorkoutDetailDescriptionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailDescriptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailDescriptionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "workout_arrow_right_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_arrow_right_ic' is used in nib 'WorkoutDetailDescriptionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WorkoutDetailHeaderCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutDetailHeaderCell"
      let name = "WorkoutDetailHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailHeaderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_workout_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_workout_gradient_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "temp_workout_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_workout_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_back_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_clock_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_clock_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_fire_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_fire_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_flash_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailMuscleController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WorkoutDetailMuscleController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'WorkoutDetailMuscleController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'WorkoutDetailMuscleController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailMuscleСell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutDetailMuscleСell

      let bundle = R.hostingBundle
      let identifier = "WorkoutDetailMuscleСell"
      let name = "WorkoutDetailMuscleСell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailMuscleСell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailMuscleСell
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutDetailSectionCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutDetailSectionCell"
      let name = "WorkoutDetailSectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailSectionCell
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailTrainCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WorkoutDetailTrainCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutDetailTrainCell"
      let name = "WorkoutDetailTrainCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailTrainCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailTrainCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_activity_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_activity_ic' is used in nib 'WorkoutDetailTrainCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "temp_workout_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_workout_ic' is used in nib 'WorkoutDetailTrainCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutExercisesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutExercisesCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutExercisesCell"
      let name = "WorkoutExercisesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutExercisesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutExercisesCell
      }

      fileprivate init() {}
    }

    struct _WorkoutExercisesDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WorkoutExercisesDetailCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutExercisesDetailCell"
      let name = "WorkoutExercisesDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutExercisesDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutExercisesDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_big_sport_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_big_sport_ic' is used in nib 'WorkoutExercisesDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_blocked_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_blocked_ic' is used in nib 'WorkoutExercisesDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutSpecialCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutSpecialCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutSpecialCell"
      let name = "WorkoutSpecialCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutSpecialCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutSpecialCell
      }

      fileprivate init() {}
    }

    struct _WorkoutSpecialDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WorkoutSpecialDetailCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutSpecialDetailCell"
      let name = "WorkoutSpecialDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutSpecialDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutSpecialDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_big_sport_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_big_sport_ic' is used in nib 'WorkoutSpecialDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WriteToUsController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WriteToUsController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'WriteToUsController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'WriteToUsController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "start_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_back_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_gradient_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_login_button_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_login_button_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_logo_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_logo_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
