//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `chartPurple`.
    static let chartPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "chartPurple")
    /// Color `grayText`.
    static let grayText = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayText")
    /// Color `grayVw`.
    static let grayVw = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayVw")
    /// Color `greyAwards`.
    static let greyAwards = Rswift.ColorResource(bundle: R.hostingBundle, name: "greyAwards")
    /// Color `intensivePurple`.
    static let intensivePurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "intensivePurple")
    /// Color `lightGrayText`.
    static let lightGrayText = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightGrayText")
    /// Color `pinkTarget`.
    static let pinkTarget = Rswift.ColorResource(bundle: R.hostingBundle, name: "pinkTarget")
    /// Color `profileCellBack`.
    static let profileCellBack = Rswift.ColorResource(bundle: R.hostingBundle, name: "profileCellBack")
    /// Color `textTitleBlack`.
    static let textTitleBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "textTitleBlack")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "chartPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func chartPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.chartPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayVw", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayVw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayVw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "greyAwards", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greyAwards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greyAwards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "intensivePurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func intensivePurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.intensivePurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightGrayText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrayText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrayText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pinkTarget", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pinkTarget(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pinkTarget, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "profileCellBack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profileCellBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profileCellBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textTitleBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textTitleBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textTitleBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "chartPurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func chartPurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.chartPurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayVw", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayVw(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayVw.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "greyAwards", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func greyAwards(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.greyAwards.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "intensivePurple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func intensivePurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.intensivePurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lightGrayText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGrayText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGrayText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "pinkTarget", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func pinkTarget(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.pinkTarget.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "profileCellBack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func profileCellBack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.profileCellBack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textTitleBlack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textTitleBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textTitleBlack.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 46 files.
  struct file {
    /// Resource file `AddProductToMeal.graphql`.
    static let addProductToMealGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "AddProductToMeal", pathExtension: "graphql")
    /// Resource file `AskQuestion.graphql`.
    static let askQuestionGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "AskQuestion", pathExtension: "graphql")
    /// Resource file `CaloriesWidget.graphql`.
    static let caloriesWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "CaloriesWidget", pathExtension: "graphql")
    /// Resource file `ChooseWorkoutWidgetModel.graphql`.
    static let chooseWorkoutWidgetModelGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ChooseWorkoutWidgetModel", pathExtension: "graphql")
    /// Resource file `DrinkWater.graphql`.
    static let drinkWaterGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DrinkWater", pathExtension: "graphql")
    /// Resource file `DrinkWidget.graphql`.
    static let drinkWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DrinkWidget", pathExtension: "graphql")
    /// Resource file `FoodGroups.graphql`.
    static let foodGroupsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "FoodGroups", pathExtension: "graphql")
    /// Resource file `Inter-Black.ttf`.
    static let interBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Black", pathExtension: "ttf")
    /// Resource file `Inter-Bold.ttf`.
    static let interBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Bold", pathExtension: "ttf")
    /// Resource file `Inter-ExtraBold.ttf`.
    static let interExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-ExtraBold", pathExtension: "ttf")
    /// Resource file `Inter-ExtraLight.ttf`.
    static let interExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-ExtraLight", pathExtension: "ttf")
    /// Resource file `Inter-Light.ttf`.
    static let interLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Light", pathExtension: "ttf")
    /// Resource file `Inter-Medium.ttf`.
    static let interMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Medium", pathExtension: "ttf")
    /// Resource file `Inter-Regular.ttf`.
    static let interRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Regular", pathExtension: "ttf")
    /// Resource file `Inter-SemiBold.ttf`.
    static let interSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-SemiBold", pathExtension: "ttf")
    /// Resource file `Inter-Thin.ttf`.
    static let interThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Thin", pathExtension: "ttf")
    /// Resource file `Login.graphql`.
    static let loginGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Login", pathExtension: "graphql")
    /// Resource file `Me.graphql`.
    static let meGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Me", pathExtension: "graphql")
    /// Resource file `MealsWidget.graphql`.
    static let mealsWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "MealsWidget", pathExtension: "graphql")
    /// Resource file `MoodWidget.graphql`.
    static let moodWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "MoodWidget", pathExtension: "graphql")
    /// Resource file `Moods.graphql`.
    static let moodsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Moods", pathExtension: "graphql")
    /// Resource file `Muscles.graphql`.
    static let musclesGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Muscles", pathExtension: "graphql")
    /// Resource file `PasswordForgotRequest.graphql`.
    static let passwordForgotRequestGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "PasswordForgotRequest", pathExtension: "graphql")
    /// Resource file `Products.graphql`.
    static let productsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Products", pathExtension: "graphql")
    /// Resource file `ProductsByMeal.graphql`.
    static let productsByMealGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ProductsByMeal", pathExtension: "graphql")
    /// Resource file `ProfileUpdate.graphql`.
    static let profileUpdateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ProfileUpdate", pathExtension: "graphql")
    /// Resource file `Progresses.graphql`.
    static let progressesGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Progresses", pathExtension: "graphql")
    /// Resource file `Rank.graphql`.
    static let rankGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Rank", pathExtension: "graphql")
    /// Resource file `RecentProducts.graphql`.
    static let recentProductsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "RecentProducts", pathExtension: "graphql")
    /// Resource file `RecommendProducts.graphql`.
    static let recommendProductsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "RecommendProducts", pathExtension: "graphql")
    /// Resource file `RecommendWorkouts.graphql`.
    static let recommendWorkoutsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "RecommendWorkouts", pathExtension: "graphql")
    /// Resource file `RemoveProductFromMeal.graphql`.
    static let removeProductFromMealGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "RemoveProductFromMeal", pathExtension: "graphql")
    /// Resource file `SaveMood.graphql`.
    static let saveMoodGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SaveMood", pathExtension: "graphql")
    /// Resource file `SaveSleepQuality.graphql`.
    static let saveSleepQualityGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SaveSleepQuality", pathExtension: "graphql")
    /// Resource file `SaveWeightWidget.graphql`.
    static let saveWeightWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SaveWeightWidget", pathExtension: "graphql")
    /// Resource file `SleepWidget.graphql`.
    static let sleepWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SleepWidget", pathExtension: "graphql")
    /// Resource file `SourcesByMeal.graphql`.
    static let sourcesByMealGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SourcesByMeal", pathExtension: "graphql")
    /// Resource file `ToggleMuscleInWorkouts.graphql`.
    static let toggleMuscleInWorkoutsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ToggleMuscleInWorkouts", pathExtension: "graphql")
    /// Resource file `ToggleProductInRation.graphql`.
    static let toggleProductInRationGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ToggleProductInRation", pathExtension: "graphql")
    /// Resource file `UpdateProductInMeal.graphql`.
    static let updateProductInMealGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "UpdateProductInMeal", pathExtension: "graphql")
    /// Resource file `WeightsWidget.graphql`.
    static let weightsWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "WeightsWidget", pathExtension: "graphql")
    /// Resource file `WorkoutById.graphql`.
    static let workoutByIdGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkoutById", pathExtension: "graphql")
    /// Resource file `WorkoutTypes.graphql`.
    static let workoutTypesGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkoutTypes", pathExtension: "graphql")
    /// Resource file `Workouts.graphql`.
    static let workoutsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Workouts", pathExtension: "graphql")
    /// Resource file `WorkoutsWidget.graphql`.
    static let workoutsWidgetGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "WorkoutsWidget", pathExtension: "graphql")
    /// Resource file `progress.graphql`.
    static let progressGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "progress", pathExtension: "graphql")

    /// `bundle.url(forResource: "AddProductToMeal", withExtension: "graphql")`
    static func addProductToMealGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.addProductToMealGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AskQuestion", withExtension: "graphql")`
    static func askQuestionGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.askQuestionGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CaloriesWidget", withExtension: "graphql")`
    static func caloriesWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.caloriesWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ChooseWorkoutWidgetModel", withExtension: "graphql")`
    static func chooseWorkoutWidgetModelGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.chooseWorkoutWidgetModelGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DrinkWater", withExtension: "graphql")`
    static func drinkWaterGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.drinkWaterGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DrinkWidget", withExtension: "graphql")`
    static func drinkWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.drinkWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FoodGroups", withExtension: "graphql")`
    static func foodGroupsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.foodGroupsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Black", withExtension: "ttf")`
    static func interBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Bold", withExtension: "ttf")`
    static func interBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-ExtraBold", withExtension: "ttf")`
    static func interExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-ExtraLight", withExtension: "ttf")`
    static func interExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Light", withExtension: "ttf")`
    static func interLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Medium", withExtension: "ttf")`
    static func interMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Regular", withExtension: "ttf")`
    static func interRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-SemiBold", withExtension: "ttf")`
    static func interSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Thin", withExtension: "ttf")`
    static func interThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Login", withExtension: "graphql")`
    static func loginGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loginGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Me", withExtension: "graphql")`
    static func meGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.meGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MealsWidget", withExtension: "graphql")`
    static func mealsWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mealsWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MoodWidget", withExtension: "graphql")`
    static func moodWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.moodWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Moods", withExtension: "graphql")`
    static func moodsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.moodsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Muscles", withExtension: "graphql")`
    static func musclesGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.musclesGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PasswordForgotRequest", withExtension: "graphql")`
    static func passwordForgotRequestGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.passwordForgotRequestGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Products", withExtension: "graphql")`
    static func productsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.productsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ProductsByMeal", withExtension: "graphql")`
    static func productsByMealGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.productsByMealGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ProfileUpdate", withExtension: "graphql")`
    static func profileUpdateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.profileUpdateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Progresses", withExtension: "graphql")`
    static func progressesGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.progressesGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rank", withExtension: "graphql")`
    static func rankGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rankGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RecentProducts", withExtension: "graphql")`
    static func recentProductsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recentProductsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RecommendProducts", withExtension: "graphql")`
    static func recommendProductsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recommendProductsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RecommendWorkouts", withExtension: "graphql")`
    static func recommendWorkoutsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recommendWorkoutsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RemoveProductFromMeal", withExtension: "graphql")`
    static func removeProductFromMealGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.removeProductFromMealGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SaveMood", withExtension: "graphql")`
    static func saveMoodGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.saveMoodGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SaveSleepQuality", withExtension: "graphql")`
    static func saveSleepQualityGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.saveSleepQualityGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SaveWeightWidget", withExtension: "graphql")`
    static func saveWeightWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.saveWeightWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SleepWidget", withExtension: "graphql")`
    static func sleepWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sleepWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SourcesByMeal", withExtension: "graphql")`
    static func sourcesByMealGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourcesByMealGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToggleMuscleInWorkouts", withExtension: "graphql")`
    static func toggleMuscleInWorkoutsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toggleMuscleInWorkoutsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToggleProductInRation", withExtension: "graphql")`
    static func toggleProductInRationGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toggleProductInRationGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "UpdateProductInMeal", withExtension: "graphql")`
    static func updateProductInMealGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.updateProductInMealGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WeightsWidget", withExtension: "graphql")`
    static func weightsWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.weightsWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WorkoutById", withExtension: "graphql")`
    static func workoutByIdGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workoutByIdGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WorkoutTypes", withExtension: "graphql")`
    static func workoutTypesGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workoutTypesGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Workouts", withExtension: "graphql")`
    static func workoutsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workoutsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WorkoutsWidget", withExtension: "graphql")`
    static func workoutsWidgetGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workoutsWidgetGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "progress", withExtension: "graphql")`
    static func progressGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.progressGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 9 fonts.
  struct font: Rswift.Validatable {
    /// Font `Inter-Black`.
    static let interBlack = Rswift.FontResource(fontName: "Inter-Black")
    /// Font `Inter-Bold`.
    static let interBold = Rswift.FontResource(fontName: "Inter-Bold")
    /// Font `Inter-ExtraBold`.
    static let interExtraBold = Rswift.FontResource(fontName: "Inter-ExtraBold")
    /// Font `Inter-ExtraLight`.
    static let interExtraLight = Rswift.FontResource(fontName: "Inter-ExtraLight")
    /// Font `Inter-Light`.
    static let interLight = Rswift.FontResource(fontName: "Inter-Light")
    /// Font `Inter-Medium`.
    static let interMedium = Rswift.FontResource(fontName: "Inter-Medium")
    /// Font `Inter-Regular`.
    static let interRegular = Rswift.FontResource(fontName: "Inter-Regular")
    /// Font `Inter-SemiBold`.
    static let interSemiBold = Rswift.FontResource(fontName: "Inter-SemiBold")
    /// Font `Inter-Thin`.
    static let interThin = Rswift.FontResource(fontName: "Inter-Thin")

    /// `UIFont(name: "Inter-Black", size: ...)`
    static func interBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBlack, size: size)
    }

    /// `UIFont(name: "Inter-Bold", size: ...)`
    static func interBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBold, size: size)
    }

    /// `UIFont(name: "Inter-ExtraBold", size: ...)`
    static func interExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interExtraBold, size: size)
    }

    /// `UIFont(name: "Inter-ExtraLight", size: ...)`
    static func interExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interExtraLight, size: size)
    }

    /// `UIFont(name: "Inter-Light", size: ...)`
    static func interLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interLight, size: size)
    }

    /// `UIFont(name: "Inter-Medium", size: ...)`
    static func interMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interMedium, size: size)
    }

    /// `UIFont(name: "Inter-Regular", size: ...)`
    static func interRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interRegular, size: size)
    }

    /// `UIFont(name: "Inter-SemiBold", size: ...)`
    static func interSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interSemiBold, size: size)
    }

    /// `UIFont(name: "Inter-Thin", size: ...)`
    static func interThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interThin, size: size)
    }

    static func validate() throws {
      if R.font.interBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Black' could not be loaded, is 'Inter-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Bold' could not be loaded, is 'Inter-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-ExtraBold' could not be loaded, is 'Inter-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-ExtraLight' could not be loaded, is 'Inter-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Light' could not be loaded, is 'Inter-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Medium' could not be loaded, is 'Inter-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Regular' could not be loaded, is 'Inter-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-SemiBold' could not be loaded, is 'Inter-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Thin' could not be loaded, is 'Inter-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 70 images.
  struct image {
    /// Image `MoodChartBack`.
    static let moodChartBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoodChartBack")
    /// Image `auth_note_see_pass_ic`.
    static let auth_note_see_pass_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "auth_note_see_pass_ic")
    /// Image `auth_see_pass_ic`.
    static let auth_see_pass_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "auth_see_pass_ic")
    /// Image `ballAward`.
    static let ballAward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ballAward")
    /// Image `dummyAward`.
    static let dummyAward = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummyAward")
    /// Image `dummyFace`.
    static let dummyFace = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummyFace")
    /// Image `energy_arrow_back_ic`.
    static let energy_arrow_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_arrow_back_ic")
    /// Image `energy_arrow_forward_ic`.
    static let energy_arrow_forward_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_arrow_forward_ic")
    /// Image `energy_coins_ic`.
    static let energy_coins_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_coins_ic")
    /// Image `energy_energy_ic`.
    static let energy_energy_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_energy_ic")
    /// Image `energy_meals_add_ic`.
    static let energy_meals_add_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_meals_add_ic")
    /// Image `energy_mood_badly_ic`.
    static let energy_mood_badly_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_mood_badly_ic")
    /// Image `energy_mood_good_ic`.
    static let energy_mood_good_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_mood_good_ic")
    /// Image `energy_mood_not_bad_ic`.
    static let energy_mood_not_bad_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_mood_not_bad_ic")
    /// Image `energy_today_pin_ic`.
    static let energy_today_pin_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_today_pin_ic")
    /// Image `energy_water_active_ic`.
    static let energy_water_active_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_water_active_ic")
    /// Image `energy_water_empty_ic`.
    static let energy_water_empty_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_water_empty_ic")
    /// Image `energy_water_flash_ic`.
    static let energy_water_flash_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_water_flash_ic")
    /// Image `energy_weight_selected_ic`.
    static let energy_weight_selected_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "energy_weight_selected_ic")
    /// Image `food_arrow_down_ic`.
    static let food_arrow_down_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_arrow_down_ic")
    /// Image `food_clear_search_ic`.
    static let food_clear_search_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_clear_search_ic")
    /// Image `food_search_ic`.
    static let food_search_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_search_ic")
    /// Image `menu_arrow_right_ic`.
    static let menu_arrow_right_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_arrow_right_ic")
    /// Image `menu_flag_ic`.
    static let menu_flag_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_flag_ic")
    /// Image `militaryAward`.
    static let militaryAward = Rswift.ImageResource(bundle: R.hostingBundle, name: "militaryAward")
    /// Image `onboarding_back_ic`.
    static let onboarding_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_back_ic")
    /// Image `onboarding_background_ic`.
    static let onboarding_background_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_background_ic")
    /// Image `onboarding_food_classic_ic`.
    static let onboarding_food_classic_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_classic_ic")
    /// Image `onboarding_food_keto_ic`.
    static let onboarding_food_keto_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_keto_ic")
    /// Image `onboarding_food_pesca_ic`.
    static let onboarding_food_pesca_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_pesca_ic")
    /// Image `onboarding_food_vegan_ic`.
    static let onboarding_food_vegan_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_vegan_ic")
    /// Image `onboarding_food_vegetarian_ic`.
    static let onboarding_food_vegetarian_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_vegetarian_ic")
    /// Image `onboarding_gender_man_ic`.
    static let onboarding_gender_man_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_gender_man_ic")
    /// Image `onboarding_gender_women_ic`.
    static let onboarding_gender_women_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_gender_women_ic")
    /// Image `onboarding_selected_ic`.
    static let onboarding_selected_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_selected_ic")
    /// Image `onboarding_sport_newbie_ic`.
    static let onboarding_sport_newbie_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_newbie_ic")
    /// Image `onboarding_sport_not_all_ic`.
    static let onboarding_sport_not_all_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_not_all_ic")
    /// Image `onboarding_sport_professional_ic`.
    static let onboarding_sport_professional_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_professional_ic")
    /// Image `onboarding_sport_regulary_ic`.
    static let onboarding_sport_regulary_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_regulary_ic")
    /// Image `onboarding_target_flag_ic`.
    static let onboarding_target_flag_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_target_flag_ic")
    /// Image `placeholder_big_sport_ic`.
    static let placeholder_big_sport_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_big_sport_ic")
    /// Image `placeholder_big_sport_two_ic`.
    static let placeholder_big_sport_two_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_big_sport_two_ic")
    /// Image `placeholder_food_ic`.
    static let placeholder_food_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_food_ic")
    /// Image `placeholder_food_two_ic`.
    static let placeholder_food_two_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_food_two_ic")
    /// Image `progress_back_ic`.
    static let progress_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "progress_back_ic")
    /// Image `progress_cube_ic`.
    static let progress_cube_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "progress_cube_ic")
    /// Image `progress_forward_ic`.
    static let progress_forward_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "progress_forward_ic")
    /// Image `sportsAward`.
    static let sportsAward = Rswift.ImageResource(bundle: R.hostingBundle, name: "sportsAward")
    /// Image `start_back_ic`.
    static let start_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_back_ic")
    /// Image `start_gradient_ic`.
    static let start_gradient_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_gradient_ic")
    /// Image `start_login_button_ic`.
    static let start_login_button_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_login_button_ic")
    /// Image `start_logo_ic`.
    static let start_logo_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_logo_ic")
    /// Image `tab_bar_energy_ic`.
    static let tab_bar_energy_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_energy_ic")
    /// Image `tab_bar_fun_ic`.
    static let tab_bar_fun_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_fun_ic")
    /// Image `tab_bar_menu_ic`.
    static let tab_bar_menu_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_menu_ic")
    /// Image `tab_bar_profile_ic`.
    static let tab_bar_profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_profile_ic")
    /// Image `tab_bar_workout_ic`.
    static let tab_bar_workout_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_workout_ic")
    /// Image `temp_activity_ic`.
    static let temp_activity_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_activity_ic")
    /// Image `temp_workout_gradient_ic`.
    static let temp_workout_gradient_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_workout_gradient_ic")
    /// Image `temp_workout_ic`.
    static let temp_workout_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_workout_ic")
    /// Image `top_view_coin_ic`.
    static let top_view_coin_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_view_coin_ic")
    /// Image `top_view_elipse_ic`.
    static let top_view_elipse_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_view_elipse_ic")
    /// Image `top_view_flash_ic`.
    static let top_view_flash_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_view_flash_ic")
    /// Image `workout_activities_ic`.
    static let workout_activities_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_activities_ic")
    /// Image `workout_arrow_right_ic`.
    static let workout_arrow_right_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_arrow_right_ic")
    /// Image `workout_back_ic`.
    static let workout_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_back_ic")
    /// Image `workout_blocked_ic`.
    static let workout_blocked_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_blocked_ic")
    /// Image `workout_clock_ic`.
    static let workout_clock_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_clock_ic")
    /// Image `workout_fire_ic`.
    static let workout_fire_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_fire_ic")
    /// Image `workout_flash_ic`.
    static let workout_flash_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "workout_flash_ic")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoodChartBack", bundle: ..., traitCollection: ...)`
    static func moodChartBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moodChartBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auth_note_see_pass_ic", bundle: ..., traitCollection: ...)`
    static func auth_note_see_pass_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auth_note_see_pass_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auth_see_pass_ic", bundle: ..., traitCollection: ...)`
    static func auth_see_pass_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auth_see_pass_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ballAward", bundle: ..., traitCollection: ...)`
    static func ballAward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ballAward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummyAward", bundle: ..., traitCollection: ...)`
    static func dummyAward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummyAward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummyFace", bundle: ..., traitCollection: ...)`
    static func dummyFace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummyFace, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_arrow_back_ic", bundle: ..., traitCollection: ...)`
    static func energy_arrow_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_arrow_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_arrow_forward_ic", bundle: ..., traitCollection: ...)`
    static func energy_arrow_forward_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_arrow_forward_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_coins_ic", bundle: ..., traitCollection: ...)`
    static func energy_coins_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_coins_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_energy_ic", bundle: ..., traitCollection: ...)`
    static func energy_energy_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_energy_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_meals_add_ic", bundle: ..., traitCollection: ...)`
    static func energy_meals_add_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_meals_add_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_mood_badly_ic", bundle: ..., traitCollection: ...)`
    static func energy_mood_badly_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_mood_badly_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_mood_good_ic", bundle: ..., traitCollection: ...)`
    static func energy_mood_good_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_mood_good_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_mood_not_bad_ic", bundle: ..., traitCollection: ...)`
    static func energy_mood_not_bad_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_mood_not_bad_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_today_pin_ic", bundle: ..., traitCollection: ...)`
    static func energy_today_pin_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_today_pin_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_water_active_ic", bundle: ..., traitCollection: ...)`
    static func energy_water_active_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_water_active_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_water_empty_ic", bundle: ..., traitCollection: ...)`
    static func energy_water_empty_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_water_empty_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_water_flash_ic", bundle: ..., traitCollection: ...)`
    static func energy_water_flash_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_water_flash_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "energy_weight_selected_ic", bundle: ..., traitCollection: ...)`
    static func energy_weight_selected_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.energy_weight_selected_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_arrow_down_ic", bundle: ..., traitCollection: ...)`
    static func food_arrow_down_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_arrow_down_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_clear_search_ic", bundle: ..., traitCollection: ...)`
    static func food_clear_search_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_clear_search_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_search_ic", bundle: ..., traitCollection: ...)`
    static func food_search_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_search_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_arrow_right_ic", bundle: ..., traitCollection: ...)`
    static func menu_arrow_right_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_arrow_right_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_flag_ic", bundle: ..., traitCollection: ...)`
    static func menu_flag_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_flag_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "militaryAward", bundle: ..., traitCollection: ...)`
    static func militaryAward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.militaryAward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_back_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_background_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_background_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_background_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_classic_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_classic_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_classic_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_keto_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_keto_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_keto_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_pesca_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_pesca_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_pesca_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_vegan_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_vegan_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_vegan_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_vegetarian_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_vegetarian_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_vegetarian_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_gender_man_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_gender_man_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_gender_man_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_gender_women_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_gender_women_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_gender_women_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_selected_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_selected_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_selected_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_newbie_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_newbie_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_newbie_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_not_all_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_not_all_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_not_all_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_professional_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_professional_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_professional_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_regulary_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_regulary_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_regulary_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_target_flag_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_target_flag_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_target_flag_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_big_sport_ic", bundle: ..., traitCollection: ...)`
    static func placeholder_big_sport_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_big_sport_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_big_sport_two_ic", bundle: ..., traitCollection: ...)`
    static func placeholder_big_sport_two_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_big_sport_two_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_food_ic", bundle: ..., traitCollection: ...)`
    static func placeholder_food_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_food_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_food_two_ic", bundle: ..., traitCollection: ...)`
    static func placeholder_food_two_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_food_two_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "progress_back_ic", bundle: ..., traitCollection: ...)`
    static func progress_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.progress_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "progress_cube_ic", bundle: ..., traitCollection: ...)`
    static func progress_cube_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.progress_cube_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "progress_forward_ic", bundle: ..., traitCollection: ...)`
    static func progress_forward_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.progress_forward_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sportsAward", bundle: ..., traitCollection: ...)`
    static func sportsAward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sportsAward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_back_ic", bundle: ..., traitCollection: ...)`
    static func start_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_gradient_ic", bundle: ..., traitCollection: ...)`
    static func start_gradient_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_gradient_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_login_button_ic", bundle: ..., traitCollection: ...)`
    static func start_login_button_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_login_button_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_logo_ic", bundle: ..., traitCollection: ...)`
    static func start_logo_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_logo_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_energy_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_energy_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_energy_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_fun_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_fun_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_fun_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_menu_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_menu_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_menu_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_profile_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_workout_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_workout_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_workout_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_activity_ic", bundle: ..., traitCollection: ...)`
    static func temp_activity_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_activity_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_workout_gradient_ic", bundle: ..., traitCollection: ...)`
    static func temp_workout_gradient_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_workout_gradient_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_workout_ic", bundle: ..., traitCollection: ...)`
    static func temp_workout_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_workout_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top_view_coin_ic", bundle: ..., traitCollection: ...)`
    static func top_view_coin_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_view_coin_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top_view_elipse_ic", bundle: ..., traitCollection: ...)`
    static func top_view_elipse_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_view_elipse_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top_view_flash_ic", bundle: ..., traitCollection: ...)`
    static func top_view_flash_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_view_flash_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_activities_ic", bundle: ..., traitCollection: ...)`
    static func workout_activities_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_activities_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_arrow_right_ic", bundle: ..., traitCollection: ...)`
    static func workout_arrow_right_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_arrow_right_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_back_ic", bundle: ..., traitCollection: ...)`
    static func workout_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_blocked_ic", bundle: ..., traitCollection: ...)`
    static func workout_blocked_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_blocked_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_clock_ic", bundle: ..., traitCollection: ...)`
    static func workout_clock_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_clock_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_fire_ic", bundle: ..., traitCollection: ...)`
    static func workout_fire_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_fire_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "workout_flash_ic", bundle: ..., traitCollection: ...)`
    static func workout_flash_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.workout_flash_ic, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 71 nibs.
  struct nib {
    /// Nib `AwardsTableCell`.
    static let awardsTableCell = _R.nib._AwardsTableCell()
    /// Nib `ChartCollectionCell`.
    static let chartCollectionCell = _R.nib._ChartCollectionCell()
    /// Nib `ChartTableCell`.
    static let chartTableCell = _R.nib._ChartTableCell()
    /// Nib `EnerdyTodayCell`.
    static let enerdyTodayCell = _R.nib._EnerdyTodayCell()
    /// Nib `EnergyAddActivityCell`.
    static let energyAddActivityCell = _R.nib._EnergyAddActivityCell()
    /// Nib `EnergyChooseActivityCell`.
    static let energyChooseActivityCell = _R.nib._EnergyChooseActivityCell()
    /// Nib `EnergyChooseActivityCollectionCell`.
    static let energyChooseActivityCollectionCell = _R.nib._EnergyChooseActivityCollectionCell()
    /// Nib `EnergyController`.
    static let energyController = _R.nib._EnergyController()
    /// Nib `EnergyDrinkWaterCell`.
    static let energyDrinkWaterCell = _R.nib._EnergyDrinkWaterCell()
    /// Nib `EnergyMealsCell`.
    static let energyMealsCell = _R.nib._EnergyMealsCell()
    /// Nib `EnergyMoodCell`.
    static let energyMoodCell = _R.nib._EnergyMoodCell()
    /// Nib `EnergyProgressController`.
    static let energyProgressController = _R.nib._EnergyProgressController()
    /// Nib `EnergySleepCell`.
    static let energySleepCell = _R.nib._EnergySleepCell()
    /// Nib `EnergyTrainingCell`.
    static let energyTrainingCell = _R.nib._EnergyTrainingCell()
    /// Nib `EnergyUpdateWeightController`.
    static let energyUpdateWeightController = _R.nib._EnergyUpdateWeightController()
    /// Nib `EnergyWeightCell`.
    static let energyWeightCell = _R.nib._EnergyWeightCell()
    /// Nib `FoodAddController`.
    static let foodAddController = _R.nib._FoodAddController()
    /// Nib `FoodController`.
    static let foodController = _R.nib._FoodController()
    /// Nib `FoodRecomendedCell`.
    static let foodRecomendedCell = _R.nib._FoodRecomendedCell()
    /// Nib `FoodTopTitleCell`.
    static let foodTopTitleCell = _R.nib._FoodTopTitleCell()
    /// Nib `LoginController`.
    static let loginController = _R.nib._LoginController()
    /// Nib `MainTabBarController`.
    static let mainTabBarController = _R.nib._MainTabBarController()
    /// Nib `MenuAgeController`.
    static let menuAgeController = _R.nib._MenuAgeController()
    /// Nib `MenuCell`.
    static let menuCell = _R.nib._MenuCell()
    /// Nib `MenuController`.
    static let menuController = _R.nib._MenuController()
    /// Nib `MenuEmailController`.
    static let menuEmailController = _R.nib._MenuEmailController()
    /// Nib `MenuFitnessController`.
    static let menuFitnessController = _R.nib._MenuFitnessController()
    /// Nib `MenuFoodController`.
    static let menuFoodController = _R.nib._MenuFoodController()
    /// Nib `MenuFoodSwitchCell`.
    static let menuFoodSwitchCell = _R.nib._MenuFoodSwitchCell()
    /// Nib `MenuFoodTitleCellCell`.
    static let menuFoodTitleCellCell = _R.nib._MenuFoodTitleCellCell()
    /// Nib `MenuHeightController`.
    static let menuHeightController = _R.nib._MenuHeightController()
    /// Nib `MenuLanguageController`.
    static let menuLanguageController = _R.nib._MenuLanguageController()
    /// Nib `MenuLanguagesTitleCell`.
    static let menuLanguagesTitleCell = _R.nib._MenuLanguagesTitleCell()
    /// Nib `MenuNameController`.
    static let menuNameController = _R.nib._MenuNameController()
    /// Nib `MenuTargetWeightController`.
    static let menuTargetWeightController = _R.nib._MenuTargetWeightController()
    /// Nib `MenuWeightController`.
    static let menuWeightController = _R.nib._MenuWeightController()
    /// Nib `MenuWriteQuestionController`.
    static let menuWriteQuestionController = _R.nib._MenuWriteQuestionController()
    /// Nib `MoodTableCell`.
    static let moodTableCell = _R.nib._MoodTableCell()
    /// Nib `PositionTableCell`.
    static let positionTableCell = _R.nib._PositionTableCell()
    /// Nib `ProfileController`.
    static let profileController = _R.nib._ProfileController()
    /// Nib `ProgressCell`.
    static let progressCell = _R.nib._ProgressCell()
    /// Nib `QuizeAgeController`.
    static let quizeAgeController = _R.nib._QuizeAgeController()
    /// Nib `QuizeEmailController`.
    static let quizeEmailController = _R.nib._QuizeEmailController()
    /// Nib `QuizeFoodCell`.
    static let quizeFoodCell = _R.nib._QuizeFoodCell()
    /// Nib `QuizeFoodController`.
    static let quizeFoodController = _R.nib._QuizeFoodController()
    /// Nib `QuizeGenderController`.
    static let quizeGenderController = _R.nib._QuizeGenderController()
    /// Nib `QuizeGoalController`.
    static let quizeGoalController = _R.nib._QuizeGoalController()
    /// Nib `QuizeHeightController`.
    static let quizeHeightController = _R.nib._QuizeHeightController()
    /// Nib `QuizeNameController`.
    static let quizeNameController = _R.nib._QuizeNameController()
    /// Nib `QuizeProgressController`.
    static let quizeProgressController = _R.nib._QuizeProgressController()
    /// Nib `QuizeSportController`.
    static let quizeSportController = _R.nib._QuizeSportController()
    /// Nib `QuizeTargetWeightController`.
    static let quizeTargetWeightController = _R.nib._QuizeTargetWeightController()
    /// Nib `QuizeWeightController`.
    static let quizeWeightController = _R.nib._QuizeWeightController()
    /// Nib `SplashViewController`.
    static let splashViewController = _R.nib._SplashViewController()
    /// Nib `StartController`.
    static let startController = _R.nib._StartController()
    /// Nib `WeightTableCell`.
    static let weightTableCell = _R.nib._WeightTableCell()
    /// Nib `WorkoutActivitiesCell`.
    static let workoutActivitiesCell = _R.nib._WorkoutActivitiesCell()
    /// Nib `WorkoutActivityCollectionCell`.
    static let workoutActivityCollectionCell = _R.nib._WorkoutActivityCollectionCell()
    /// Nib `WorkoutController`.
    static let workoutController = _R.nib._WorkoutController()
    /// Nib `WorkoutDetailController`.
    static let workoutDetailController = _R.nib._WorkoutDetailController()
    /// Nib `WorkoutDetailDescriptionCell`.
    static let workoutDetailDescriptionCell = _R.nib._WorkoutDetailDescriptionCell()
    /// Nib `WorkoutDetailHeaderCell`.
    static let workoutDetailHeaderCell = _R.nib._WorkoutDetailHeaderCell()
    /// Nib `WorkoutDetailMuscleController`.
    static let workoutDetailMuscleController = _R.nib._WorkoutDetailMuscleController()
    /// Nib `WorkoutDetailMuscleСell`.
    static let workoutDetailMuscleСell = _R.nib._WorkoutDetailMuscleСell()
    /// Nib `WorkoutDetailSectionCell`.
    static let workoutDetailSectionCell = _R.nib._WorkoutDetailSectionCell()
    /// Nib `WorkoutDetailTrainCell`.
    static let workoutDetailTrainCell = _R.nib._WorkoutDetailTrainCell()
    /// Nib `WorkoutExercisesCell`.
    static let workoutExercisesCell = _R.nib._WorkoutExercisesCell()
    /// Nib `WorkoutExercisesDetailCell`.
    static let workoutExercisesDetailCell = _R.nib._WorkoutExercisesDetailCell()
    /// Nib `WorkoutSpecialCell`.
    static let workoutSpecialCell = _R.nib._WorkoutSpecialCell()
    /// Nib `WorkoutSpecialDetailCell`.
    static let workoutSpecialDetailCell = _R.nib._WorkoutSpecialDetailCell()
    /// Nib `WriteToUsController`.
    static let writeToUsController = _R.nib._WriteToUsController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AwardsTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.awardsTableCell) instead")
    static func awardsTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.awardsTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChartCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chartCollectionCell) instead")
    static func chartCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chartCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChartTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chartTableCell) instead")
    static func chartTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chartTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnerdyTodayCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.enerdyTodayCell) instead")
    static func enerdyTodayCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.enerdyTodayCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyAddActivityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyAddActivityCell) instead")
    static func energyAddActivityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyAddActivityCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyChooseActivityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyChooseActivityCell) instead")
    static func energyChooseActivityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyChooseActivityCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyChooseActivityCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyChooseActivityCollectionCell) instead")
    static func energyChooseActivityCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyChooseActivityCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyController) instead")
    static func energyController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyDrinkWaterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyDrinkWaterCell) instead")
    static func energyDrinkWaterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyDrinkWaterCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyMealsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyMealsCell) instead")
    static func energyMealsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyMealsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyMoodCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyMoodCell) instead")
    static func energyMoodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyMoodCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyProgressController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyProgressController) instead")
    static func energyProgressController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyProgressController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergySleepCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energySleepCell) instead")
    static func energySleepCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energySleepCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyTrainingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyTrainingCell) instead")
    static func energyTrainingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyTrainingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyUpdateWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyUpdateWeightController) instead")
    static func energyUpdateWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyUpdateWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyWeightCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyWeightCell) instead")
    static func energyWeightCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyWeightCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FoodAddController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foodAddController) instead")
    static func foodAddController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foodAddController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FoodController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foodController) instead")
    static func foodController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foodController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FoodRecomendedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foodRecomendedCell) instead")
    static func foodRecomendedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foodRecomendedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FoodTopTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foodTopTitleCell) instead")
    static func foodTopTitleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foodTopTitleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginController) instead")
    static func loginController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MainTabBarController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainTabBarController) instead")
    static func mainTabBarController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainTabBarController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuAgeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuAgeController) instead")
    static func menuAgeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuAgeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuCell) instead")
    static func menuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuController) instead")
    static func menuController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuEmailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuEmailController) instead")
    static func menuEmailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuEmailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFitnessController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFitnessController) instead")
    static func menuFitnessController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFitnessController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFoodController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFoodController) instead")
    static func menuFoodController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFoodController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFoodSwitchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFoodSwitchCell) instead")
    static func menuFoodSwitchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFoodSwitchCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFoodTitleCellCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFoodTitleCellCell) instead")
    static func menuFoodTitleCellCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFoodTitleCellCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuHeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuHeightController) instead")
    static func menuHeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuHeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuLanguageController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuLanguageController) instead")
    static func menuLanguageController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuLanguageController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuLanguagesTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuLanguagesTitleCell) instead")
    static func menuLanguagesTitleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuLanguagesTitleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuNameController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuNameController) instead")
    static func menuNameController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuNameController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuTargetWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuTargetWeightController) instead")
    static func menuTargetWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuTargetWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuWeightController) instead")
    static func menuWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuWriteQuestionController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuWriteQuestionController) instead")
    static func menuWriteQuestionController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuWriteQuestionController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MoodTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moodTableCell) instead")
    static func moodTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moodTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PositionTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.positionTableCell) instead")
    static func positionTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.positionTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileController) instead")
    static func profileController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProgressCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.progressCell) instead")
    static func progressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.progressCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeAgeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeAgeController) instead")
    static func quizeAgeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeAgeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeEmailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeEmailController) instead")
    static func quizeEmailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeEmailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeFoodCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeFoodCell) instead")
    static func quizeFoodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeFoodCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeFoodController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeFoodController) instead")
    static func quizeFoodController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeFoodController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeGenderController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeGenderController) instead")
    static func quizeGenderController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeGenderController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeGoalController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeGoalController) instead")
    static func quizeGoalController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeGoalController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeHeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeHeightController) instead")
    static func quizeHeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeHeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeNameController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeNameController) instead")
    static func quizeNameController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeNameController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeProgressController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeProgressController) instead")
    static func quizeProgressController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeProgressController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeSportController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeSportController) instead")
    static func quizeSportController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeSportController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeTargetWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeTargetWeightController) instead")
    static func quizeTargetWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeTargetWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeWeightController) instead")
    static func quizeWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SplashViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.splashViewController) instead")
    static func splashViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splashViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StartController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.startController) instead")
    static func startController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.startController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeightTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weightTableCell) instead")
    static func weightTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weightTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutActivitiesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutActivitiesCell) instead")
    static func workoutActivitiesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutActivitiesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutActivityCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutActivityCollectionCell) instead")
    static func workoutActivityCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutActivityCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutController) instead")
    static func workoutController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailController) instead")
    static func workoutDetailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailDescriptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailDescriptionCell) instead")
    static func workoutDetailDescriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailDescriptionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailHeaderCell) instead")
    static func workoutDetailHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailMuscleController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailMuscleController) instead")
    static func workoutDetailMuscleController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailMuscleController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailMuscleСell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailMuscleСell) instead")
    static func workoutDetailMuscleСell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailMuscleСell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailSectionCell) instead")
    static func workoutDetailSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailSectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDetailTrainCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDetailTrainCell) instead")
    static func workoutDetailTrainCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDetailTrainCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutExercisesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutExercisesCell) instead")
    static func workoutExercisesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutExercisesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutExercisesDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutExercisesDetailCell) instead")
    static func workoutExercisesDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutExercisesDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutSpecialCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutSpecialCell) instead")
    static func workoutSpecialCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutSpecialCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutSpecialDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutSpecialDetailCell) instead")
    static func workoutSpecialDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutSpecialDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WriteToUsController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.writeToUsController) instead")
    static func writeToUsController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.writeToUsController)
    }
    #endif

    static func awardsTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PolicyCell? {
      return R.nib.awardsTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PolicyCell
    }

    static func chartCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChartCollectionCell? {
      return R.nib.chartCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChartCollectionCell
    }

    static func chartTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChartTableCell? {
      return R.nib.chartTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChartTableCell
    }

    static func enerdyTodayCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnerdyTodayCell? {
      return R.nib.enerdyTodayCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnerdyTodayCell
    }

    static func energyAddActivityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyAddActivityCell? {
      return R.nib.energyAddActivityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyAddActivityCell
    }

    static func energyChooseActivityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyChooseActivityCell? {
      return R.nib.energyChooseActivityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyChooseActivityCell
    }

    static func energyChooseActivityCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyChooseActivityCollectionCell? {
      return R.nib.energyChooseActivityCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyChooseActivityCollectionCell
    }

    static func energyController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.energyController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func energyDrinkWaterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyDrinkWaterCell? {
      return R.nib.energyDrinkWaterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyDrinkWaterCell
    }

    static func energyMealsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyMealsCell? {
      return R.nib.energyMealsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyMealsCell
    }

    static func energyMoodCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyMoodCell? {
      return R.nib.energyMoodCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyMoodCell
    }

    static func energyProgressController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.energyProgressController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func energySleepCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergySleepCell? {
      return R.nib.energySleepCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergySleepCell
    }

    static func energyTrainingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyTrainingCell? {
      return R.nib.energyTrainingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyTrainingCell
    }

    static func energyUpdateWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.energyUpdateWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func energyWeightCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyWeightCell? {
      return R.nib.energyWeightCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyWeightCell
    }

    static func foodAddController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.foodAddController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func foodController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.foodController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func foodRecomendedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodRecomendedCell? {
      return R.nib.foodRecomendedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodRecomendedCell
    }

    static func foodTopTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodTopTitleCell? {
      return R.nib.foodTopTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodTopTitleCell
    }

    static func loginController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mainTabBarController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mainTabBarController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuAgeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuAgeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuCell? {
      return R.nib.menuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuCell
    }

    static func menuController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuEmailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuEmailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuFitnessController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuFitnessController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuFoodController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuFoodController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuFoodSwitchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodSwitchCell? {
      return R.nib.menuFoodSwitchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodSwitchCell
    }

    static func menuFoodTitleCellCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodTitleCellCell? {
      return R.nib.menuFoodTitleCellCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodTitleCellCell
    }

    static func menuHeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuHeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuLanguageController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuLanguageController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuLanguagesTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuLanguagesTitleCell? {
      return R.nib.menuLanguagesTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuLanguagesTitleCell
    }

    static func menuNameController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuNameController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuTargetWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuTargetWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuWriteQuestionController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuWriteQuestionController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func moodTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoodTableCell? {
      return R.nib.moodTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoodTableCell
    }

    static func positionTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PositionTableCell? {
      return R.nib.positionTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PositionTableCell
    }

    static func profileController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func progressCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProgressCell? {
      return R.nib.progressCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProgressCell
    }

    static func quizeAgeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeAgeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeEmailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeEmailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeFoodCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuizeFoodCell? {
      return R.nib.quizeFoodCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuizeFoodCell
    }

    static func quizeFoodController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeFoodController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeGenderController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeGenderController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeGoalController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeGoalController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeHeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeHeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeNameController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeNameController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeProgressController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeProgressController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeSportController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeSportController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeTargetWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeTargetWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func splashViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.splashViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func startController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.startController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func weightTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeightTableCell? {
      return R.nib.weightTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeightTableCell
    }

    static func workoutActivitiesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutActivitiesCell? {
      return R.nib.workoutActivitiesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutActivitiesCell
    }

    static func workoutActivityCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutActivityCollectionCell? {
      return R.nib.workoutActivityCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutActivityCollectionCell
    }

    static func workoutController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.workoutController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func workoutDetailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.workoutDetailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func workoutDetailDescriptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailDescriptionCell? {
      return R.nib.workoutDetailDescriptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailDescriptionCell
    }

    static func workoutDetailHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailHeaderCell? {
      return R.nib.workoutDetailHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailHeaderCell
    }

    static func workoutDetailMuscleController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.workoutDetailMuscleController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func workoutDetailMuscleСell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailMuscleСell? {
      return R.nib.workoutDetailMuscleСell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailMuscleСell
    }

    static func workoutDetailSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailSectionCell? {
      return R.nib.workoutDetailSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailSectionCell
    }

    static func workoutDetailTrainCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailTrainCell? {
      return R.nib.workoutDetailTrainCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailTrainCell
    }

    static func workoutExercisesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutExercisesCell? {
      return R.nib.workoutExercisesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutExercisesCell
    }

    static func workoutExercisesDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutExercisesDetailCell? {
      return R.nib.workoutExercisesDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutExercisesDetailCell
    }

    static func workoutSpecialCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutSpecialCell? {
      return R.nib.workoutSpecialCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutSpecialCell
    }

    static func workoutSpecialDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutSpecialDetailCell? {
      return R.nib.workoutSpecialDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutSpecialDetailCell
    }

    static func writeToUsController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.writeToUsController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 34 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AwardsTableCell`.
    static let awardsTableCell: Rswift.ReuseIdentifier<PolicyCell> = Rswift.ReuseIdentifier(identifier: "AwardsTableCell")
    /// Reuse identifier `ChartCollectionCell`.
    static let chartCollectionCell: Rswift.ReuseIdentifier<ChartCollectionCell> = Rswift.ReuseIdentifier(identifier: "ChartCollectionCell")
    /// Reuse identifier `ChartTableCell`.
    static let chartTableCell: Rswift.ReuseIdentifier<ChartTableCell> = Rswift.ReuseIdentifier(identifier: "ChartTableCell")
    /// Reuse identifier `EnerdyTodayCell`.
    static let enerdyTodayCell: Rswift.ReuseIdentifier<EnerdyTodayCell> = Rswift.ReuseIdentifier(identifier: "EnerdyTodayCell")
    /// Reuse identifier `EnergyAddActivityCell`.
    static let energyAddActivityCell: Rswift.ReuseIdentifier<EnergyAddActivityCell> = Rswift.ReuseIdentifier(identifier: "EnergyAddActivityCell")
    /// Reuse identifier `EnergyChooseActivityCell`.
    static let energyChooseActivityCell: Rswift.ReuseIdentifier<EnergyChooseActivityCell> = Rswift.ReuseIdentifier(identifier: "EnergyChooseActivityCell")
    /// Reuse identifier `EnergyChooseActivityCollectionCell`.
    static let energyChooseActivityCollectionCell: Rswift.ReuseIdentifier<EnergyChooseActivityCollectionCell> = Rswift.ReuseIdentifier(identifier: "EnergyChooseActivityCollectionCell")
    /// Reuse identifier `EnergyDrinkWaterCell`.
    static let energyDrinkWaterCell: Rswift.ReuseIdentifier<EnergyDrinkWaterCell> = Rswift.ReuseIdentifier(identifier: "EnergyDrinkWaterCell")
    /// Reuse identifier `EnergyMealsCell`.
    static let energyMealsCell: Rswift.ReuseIdentifier<EnergyMealsCell> = Rswift.ReuseIdentifier(identifier: "EnergyMealsCell")
    /// Reuse identifier `EnergyMoodCell`.
    static let energyMoodCell: Rswift.ReuseIdentifier<EnergyMoodCell> = Rswift.ReuseIdentifier(identifier: "EnergyMoodCell")
    /// Reuse identifier `EnergySleepCell`.
    static let energySleepCell: Rswift.ReuseIdentifier<EnergySleepCell> = Rswift.ReuseIdentifier(identifier: "EnergySleepCell")
    /// Reuse identifier `EnergyTrainingCell`.
    static let energyTrainingCell: Rswift.ReuseIdentifier<EnergyTrainingCell> = Rswift.ReuseIdentifier(identifier: "EnergyTrainingCell")
    /// Reuse identifier `EnergyWeightCell`.
    static let energyWeightCell: Rswift.ReuseIdentifier<EnergyWeightCell> = Rswift.ReuseIdentifier(identifier: "EnergyWeightCell")
    /// Reuse identifier `FoodRecomendedCell`.
    static let foodRecomendedCell: Rswift.ReuseIdentifier<FoodRecomendedCell> = Rswift.ReuseIdentifier(identifier: "FoodRecomendedCell")
    /// Reuse identifier `FoodTopTitleCell`.
    static let foodTopTitleCell: Rswift.ReuseIdentifier<FoodTopTitleCell> = Rswift.ReuseIdentifier(identifier: "FoodTopTitleCell")
    /// Reuse identifier `MenuFoodSwitchCell`.
    static let menuFoodSwitchCell: Rswift.ReuseIdentifier<MenuFoodSwitchCell> = Rswift.ReuseIdentifier(identifier: "MenuFoodSwitchCell")
    /// Reuse identifier `MenuFoodTitleCellCell`.
    static let menuFoodTitleCellCell: Rswift.ReuseIdentifier<MenuFoodTitleCellCell> = Rswift.ReuseIdentifier(identifier: "MenuFoodTitleCellCell")
    /// Reuse identifier `MenuLanguagesTitleCell`.
    static let menuLanguagesTitleCell: Rswift.ReuseIdentifier<MenuLanguagesTitleCell> = Rswift.ReuseIdentifier(identifier: "MenuLanguagesTitleCell")
    /// Reuse identifier `MoodTableCell`.
    static let moodTableCell: Rswift.ReuseIdentifier<MoodTableCell> = Rswift.ReuseIdentifier(identifier: "MoodTableCell")
    /// Reuse identifier `PositionTableCell`.
    static let positionTableCell: Rswift.ReuseIdentifier<PositionTableCell> = Rswift.ReuseIdentifier(identifier: "PositionTableCell")
    /// Reuse identifier `ProgressCell`.
    static let progressCell: Rswift.ReuseIdentifier<ProgressCell> = Rswift.ReuseIdentifier(identifier: "ProgressCell")
    /// Reuse identifier `QuizeFoodCell`.
    static let quizeFoodCell: Rswift.ReuseIdentifier<QuizeFoodCell> = Rswift.ReuseIdentifier(identifier: "QuizeFoodCell")
    /// Reuse identifier `WeightTableCell`.
    static let weightTableCell: Rswift.ReuseIdentifier<WeightTableCell> = Rswift.ReuseIdentifier(identifier: "WeightTableCell")
    /// Reuse identifier `WorkoutActivitiesCell`.
    static let workoutActivitiesCell: Rswift.ReuseIdentifier<WorkoutActivitiesCell> = Rswift.ReuseIdentifier(identifier: "WorkoutActivitiesCell")
    /// Reuse identifier `WorkoutActivityCollectionCell`.
    static let workoutActivityCollectionCell: Rswift.ReuseIdentifier<WorkoutActivityCollectionCell> = Rswift.ReuseIdentifier(identifier: "WorkoutActivityCollectionCell")
    /// Reuse identifier `WorkoutDetailDescriptionCell`.
    static let workoutDetailDescriptionCell: Rswift.ReuseIdentifier<WorkoutDetailDescriptionCell> = Rswift.ReuseIdentifier(identifier: "WorkoutDetailDescriptionCell")
    /// Reuse identifier `WorkoutDetailHeaderCell`.
    static let workoutDetailHeaderCell: Rswift.ReuseIdentifier<WorkoutDetailHeaderCell> = Rswift.ReuseIdentifier(identifier: "WorkoutDetailHeaderCell")
    /// Reuse identifier `WorkoutDetailMuscleСell`.
    static let workoutDetailMuscleСell: Rswift.ReuseIdentifier<WorkoutDetailMuscleСell> = Rswift.ReuseIdentifier(identifier: "WorkoutDetailMuscleСell")
    /// Reuse identifier `WorkoutDetailSectionCell`.
    static let workoutDetailSectionCell: Rswift.ReuseIdentifier<WorkoutDetailSectionCell> = Rswift.ReuseIdentifier(identifier: "WorkoutDetailSectionCell")
    /// Reuse identifier `WorkoutDetailTrainCell`.
    static let workoutDetailTrainCell: Rswift.ReuseIdentifier<WorkoutDetailTrainCell> = Rswift.ReuseIdentifier(identifier: "WorkoutDetailTrainCell")
    /// Reuse identifier `WorkoutExercisesCell`.
    static let workoutExercisesCell: Rswift.ReuseIdentifier<WorkoutExercisesCell> = Rswift.ReuseIdentifier(identifier: "WorkoutExercisesCell")
    /// Reuse identifier `WorkoutExercisesDetailCell`.
    static let workoutExercisesDetailCell: Rswift.ReuseIdentifier<WorkoutExercisesDetailCell> = Rswift.ReuseIdentifier(identifier: "WorkoutExercisesDetailCell")
    /// Reuse identifier `WorkoutSpecialCell`.
    static let workoutSpecialCell: Rswift.ReuseIdentifier<WorkoutSpecialCell> = Rswift.ReuseIdentifier(identifier: "WorkoutSpecialCell")
    /// Reuse identifier `WorkoutSpecialDetailCell`.
    static let workoutSpecialDetailCell: Rswift.ReuseIdentifier<WorkoutSpecialDetailCell> = Rswift.ReuseIdentifier(identifier: "WorkoutSpecialDetailCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 165 localization keys.
    struct localizable {
      /// en translation: %d Carb
      ///
      /// Locales: en
      static let food_carbs_description = Rswift.StringResource(key: "food_carbs_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d Fats
      ///
      /// Locales: en
      static let food_fats_description = Rswift.StringResource(key: "food_fats_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d Prot
      ///
      /// Locales: en
      static let food_prot_description = Rswift.StringResource(key: "food_prot_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d from %d
      ///
      /// Locales: en
      static let energy_training_from = Rswift.StringResource(key: "energy_training_from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d from %d
      ///
      /// Locales: en
      static let onboarding_count = Rswift.StringResource(key: "onboarding_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d left
      ///
      /// Locales: en
      static let food_gramm_lefts = Rswift.StringResource(key: "food_gramm_lefts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %dg left
      ///
      /// Locales: en
      static let energy_meals_gramm = Rswift.StringResource(key: "energy_meals_gramm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %dml left
      ///
      /// Locales: en
      static let water_widget_ml_left = Rswift.StringResource(key: "water_widget_ml_left", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en
      static let food_add = Rswift.StringResource(key: "food_add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add product
      ///
      /// Locales: en
      static let write_to_us_add_product = Rswift.StringResource(key: "write_to_us_add_product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add your activity
      ///
      /// Locales: en
      static let profile_add_your_activity = Rswift.StringResource(key: "profile_add_your_activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add your activity
      ///
      /// Locales: en
      static let progress_activity = Rswift.StringResource(key: "progress_activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add your own product
      ///
      /// Locales: en
      static let write_to_us_title = Rswift.StringResource(key: "write_to_us_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Age
      ///
      /// Locales: en
      static let menu_age = Rswift.StringResource(key: "menu_age", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Already eaten
      ///
      /// Locales: en
      static let food_already_eate = Rswift.StringResource(key: "food_already_eate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Awards
      ///
      /// Locales: en
      static let profile_awards = Rswift.StringResource(key: "profile_awards", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bad
      ///
      /// Locales: en
      static let energy_sleep_bad = Rswift.StringResource(key: "energy_sleep_bad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Badly
      ///
      /// Locales: en
      static let energy_mood_badly = Rswift.StringResource(key: "energy_mood_badly", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Better boiled or steamed
      ///
      /// Locales: en
      static let food_better = Rswift.StringResource(key: "food_better", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Breakfast
      ///
      /// Locales: en
      static let energy_meals_breakfast = Rswift.StringResource(key: "energy_meals_breakfast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Breakfast
      ///
      /// Locales: en
      static let food_breakfast = Rswift.StringResource(key: "food_breakfast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Build muscle
      ///
      /// Locales: en
      static let onboarding_goal_muscle = Rswift.StringResource(key: "onboarding_goal_muscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: By continuing you accept our
      ///
      /// Locales: en
      static let login_by_continue = Rswift.StringResource(key: "login_by_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Calories
      ///
      /// Locales: en
      static let profile_calories = Rswift.StringResource(key: "profile_calories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let login_forgot_cancel = Rswift.StringResource(key: "login_forgot_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Carbs
      ///
      /// Locales: en
      static let energy_meals_carbs = Rswift.StringResource(key: "energy_meals_carbs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Carbs
      ///
      /// Locales: en
      static let food_main_carbs = Rswift.StringResource(key: "food_main_carbs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Carbs %dg
      ///
      /// Locales: en
      static let food_carbs = Rswift.StringResource(key: "food_carbs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Choose activity
      ///
      /// Locales: en
      static let energy_choose_activity = Rswift.StringResource(key: "energy_choose_activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Classic
      ///
      /// Locales: en
      static let onboarding_food_classic = Rswift.StringResource(key: "onboarding_food_classic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Comment
      ///
      /// Locales: en
      static let write_to_us_comment = Rswift.StringResource(key: "write_to_us_comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Continue training
      ///
      /// Locales: en
      static let energy_training_continue = Rswift.StringResource(key: "energy_training_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Country position
      ///
      /// Locales: en
      static let profile_country_position = Rswift.StringResource(key: "profile_country_position", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en
      static let food_delete = Rswift.StringResource(key: "food_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: en
      static let workout_detail_description = Rswift.StringResource(key: "workout_detail_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Diet Preferences
      ///
      /// Locales: en
      static let menu_food_preferences_title1 = Rswift.StringResource(key: "menu_food_preferences_title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dinner
      ///
      /// Locales: en
      static let energy_meals_dinner = Rswift.StringResource(key: "energy_meals_dinner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dinner
      ///
      /// Locales: en
      static let food_dinner = Rswift.StringResource(key: "food_dinner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Do you sports?
      ///
      /// Locales: en
      static let onboarding_sport_title = Rswift.StringResource(key: "onboarding_sport_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Drink water
      ///
      /// Locales: en
      static let water_widget_title = Rswift.StringResource(key: "water_widget_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en
      static let login_email = Rswift.StringResource(key: "login_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en
      static let menu_email = Rswift.StringResource(key: "menu_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en
      static let menu_english = Rswift.StringResource(key: "menu_english", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Excellent! Good workout %d min
      ///
      /// Locales: en
      static let energy_training_excellent = Rswift.StringResource(key: "energy_training_excellent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Exclude from menu
      ///
      /// Locales: en
      static let menu_food_preferences_title2 = Rswift.StringResource(key: "menu_food_preferences_title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Exclude problem areas
      ///
      /// Locales: en
      static let menu_fitness_problem = Rswift.StringResource(key: "menu_fitness_problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: FT
      ///
      /// Locales: en
      static let onboarding_height_ft = Rswift.StringResource(key: "onboarding_height_ft", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fats
      ///
      /// Locales: en
      static let energy_meals_fats = Rswift.StringResource(key: "energy_meals_fats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fats
      ///
      /// Locales: en
      static let food_main_fats = Rswift.StringResource(key: "food_main_fats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fats %dg
      ///
      /// Locales: en
      static let food_fats = Rswift.StringResource(key: "food_fats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: en
      static let onboarding_female = Rswift.StringResource(key: "onboarding_female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fitness level
      ///
      /// Locales: en
      static let menu_fitness_leve = Rswift.StringResource(key: "menu_fitness_leve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fitness preferences
      ///
      /// Locales: en
      static let menu_fitness = Rswift.StringResource(key: "menu_fitness", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Food preferences
      ///
      /// Locales: en
      static let menu_food_preferences = Rswift.StringResource(key: "menu_food_preferences", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Food preferences
      ///
      /// Locales: en
      static let onboarding_food_title = Rswift.StringResource(key: "onboarding_food_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static let login_fogot_pass = Rswift.StringResource(key: "login_fogot_pass", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static let login_forgot_title = Rswift.StringResource(key: "login_forgot_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fri
      ///
      /// Locales: en
      static let progress_fri = Rswift.StringResource(key: "progress_fri", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Get My Plan
      ///
      /// Locales: en
      static let onboarding_email_get_plan = Rswift.StringResource(key: "onboarding_email_get_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Gey my personal plan
      ///
      /// Locales: en
      static let onboarding_get_plan = Rswift.StringResource(key: "onboarding_get_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Global position
      ///
      /// Locales: en
      static let profile_global_position = Rswift.StringResource(key: "profile_global_position", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Go next
      ///
      /// Locales: en
      static let onboarding_go_next = Rswift.StringResource(key: "onboarding_go_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Goal %.1f %@
      ///
      /// Locales: en
      static let energy_update_weight_goal = Rswift.StringResource(key: "energy_update_weight_goal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Good
      ///
      /// Locales: en
      static let energy_mood_good = Rswift.StringResource(key: "energy_mood_good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Good
      ///
      /// Locales: en
      static let energy_sleep_good = Rswift.StringResource(key: "energy_sleep_good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Height
      ///
      /// Locales: en
      static let menu_height = Rswift.StringResource(key: "menu_height", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Hey, %@
      ///
      /// Locales: en
      static let energy_header_title = Rswift.StringResource(key: "energy_header_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: How are you today?
      ///
      /// Locales: en
      static let energy_mood_title = Rswift.StringResource(key: "energy_mood_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: How did you sleep?
      ///
      /// Locales: en
      static let energy_sleep_title = Rswift.StringResource(key: "energy_sleep_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I do it regularly
      ///
      /// Locales: en
      static let onboarding_sport_regulary = Rswift.StringResource(key: "onboarding_sport_regulary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Just let me play
      ///
      /// Locales: en
      static let onboarding_goal_just_play = Rswift.StringResource(key: "onboarding_goal_just_play", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: KG
      ///
      /// Locales: en
      static let onboarding_weight_kg = Rswift.StringResource(key: "onboarding_weight_kg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Keep fit
      ///
      /// Locales: en
      static let onboarding_goal_keep_fit = Rswift.StringResource(key: "onboarding_goal_keep_fit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Keto
      ///
      /// Locales: en
      static let onboarding_food_keto = Rswift.StringResource(key: "onboarding_food_keto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: LB
      ///
      /// Locales: en
      static let onboarding_weight_lb = Rswift.StringResource(key: "onboarding_weight_lb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en
      static let menu_language = Rswift.StringResource(key: "menu_language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Level
      ///
      /// Locales: en
      static let profile_level = Rswift.StringResource(key: "profile_level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Log In
      ///
      /// Locales: en
      static let login_title = Rswift.StringResource(key: "login_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en
      static let login_button = Rswift.StringResource(key: "login_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lose weight
      ///
      /// Locales: en
      static let onboarding_goal_lose_weight = Rswift.StringResource(key: "onboarding_goal_lose_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lunch
      ///
      /// Locales: en
      static let energy_meals_lunch = Rswift.StringResource(key: "energy_meals_lunch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lunch
      ///
      /// Locales: en
      static let food_lunch = Rswift.StringResource(key: "food_lunch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en
      static let onboarding_male = Rswift.StringResource(key: "onboarding_male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Meals
      ///
      /// Locales: en
      static let login_meals = Rswift.StringResource(key: "login_meals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mon
      ///
      /// Locales: en
      static let progress_mon = Rswift.StringResource(key: "progress_mon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mood
      ///
      /// Locales: en
      static let profile_mood = Rswift.StringResource(key: "profile_mood", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Muscle group
      ///
      /// Locales: en
      static let workout_detail_muscle = Rswift.StringResource(key: "workout_detail_muscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en
      static let menu_name = Rswift.StringResource(key: "menu_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Newbie
      ///
      /// Locales: en
      static let onboarding_sport_newbie = Rswift.StringResource(key: "onboarding_sport_newbie", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Not at all
      ///
      /// Locales: en
      static let onboarding_sport_not_all = Rswift.StringResource(key: "onboarding_sport_not_all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Not bad
      ///
      /// Locales: en
      static let energy_mood_not_bad = Rswift.StringResource(key: "energy_mood_not_bad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Notification
      ///
      /// Locales: en
      static let menu_notification = Rswift.StringResource(key: "menu_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en
      static let onboarding_other = Rswift.StringResource(key: "onboarding_other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en
      static let login_password = Rswift.StringResource(key: "login_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pescatarian
      ///
      /// Locales: en
      static let onboarding_food_pesca = Rswift.StringResource(key: "onboarding_food_pesca", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Playing
      ///
      /// Locales: en
      static let login_playing = Rswift.StringResource(key: "login_playing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter the email address that you used when creating your account.
      ///
      /// Locales: en
      static let login_forgot_subTitle = Rswift.StringResource(key: "login_forgot_subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static let login_privacy = Rswift.StringResource(key: "login_privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static let menu_privacy = Rswift.StringResource(key: "menu_privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static let profile_privacy_policy = Rswift.StringResource(key: "profile_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy,
      ///
      /// Locales: en
      static let login_privacy_policy = Rswift.StringResource(key: "login_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Processing
      ///
      /// Locales: en
      static let onboarding_processing_title = Rswift.StringResource(key: "onboarding_processing_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Product name
      ///
      /// Locales: en
      static let write_to_us_product_name = Rswift.StringResource(key: "write_to_us_product_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Professional
      ///
      /// Locales: en
      static let onboarding_sport_professional = Rswift.StringResource(key: "onboarding_sport_professional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en
      static let profile = Rswift.StringResource(key: "profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Proteins
      ///
      /// Locales: en
      static let energy_meals_protein = Rswift.StringResource(key: "energy_meals_protein", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Proteins
      ///
      /// Locales: en
      static let food_main_proteins = Rswift.StringResource(key: "food_main_proteins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Proteins %dg
      ///
      /// Locales: en
      static let food_proteins = Rswift.StringResource(key: "food_proteins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Rank
      ///
      /// Locales: en
      static let profile_rank = Rswift.StringResource(key: "profile_rank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Recent
      ///
      /// Locales: en
      static let food_recent = Rswift.StringResource(key: "food_recent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Reminders
      ///
      /// Locales: en
      static let menu_reminders = Rswift.StringResource(key: "menu_reminders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Resting
      ///
      /// Locales: en
      static let workout_detail_resting = Rswift.StringResource(key: "workout_detail_resting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SM
      ///
      /// Locales: en
      static let onboarding_height_sm = Rswift.StringResource(key: "onboarding_height_sm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sat
      ///
      /// Locales: en
      static let progress_sat = Rswift.StringResource(key: "progress_sat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save Changes
      ///
      /// Locales: en
      static let menu_save_changes = Rswift.StringResource(key: "menu_save_changes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en
      static let food_search = Rswift.StringResource(key: "food_search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en
      static let menu_write_us_send = Rswift.StringResource(key: "menu_write_us_send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en
      static let menu_title = Rswift.StringResource(key: "menu_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en
      static let onboarding_food_skip = Rswift.StringResource(key: "onboarding_food_skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Snack
      ///
      /// Locales: en
      static let energy_meals_snack = Rswift.StringResource(key: "energy_meals_snack", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Snack
      ///
      /// Locales: en
      static let food_snack = Rswift.StringResource(key: "food_snack", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en
      static let login_start = Rswift.StringResource(key: "login_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start training
      ///
      /// Locales: en
      static let energy_training_start_training = Rswift.StringResource(key: "energy_training_start_training", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start workout
      ///
      /// Locales: en
      static let workout_detail_start = Rswift.StringResource(key: "workout_detail_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en
      static let login_forgot_submit = Rswift.StringResource(key: "login_forgot_submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sun
      ///
      /// Locales: en
      static let progress_sun = Rswift.StringResource(key: "progress_sun", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Target
      ///
      /// Locales: en
      static let profile_target = Rswift.StringResource(key: "profile_target", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Target weight
      ///
      /// Locales: en
      static let menu_target_weight = Rswift.StringResource(key: "menu_target_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Target weigth
      ///
      /// Locales: en
      static let onboarding_targe_weight_title = Rswift.StringResource(key: "onboarding_targe_weight_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Subscribe
      ///
      /// Locales: en
      static let login_terms_of_subscribe = Rswift.StringResource(key: "login_terms_of_subscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let login_terms = Rswift.StringResource(key: "login_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let login_terms_use = Rswift.StringResource(key: "login_terms_use", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let menu_terms = Rswift.StringResource(key: "menu_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let profile_terms_of_use = Rswift.StringResource(key: "profile_terms_of_use", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Text your message
      ///
      /// Locales: en
      static let menu_write_us_plcaheloder = Rswift.StringResource(key: "menu_write_us_plcaheloder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Thu
      ///
      /// Locales: en
      static let progress_thu = Rswift.StringResource(key: "progress_thu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Training
      ///
      /// Locales: en
      static let energy_training_training = Rswift.StringResource(key: "energy_training_training", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tue
      ///
      /// Locales: en
      static let progress_tue = Rswift.StringResource(key: "progress_tue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en
      static let energy_update_button = Rswift.StringResource(key: "energy_update_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en
      static let food_update = Rswift.StringResource(key: "food_update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Update weight
      ///
      /// Locales: en
      static let energy_update_weight_title = Rswift.StringResource(key: "energy_update_weight_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Vegan
      ///
      /// Locales: en
      static let onboarding_food_vegan = Rswift.StringResource(key: "onboarding_food_vegan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Vegetarian
      ///
      /// Locales: en
      static let onboarding_food_vegetarian = Rswift.StringResource(key: "onboarding_food_vegetarian", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: We create your personal nutrition and workout plan
      ///
      /// Locales: en
      static let onboarding_processing_subTitle = Rswift.StringResource(key: "onboarding_processing_subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: We recomend
      ///
      /// Locales: en
      static let food_we_recomend = Rswift.StringResource(key: "food_we_recomend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: We will check the correctness of your product and add it to our base
      ///
      /// Locales: en
      static let write_to_us_subtitle = Rswift.StringResource(key: "write_to_us_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wed
      ///
      /// Locales: en
      static let progress_wed = Rswift.StringResource(key: "progress_wed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Weight
      ///
      /// Locales: en
      static let menu_weight = Rswift.StringResource(key: "menu_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Weight
      ///
      /// Locales: en
      static let profile_weight = Rswift.StringResource(key: "profile_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: What's your goal?
      ///
      /// Locales: en
      static let onboarding_goal_title = Rswift.StringResource(key: "onboarding_goal_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Workouts
      ///
      /// Locales: en
      static let login_workouts = Rswift.StringResource(key: "login_workouts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Write to us
      ///
      /// Locales: en
      static let menu_write = Rswift.StringResource(key: "menu_write", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Write to us
      ///
      /// Locales: en
      static let profile_write_to_us = Rswift.StringResource(key: "profile_write_to_us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Write us to ask any question
      ///
      /// Locales: en
      static let menu_write_us_title = Rswift.StringResource(key: "menu_write_us_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your age
      ///
      /// Locales: en
      static let onboarding_age_title = Rswift.StringResource(key: "onboarding_age_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your email
      ///
      /// Locales: en
      static let onboarding_email_title = Rswift.StringResource(key: "onboarding_email_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your gender
      ///
      /// Locales: en
      static let onboarding_gender_title = Rswift.StringResource(key: "onboarding_gender_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your height
      ///
      /// Locales: en
      static let onboarding_height_title = Rswift.StringResource(key: "onboarding_height_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your meals
      ///
      /// Locales: en
      static let energy_meals_title = Rswift.StringResource(key: "energy_meals_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your name
      ///
      /// Locales: en
      static let onboarding_name = Rswift.StringResource(key: "onboarding_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your next workout %d min
      ///
      /// Locales: en
      static let energy_training_next_workout = Rswift.StringResource(key: "energy_training_next_workout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your progress
      ///
      /// Locales: en
      static let progress_title = Rswift.StringResource(key: "progress_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your progress %d%
      ///
      /// Locales: en
      static let energy_progress_percent = Rswift.StringResource(key: "energy_progress_percent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your weigth
      ///
      /// Locales: en
      static let onboarding_weight_title = Rswift.StringResource(key: "onboarding_weight_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: and
      ///
      /// Locales: en
      static let login_and = Rswift.StringResource(key: "login_and", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: %d Carb
      ///
      /// Locales: en
      static func food_carbs_description(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_carbs_description", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_carbs_description"
        }

        let format = NSLocalizedString("food_carbs_description", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d Fats
      ///
      /// Locales: en
      static func food_fats_description(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_fats_description", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_fats_description"
        }

        let format = NSLocalizedString("food_fats_description", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d Prot
      ///
      /// Locales: en
      static func food_prot_description(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_prot_description", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_prot_description"
        }

        let format = NSLocalizedString("food_prot_description", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d from %d
      ///
      /// Locales: en
      static func energy_training_from(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_training_from", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_from"
        }

        let format = NSLocalizedString("energy_training_from", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %d from %d
      ///
      /// Locales: en
      static func onboarding_count(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("onboarding_count", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_count"
        }

        let format = NSLocalizedString("onboarding_count", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %d left
      ///
      /// Locales: en
      static func food_gramm_lefts(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_gramm_lefts", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_gramm_lefts"
        }

        let format = NSLocalizedString("food_gramm_lefts", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %dg left
      ///
      /// Locales: en
      static func energy_meals_gramm(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_meals_gramm", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_gramm"
        }

        let format = NSLocalizedString("energy_meals_gramm", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %dml left
      ///
      /// Locales: en
      static func water_widget_ml_left(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("water_widget_ml_left", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "water_widget_ml_left"
        }

        let format = NSLocalizedString("water_widget_ml_left", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Add
      ///
      /// Locales: en
      static func food_add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_add"
        }

        return NSLocalizedString("food_add", bundle: bundle, comment: "")
      }

      /// en translation: Add product
      ///
      /// Locales: en
      static func write_to_us_add_product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_us_add_product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_us_add_product"
        }

        return NSLocalizedString("write_to_us_add_product", bundle: bundle, comment: "")
      }

      /// en translation: Add your activity
      ///
      /// Locales: en
      static func profile_add_your_activity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_add_your_activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_add_your_activity"
        }

        return NSLocalizedString("profile_add_your_activity", bundle: bundle, comment: "")
      }

      /// en translation: Add your activity
      ///
      /// Locales: en
      static func progress_activity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_activity"
        }

        return NSLocalizedString("progress_activity", bundle: bundle, comment: "")
      }

      /// en translation: Add your own product
      ///
      /// Locales: en
      static func write_to_us_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_us_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_us_title"
        }

        return NSLocalizedString("write_to_us_title", bundle: bundle, comment: "")
      }

      /// en translation: Age
      ///
      /// Locales: en
      static func menu_age(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_age", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_age"
        }

        return NSLocalizedString("menu_age", bundle: bundle, comment: "")
      }

      /// en translation: Already eaten
      ///
      /// Locales: en
      static func food_already_eate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_already_eate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_already_eate"
        }

        return NSLocalizedString("food_already_eate", bundle: bundle, comment: "")
      }

      /// en translation: Awards
      ///
      /// Locales: en
      static func profile_awards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_awards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_awards"
        }

        return NSLocalizedString("profile_awards", bundle: bundle, comment: "")
      }

      /// en translation: Bad
      ///
      /// Locales: en
      static func energy_sleep_bad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_sleep_bad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_sleep_bad"
        }

        return NSLocalizedString("energy_sleep_bad", bundle: bundle, comment: "")
      }

      /// en translation: Badly
      ///
      /// Locales: en
      static func energy_mood_badly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_mood_badly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_mood_badly"
        }

        return NSLocalizedString("energy_mood_badly", bundle: bundle, comment: "")
      }

      /// en translation: Better boiled or steamed
      ///
      /// Locales: en
      static func food_better(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_better", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_better"
        }

        return NSLocalizedString("food_better", bundle: bundle, comment: "")
      }

      /// en translation: Breakfast
      ///
      /// Locales: en
      static func energy_meals_breakfast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_breakfast", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_breakfast"
        }

        return NSLocalizedString("energy_meals_breakfast", bundle: bundle, comment: "")
      }

      /// en translation: Breakfast
      ///
      /// Locales: en
      static func food_breakfast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_breakfast", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_breakfast"
        }

        return NSLocalizedString("food_breakfast", bundle: bundle, comment: "")
      }

      /// en translation: Build muscle
      ///
      /// Locales: en
      static func onboarding_goal_muscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_muscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_muscle"
        }

        return NSLocalizedString("onboarding_goal_muscle", bundle: bundle, comment: "")
      }

      /// en translation: By continuing you accept our
      ///
      /// Locales: en
      static func login_by_continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_by_continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_by_continue"
        }

        return NSLocalizedString("login_by_continue", bundle: bundle, comment: "")
      }

      /// en translation: Calories
      ///
      /// Locales: en
      static func profile_calories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_calories", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_calories"
        }

        return NSLocalizedString("profile_calories", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func login_forgot_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_cancel"
        }

        return NSLocalizedString("login_forgot_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Carbs
      ///
      /// Locales: en
      static func energy_meals_carbs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_carbs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_carbs"
        }

        return NSLocalizedString("energy_meals_carbs", bundle: bundle, comment: "")
      }

      /// en translation: Carbs
      ///
      /// Locales: en
      static func food_main_carbs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_main_carbs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_main_carbs"
        }

        return NSLocalizedString("food_main_carbs", bundle: bundle, comment: "")
      }

      /// en translation: Carbs %dg
      ///
      /// Locales: en
      static func food_carbs(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_carbs", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_carbs"
        }

        let format = NSLocalizedString("food_carbs", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Choose activity
      ///
      /// Locales: en
      static func energy_choose_activity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_choose_activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_choose_activity"
        }

        return NSLocalizedString("energy_choose_activity", bundle: bundle, comment: "")
      }

      /// en translation: Classic
      ///
      /// Locales: en
      static func onboarding_food_classic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_classic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_classic"
        }

        return NSLocalizedString("onboarding_food_classic", bundle: bundle, comment: "")
      }

      /// en translation: Comment
      ///
      /// Locales: en
      static func write_to_us_comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_us_comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_us_comment"
        }

        return NSLocalizedString("write_to_us_comment", bundle: bundle, comment: "")
      }

      /// en translation: Continue training
      ///
      /// Locales: en
      static func energy_training_continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_training_continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_continue"
        }

        return NSLocalizedString("energy_training_continue", bundle: bundle, comment: "")
      }

      /// en translation: Country position
      ///
      /// Locales: en
      static func profile_country_position(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_country_position", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_country_position"
        }

        return NSLocalizedString("profile_country_position", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en
      static func food_delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_delete"
        }

        return NSLocalizedString("food_delete", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: en
      static func workout_detail_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("workout_detail_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "workout_detail_description"
        }

        return NSLocalizedString("workout_detail_description", bundle: bundle, comment: "")
      }

      /// en translation: Diet Preferences
      ///
      /// Locales: en
      static func menu_food_preferences_title1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_food_preferences_title1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_food_preferences_title1"
        }

        return NSLocalizedString("menu_food_preferences_title1", bundle: bundle, comment: "")
      }

      /// en translation: Dinner
      ///
      /// Locales: en
      static func energy_meals_dinner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_dinner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_dinner"
        }

        return NSLocalizedString("energy_meals_dinner", bundle: bundle, comment: "")
      }

      /// en translation: Dinner
      ///
      /// Locales: en
      static func food_dinner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_dinner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_dinner"
        }

        return NSLocalizedString("food_dinner", bundle: bundle, comment: "")
      }

      /// en translation: Do you sports?
      ///
      /// Locales: en
      static func onboarding_sport_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_title"
        }

        return NSLocalizedString("onboarding_sport_title", bundle: bundle, comment: "")
      }

      /// en translation: Drink water
      ///
      /// Locales: en
      static func water_widget_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water_widget_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "water_widget_title"
        }

        return NSLocalizedString("water_widget_title", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en
      static func login_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_email"
        }

        return NSLocalizedString("login_email", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en
      static func menu_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_email"
        }

        return NSLocalizedString("menu_email", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en
      static func menu_english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_english", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_english"
        }

        return NSLocalizedString("menu_english", bundle: bundle, comment: "")
      }

      /// en translation: Excellent! Good workout %d min
      ///
      /// Locales: en
      static func energy_training_excellent(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_training_excellent", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_excellent"
        }

        let format = NSLocalizedString("energy_training_excellent", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Exclude from menu
      ///
      /// Locales: en
      static func menu_food_preferences_title2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_food_preferences_title2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_food_preferences_title2"
        }

        return NSLocalizedString("menu_food_preferences_title2", bundle: bundle, comment: "")
      }

      /// en translation: Exclude problem areas
      ///
      /// Locales: en
      static func menu_fitness_problem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_fitness_problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_fitness_problem"
        }

        return NSLocalizedString("menu_fitness_problem", bundle: bundle, comment: "")
      }

      /// en translation: FT
      ///
      /// Locales: en
      static func onboarding_height_ft(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_height_ft", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_height_ft"
        }

        return NSLocalizedString("onboarding_height_ft", bundle: bundle, comment: "")
      }

      /// en translation: Fats
      ///
      /// Locales: en
      static func energy_meals_fats(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_fats", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_fats"
        }

        return NSLocalizedString("energy_meals_fats", bundle: bundle, comment: "")
      }

      /// en translation: Fats
      ///
      /// Locales: en
      static func food_main_fats(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_main_fats", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_main_fats"
        }

        return NSLocalizedString("food_main_fats", bundle: bundle, comment: "")
      }

      /// en translation: Fats %dg
      ///
      /// Locales: en
      static func food_fats(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_fats", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_fats"
        }

        let format = NSLocalizedString("food_fats", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Female
      ///
      /// Locales: en
      static func onboarding_female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_female"
        }

        return NSLocalizedString("onboarding_female", bundle: bundle, comment: "")
      }

      /// en translation: Fitness level
      ///
      /// Locales: en
      static func menu_fitness_leve(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_fitness_leve", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_fitness_leve"
        }

        return NSLocalizedString("menu_fitness_leve", bundle: bundle, comment: "")
      }

      /// en translation: Fitness preferences
      ///
      /// Locales: en
      static func menu_fitness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_fitness", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_fitness"
        }

        return NSLocalizedString("menu_fitness", bundle: bundle, comment: "")
      }

      /// en translation: Food preferences
      ///
      /// Locales: en
      static func menu_food_preferences(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_food_preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_food_preferences"
        }

        return NSLocalizedString("menu_food_preferences", bundle: bundle, comment: "")
      }

      /// en translation: Food preferences
      ///
      /// Locales: en
      static func onboarding_food_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_title"
        }

        return NSLocalizedString("onboarding_food_title", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static func login_fogot_pass(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_fogot_pass", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_fogot_pass"
        }

        return NSLocalizedString("login_fogot_pass", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static func login_forgot_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_title"
        }

        return NSLocalizedString("login_forgot_title", bundle: bundle, comment: "")
      }

      /// en translation: Fri
      ///
      /// Locales: en
      static func progress_fri(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_fri", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_fri"
        }

        return NSLocalizedString("progress_fri", bundle: bundle, comment: "")
      }

      /// en translation: Get My Plan
      ///
      /// Locales: en
      static func onboarding_email_get_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_email_get_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_email_get_plan"
        }

        return NSLocalizedString("onboarding_email_get_plan", bundle: bundle, comment: "")
      }

      /// en translation: Gey my personal plan
      ///
      /// Locales: en
      static func onboarding_get_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_get_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_get_plan"
        }

        return NSLocalizedString("onboarding_get_plan", bundle: bundle, comment: "")
      }

      /// en translation: Global position
      ///
      /// Locales: en
      static func profile_global_position(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_global_position", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_global_position"
        }

        return NSLocalizedString("profile_global_position", bundle: bundle, comment: "")
      }

      /// en translation: Go next
      ///
      /// Locales: en
      static func onboarding_go_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_go_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_go_next"
        }

        return NSLocalizedString("onboarding_go_next", bundle: bundle, comment: "")
      }

      /// en translation: Goal %.1f %@
      ///
      /// Locales: en
      static func energy_update_weight_goal(_ value1: Double, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_update_weight_goal", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_update_weight_goal"
        }

        let format = NSLocalizedString("energy_update_weight_goal", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Good
      ///
      /// Locales: en
      static func energy_mood_good(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_mood_good", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_mood_good"
        }

        return NSLocalizedString("energy_mood_good", bundle: bundle, comment: "")
      }

      /// en translation: Good
      ///
      /// Locales: en
      static func energy_sleep_good(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_sleep_good", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_sleep_good"
        }

        return NSLocalizedString("energy_sleep_good", bundle: bundle, comment: "")
      }

      /// en translation: Height
      ///
      /// Locales: en
      static func menu_height(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_height", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_height"
        }

        return NSLocalizedString("menu_height", bundle: bundle, comment: "")
      }

      /// en translation: Hey, %@
      ///
      /// Locales: en
      static func energy_header_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_header_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_header_title"
        }

        let format = NSLocalizedString("energy_header_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: How are you today?
      ///
      /// Locales: en
      static func energy_mood_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_mood_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_mood_title"
        }

        return NSLocalizedString("energy_mood_title", bundle: bundle, comment: "")
      }

      /// en translation: How did you sleep?
      ///
      /// Locales: en
      static func energy_sleep_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_sleep_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_sleep_title"
        }

        return NSLocalizedString("energy_sleep_title", bundle: bundle, comment: "")
      }

      /// en translation: I do it regularly
      ///
      /// Locales: en
      static func onboarding_sport_regulary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_regulary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_regulary"
        }

        return NSLocalizedString("onboarding_sport_regulary", bundle: bundle, comment: "")
      }

      /// en translation: Just let me play
      ///
      /// Locales: en
      static func onboarding_goal_just_play(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_just_play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_just_play"
        }

        return NSLocalizedString("onboarding_goal_just_play", bundle: bundle, comment: "")
      }

      /// en translation: KG
      ///
      /// Locales: en
      static func onboarding_weight_kg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_weight_kg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_weight_kg"
        }

        return NSLocalizedString("onboarding_weight_kg", bundle: bundle, comment: "")
      }

      /// en translation: Keep fit
      ///
      /// Locales: en
      static func onboarding_goal_keep_fit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_keep_fit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_keep_fit"
        }

        return NSLocalizedString("onboarding_goal_keep_fit", bundle: bundle, comment: "")
      }

      /// en translation: Keto
      ///
      /// Locales: en
      static func onboarding_food_keto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_keto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_keto"
        }

        return NSLocalizedString("onboarding_food_keto", bundle: bundle, comment: "")
      }

      /// en translation: LB
      ///
      /// Locales: en
      static func onboarding_weight_lb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_weight_lb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_weight_lb"
        }

        return NSLocalizedString("onboarding_weight_lb", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en
      static func menu_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_language"
        }

        return NSLocalizedString("menu_language", bundle: bundle, comment: "")
      }

      /// en translation: Level
      ///
      /// Locales: en
      static func profile_level(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_level", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_level"
        }

        return NSLocalizedString("profile_level", bundle: bundle, comment: "")
      }

      /// en translation: Log In
      ///
      /// Locales: en
      static func login_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_title"
        }

        return NSLocalizedString("login_title", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en
      static func login_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_button"
        }

        return NSLocalizedString("login_button", bundle: bundle, comment: "")
      }

      /// en translation: Lose weight
      ///
      /// Locales: en
      static func onboarding_goal_lose_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_lose_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_lose_weight"
        }

        return NSLocalizedString("onboarding_goal_lose_weight", bundle: bundle, comment: "")
      }

      /// en translation: Lunch
      ///
      /// Locales: en
      static func energy_meals_lunch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_lunch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_lunch"
        }

        return NSLocalizedString("energy_meals_lunch", bundle: bundle, comment: "")
      }

      /// en translation: Lunch
      ///
      /// Locales: en
      static func food_lunch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_lunch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_lunch"
        }

        return NSLocalizedString("food_lunch", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en
      static func onboarding_male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_male"
        }

        return NSLocalizedString("onboarding_male", bundle: bundle, comment: "")
      }

      /// en translation: Meals
      ///
      /// Locales: en
      static func login_meals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_meals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_meals"
        }

        return NSLocalizedString("login_meals", bundle: bundle, comment: "")
      }

      /// en translation: Mon
      ///
      /// Locales: en
      static func progress_mon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_mon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_mon"
        }

        return NSLocalizedString("progress_mon", bundle: bundle, comment: "")
      }

      /// en translation: Mood
      ///
      /// Locales: en
      static func profile_mood(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_mood", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_mood"
        }

        return NSLocalizedString("profile_mood", bundle: bundle, comment: "")
      }

      /// en translation: Muscle group
      ///
      /// Locales: en
      static func workout_detail_muscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("workout_detail_muscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "workout_detail_muscle"
        }

        return NSLocalizedString("workout_detail_muscle", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en
      static func menu_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_name"
        }

        return NSLocalizedString("menu_name", bundle: bundle, comment: "")
      }

      /// en translation: Newbie
      ///
      /// Locales: en
      static func onboarding_sport_newbie(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_newbie", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_newbie"
        }

        return NSLocalizedString("onboarding_sport_newbie", bundle: bundle, comment: "")
      }

      /// en translation: Not at all
      ///
      /// Locales: en
      static func onboarding_sport_not_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_not_all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_not_all"
        }

        return NSLocalizedString("onboarding_sport_not_all", bundle: bundle, comment: "")
      }

      /// en translation: Not bad
      ///
      /// Locales: en
      static func energy_mood_not_bad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_mood_not_bad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_mood_not_bad"
        }

        return NSLocalizedString("energy_mood_not_bad", bundle: bundle, comment: "")
      }

      /// en translation: Notification
      ///
      /// Locales: en
      static func menu_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_notification"
        }

        return NSLocalizedString("menu_notification", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en
      static func onboarding_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_other"
        }

        return NSLocalizedString("onboarding_other", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en
      static func login_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_password"
        }

        return NSLocalizedString("login_password", bundle: bundle, comment: "")
      }

      /// en translation: Pescatarian
      ///
      /// Locales: en
      static func onboarding_food_pesca(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_pesca", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_pesca"
        }

        return NSLocalizedString("onboarding_food_pesca", bundle: bundle, comment: "")
      }

      /// en translation: Playing
      ///
      /// Locales: en
      static func login_playing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_playing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_playing"
        }

        return NSLocalizedString("login_playing", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the email address that you used when creating your account.
      ///
      /// Locales: en
      static func login_forgot_subTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_subTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_subTitle"
        }

        return NSLocalizedString("login_forgot_subTitle", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static func login_privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_privacy"
        }

        return NSLocalizedString("login_privacy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static func menu_privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_privacy"
        }

        return NSLocalizedString("menu_privacy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static func profile_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_privacy_policy"
        }

        return NSLocalizedString("profile_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy,
      ///
      /// Locales: en
      static func login_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_privacy_policy"
        }

        return NSLocalizedString("login_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Processing
      ///
      /// Locales: en
      static func onboarding_processing_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_processing_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_processing_title"
        }

        return NSLocalizedString("onboarding_processing_title", bundle: bundle, comment: "")
      }

      /// en translation: Product name
      ///
      /// Locales: en
      static func write_to_us_product_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_us_product_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_us_product_name"
        }

        return NSLocalizedString("write_to_us_product_name", bundle: bundle, comment: "")
      }

      /// en translation: Professional
      ///
      /// Locales: en
      static func onboarding_sport_professional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_professional", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_professional"
        }

        return NSLocalizedString("onboarding_sport_professional", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile"
        }

        return NSLocalizedString("profile", bundle: bundle, comment: "")
      }

      /// en translation: Proteins
      ///
      /// Locales: en
      static func energy_meals_protein(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_protein", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_protein"
        }

        return NSLocalizedString("energy_meals_protein", bundle: bundle, comment: "")
      }

      /// en translation: Proteins
      ///
      /// Locales: en
      static func food_main_proteins(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_main_proteins", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_main_proteins"
        }

        return NSLocalizedString("food_main_proteins", bundle: bundle, comment: "")
      }

      /// en translation: Proteins %dg
      ///
      /// Locales: en
      static func food_proteins(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("food_proteins", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_proteins"
        }

        let format = NSLocalizedString("food_proteins", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Rank
      ///
      /// Locales: en
      static func profile_rank(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_rank", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_rank"
        }

        return NSLocalizedString("profile_rank", bundle: bundle, comment: "")
      }

      /// en translation: Recent
      ///
      /// Locales: en
      static func food_recent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_recent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_recent"
        }

        return NSLocalizedString("food_recent", bundle: bundle, comment: "")
      }

      /// en translation: Reminders
      ///
      /// Locales: en
      static func menu_reminders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_reminders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_reminders"
        }

        return NSLocalizedString("menu_reminders", bundle: bundle, comment: "")
      }

      /// en translation: Resting
      ///
      /// Locales: en
      static func workout_detail_resting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("workout_detail_resting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "workout_detail_resting"
        }

        return NSLocalizedString("workout_detail_resting", bundle: bundle, comment: "")
      }

      /// en translation: SM
      ///
      /// Locales: en
      static func onboarding_height_sm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_height_sm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_height_sm"
        }

        return NSLocalizedString("onboarding_height_sm", bundle: bundle, comment: "")
      }

      /// en translation: Sat
      ///
      /// Locales: en
      static func progress_sat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_sat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_sat"
        }

        return NSLocalizedString("progress_sat", bundle: bundle, comment: "")
      }

      /// en translation: Save Changes
      ///
      /// Locales: en
      static func menu_save_changes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_save_changes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_save_changes"
        }

        return NSLocalizedString("menu_save_changes", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en
      static func food_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_search"
        }

        return NSLocalizedString("food_search", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en
      static func menu_write_us_send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write_us_send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write_us_send"
        }

        return NSLocalizedString("menu_write_us_send", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en
      static func menu_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_title"
        }

        return NSLocalizedString("menu_title", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en
      static func onboarding_food_skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_skip"
        }

        return NSLocalizedString("onboarding_food_skip", bundle: bundle, comment: "")
      }

      /// en translation: Snack
      ///
      /// Locales: en
      static func energy_meals_snack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_snack", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_snack"
        }

        return NSLocalizedString("energy_meals_snack", bundle: bundle, comment: "")
      }

      /// en translation: Snack
      ///
      /// Locales: en
      static func food_snack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_snack", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_snack"
        }

        return NSLocalizedString("food_snack", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en
      static func login_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_start"
        }

        return NSLocalizedString("login_start", bundle: bundle, comment: "")
      }

      /// en translation: Start training
      ///
      /// Locales: en
      static func energy_training_start_training(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_training_start_training", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_start_training"
        }

        return NSLocalizedString("energy_training_start_training", bundle: bundle, comment: "")
      }

      /// en translation: Start workout
      ///
      /// Locales: en
      static func workout_detail_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("workout_detail_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "workout_detail_start"
        }

        return NSLocalizedString("workout_detail_start", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en
      static func login_forgot_submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_submit"
        }

        return NSLocalizedString("login_forgot_submit", bundle: bundle, comment: "")
      }

      /// en translation: Sun
      ///
      /// Locales: en
      static func progress_sun(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_sun", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_sun"
        }

        return NSLocalizedString("progress_sun", bundle: bundle, comment: "")
      }

      /// en translation: Target
      ///
      /// Locales: en
      static func profile_target(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_target", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_target"
        }

        return NSLocalizedString("profile_target", bundle: bundle, comment: "")
      }

      /// en translation: Target weight
      ///
      /// Locales: en
      static func menu_target_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_target_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_target_weight"
        }

        return NSLocalizedString("menu_target_weight", bundle: bundle, comment: "")
      }

      /// en translation: Target weigth
      ///
      /// Locales: en
      static func onboarding_targe_weight_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_targe_weight_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_targe_weight_title"
        }

        return NSLocalizedString("onboarding_targe_weight_title", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Subscribe
      ///
      /// Locales: en
      static func login_terms_of_subscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_terms_of_subscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_terms_of_subscribe"
        }

        return NSLocalizedString("login_terms_of_subscribe", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func login_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_terms"
        }

        return NSLocalizedString("login_terms", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func login_terms_use(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_terms_use", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_terms_use"
        }

        return NSLocalizedString("login_terms_use", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func menu_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_terms"
        }

        return NSLocalizedString("menu_terms", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func profile_terms_of_use(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_terms_of_use", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_terms_of_use"
        }

        return NSLocalizedString("profile_terms_of_use", bundle: bundle, comment: "")
      }

      /// en translation: Text your message
      ///
      /// Locales: en
      static func menu_write_us_plcaheloder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write_us_plcaheloder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write_us_plcaheloder"
        }

        return NSLocalizedString("menu_write_us_plcaheloder", bundle: bundle, comment: "")
      }

      /// en translation: Thu
      ///
      /// Locales: en
      static func progress_thu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_thu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_thu"
        }

        return NSLocalizedString("progress_thu", bundle: bundle, comment: "")
      }

      /// en translation: Training
      ///
      /// Locales: en
      static func energy_training_training(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_training_training", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_training"
        }

        return NSLocalizedString("energy_training_training", bundle: bundle, comment: "")
      }

      /// en translation: Tue
      ///
      /// Locales: en
      static func progress_tue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_tue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_tue"
        }

        return NSLocalizedString("progress_tue", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en
      static func energy_update_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_update_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_update_button"
        }

        return NSLocalizedString("energy_update_button", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en
      static func food_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_update"
        }

        return NSLocalizedString("food_update", bundle: bundle, comment: "")
      }

      /// en translation: Update weight
      ///
      /// Locales: en
      static func energy_update_weight_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_update_weight_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_update_weight_title"
        }

        return NSLocalizedString("energy_update_weight_title", bundle: bundle, comment: "")
      }

      /// en translation: Vegan
      ///
      /// Locales: en
      static func onboarding_food_vegan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_vegan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_vegan"
        }

        return NSLocalizedString("onboarding_food_vegan", bundle: bundle, comment: "")
      }

      /// en translation: Vegetarian
      ///
      /// Locales: en
      static func onboarding_food_vegetarian(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_vegetarian", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_vegetarian"
        }

        return NSLocalizedString("onboarding_food_vegetarian", bundle: bundle, comment: "")
      }

      /// en translation: We create your personal nutrition and workout plan
      ///
      /// Locales: en
      static func onboarding_processing_subTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_processing_subTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_processing_subTitle"
        }

        return NSLocalizedString("onboarding_processing_subTitle", bundle: bundle, comment: "")
      }

      /// en translation: We recomend
      ///
      /// Locales: en
      static func food_we_recomend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("food_we_recomend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "food_we_recomend"
        }

        return NSLocalizedString("food_we_recomend", bundle: bundle, comment: "")
      }

      /// en translation: We will check the correctness of your product and add it to our base
      ///
      /// Locales: en
      static func write_to_us_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_us_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_us_subtitle"
        }

        return NSLocalizedString("write_to_us_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Wed
      ///
      /// Locales: en
      static func progress_wed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_wed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_wed"
        }

        return NSLocalizedString("progress_wed", bundle: bundle, comment: "")
      }

      /// en translation: Weight
      ///
      /// Locales: en
      static func menu_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_weight"
        }

        return NSLocalizedString("menu_weight", bundle: bundle, comment: "")
      }

      /// en translation: Weight
      ///
      /// Locales: en
      static func profile_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_weight"
        }

        return NSLocalizedString("profile_weight", bundle: bundle, comment: "")
      }

      /// en translation: What's your goal?
      ///
      /// Locales: en
      static func onboarding_goal_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_title"
        }

        return NSLocalizedString("onboarding_goal_title", bundle: bundle, comment: "")
      }

      /// en translation: Workouts
      ///
      /// Locales: en
      static func login_workouts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_workouts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_workouts"
        }

        return NSLocalizedString("login_workouts", bundle: bundle, comment: "")
      }

      /// en translation: Write to us
      ///
      /// Locales: en
      static func menu_write(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write"
        }

        return NSLocalizedString("menu_write", bundle: bundle, comment: "")
      }

      /// en translation: Write to us
      ///
      /// Locales: en
      static func profile_write_to_us(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_write_to_us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_write_to_us"
        }

        return NSLocalizedString("profile_write_to_us", bundle: bundle, comment: "")
      }

      /// en translation: Write us to ask any question
      ///
      /// Locales: en
      static func menu_write_us_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write_us_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write_us_title"
        }

        return NSLocalizedString("menu_write_us_title", bundle: bundle, comment: "")
      }

      /// en translation: Your age
      ///
      /// Locales: en
      static func onboarding_age_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_age_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_age_title"
        }

        return NSLocalizedString("onboarding_age_title", bundle: bundle, comment: "")
      }

      /// en translation: Your email
      ///
      /// Locales: en
      static func onboarding_email_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_email_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_email_title"
        }

        return NSLocalizedString("onboarding_email_title", bundle: bundle, comment: "")
      }

      /// en translation: Your gender
      ///
      /// Locales: en
      static func onboarding_gender_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_gender_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_gender_title"
        }

        return NSLocalizedString("onboarding_gender_title", bundle: bundle, comment: "")
      }

      /// en translation: Your height
      ///
      /// Locales: en
      static func onboarding_height_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_height_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_height_title"
        }

        return NSLocalizedString("onboarding_height_title", bundle: bundle, comment: "")
      }

      /// en translation: Your meals
      ///
      /// Locales: en
      static func energy_meals_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("energy_meals_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_meals_title"
        }

        return NSLocalizedString("energy_meals_title", bundle: bundle, comment: "")
      }

      /// en translation: Your name
      ///
      /// Locales: en
      static func onboarding_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_name"
        }

        return NSLocalizedString("onboarding_name", bundle: bundle, comment: "")
      }

      /// en translation: Your next workout %d min
      ///
      /// Locales: en
      static func energy_training_next_workout(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_training_next_workout", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_training_next_workout"
        }

        let format = NSLocalizedString("energy_training_next_workout", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Your progress
      ///
      /// Locales: en
      static func progress_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("progress_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "progress_title"
        }

        return NSLocalizedString("progress_title", bundle: bundle, comment: "")
      }

      /// en translation: Your progress %d%
      ///
      /// Locales: en
      static func energy_progress_percent(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("energy_progress_percent", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "energy_progress_percent"
        }

        let format = NSLocalizedString("energy_progress_percent", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Your weigth
      ///
      /// Locales: en
      static func onboarding_weight_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_weight_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_weight_title"
        }

        return NSLocalizedString("onboarding_weight_title", bundle: bundle, comment: "")
      }

      /// en translation: and
      ///
      /// Locales: en
      static func login_and(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_and", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_and"
        }

        return NSLocalizedString("login_and", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _EnerdyTodayCell.validate()
      try _EnergyChooseActivityCell.validate()
      try _EnergyChooseActivityCollectionCell.validate()
      try _EnergyController.validate()
      try _EnergyDrinkWaterCell.validate()
      try _EnergyMealsCell.validate()
      try _EnergyMoodCell.validate()
      try _EnergyProgressController.validate()
      try _EnergySleepCell.validate()
      try _EnergyTrainingCell.validate()
      try _EnergyWeightCell.validate()
      try _FoodController.validate()
      try _FoodRecomendedCell.validate()
      try _LoginController.validate()
      try _MainTabBarController.validate()
      try _MenuAgeController.validate()
      try _MenuCell.validate()
      try _MenuController.validate()
      try _MenuEmailController.validate()
      try _MenuFitnessController.validate()
      try _MenuFoodController.validate()
      try _MenuHeightController.validate()
      try _MenuLanguageController.validate()
      try _MenuLanguagesTitleCell.validate()
      try _MenuNameController.validate()
      try _MenuTargetWeightController.validate()
      try _MenuWeightController.validate()
      try _MenuWriteQuestionController.validate()
      try _MoodTableCell.validate()
      try _ProfileController.validate()
      try _QuizeAgeController.validate()
      try _QuizeEmailController.validate()
      try _QuizeFoodCell.validate()
      try _QuizeFoodController.validate()
      try _QuizeGenderController.validate()
      try _QuizeGoalController.validate()
      try _QuizeHeightController.validate()
      try _QuizeNameController.validate()
      try _QuizeProgressController.validate()
      try _QuizeSportController.validate()
      try _QuizeTargetWeightController.validate()
      try _QuizeWeightController.validate()
      try _SplashViewController.validate()
      try _StartController.validate()
      try _WorkoutController.validate()
      try _WorkoutDetailController.validate()
      try _WorkoutDetailDescriptionCell.validate()
      try _WorkoutDetailHeaderCell.validate()
      try _WorkoutDetailMuscleController.validate()
      try _WorkoutDetailTrainCell.validate()
      try _WorkoutExercisesDetailCell.validate()
      try _WorkoutSpecialDetailCell.validate()
      try _WriteToUsController.validate()
    }

    struct _AwardsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PolicyCell

      let bundle = R.hostingBundle
      let identifier = "AwardsTableCell"
      let name = "AwardsTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PolicyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PolicyCell
      }

      fileprivate init() {}
    }

    struct _ChartCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChartCollectionCell

      let bundle = R.hostingBundle
      let identifier = "ChartCollectionCell"
      let name = "ChartCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChartCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChartCollectionCell
      }

      fileprivate init() {}
    }

    struct _ChartTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChartTableCell

      let bundle = R.hostingBundle
      let identifier = "ChartTableCell"
      let name = "ChartTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChartTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChartTableCell
      }

      fileprivate init() {}
    }

    struct _EnerdyTodayCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnerdyTodayCell

      let bundle = R.hostingBundle
      let identifier = "EnerdyTodayCell"
      let name = "EnerdyTodayCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnerdyTodayCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnerdyTodayCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_arrow_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_arrow_back_ic' is used in nib 'EnerdyTodayCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_arrow_forward_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_arrow_forward_ic' is used in nib 'EnerdyTodayCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_today_pin_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_today_pin_ic' is used in nib 'EnerdyTodayCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyAddActivityCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EnergyAddActivityCell

      let bundle = R.hostingBundle
      let identifier = "EnergyAddActivityCell"
      let name = "EnergyAddActivityCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyAddActivityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyAddActivityCell
      }

      fileprivate init() {}
    }

    struct _EnergyChooseActivityCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyChooseActivityCell

      let bundle = R.hostingBundle
      let identifier = "EnergyChooseActivityCell"
      let name = "EnergyChooseActivityCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyChooseActivityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyChooseActivityCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyChooseActivityCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyChooseActivityCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyChooseActivityCollectionCell

      let bundle = R.hostingBundle
      let identifier = "EnergyChooseActivityCollectionCell"
      let name = "EnergyChooseActivityCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyChooseActivityCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyChooseActivityCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_big_sport_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_big_sport_ic' is used in nib 'EnergyChooseActivityCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EnergyController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_coins_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_coins_ic' is used in nib 'EnergyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'EnergyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'EnergyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_food_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_food_ic' is used in nib 'EnergyController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyDrinkWaterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyDrinkWaterCell

      let bundle = R.hostingBundle
      let identifier = "EnergyDrinkWaterCell"
      let name = "EnergyDrinkWaterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyDrinkWaterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyDrinkWaterCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyDrinkWaterCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyMealsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyMealsCell

      let bundle = R.hostingBundle
      let identifier = "EnergyMealsCell"
      let name = "EnergyMealsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyMealsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyMealsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyMealsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'EnergyMealsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyMoodCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyMoodCell

      let bundle = R.hostingBundle
      let identifier = "EnergyMoodCell"
      let name = "EnergyMoodCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyMoodCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyMoodCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_mood_badly_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_mood_badly_ic' is used in nib 'EnergyMoodCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_mood_good_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_mood_good_ic' is used in nib 'EnergyMoodCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_mood_not_bad_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_mood_not_bad_ic' is used in nib 'EnergyMoodCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyMoodCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyProgressController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EnergyProgressController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'EnergyProgressController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'EnergyProgressController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "progress_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'progress_back_ic' is used in nib 'EnergyProgressController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "progress_cube_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'progress_cube_ic' is used in nib 'EnergyProgressController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "progress_forward_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'progress_forward_ic' is used in nib 'EnergyProgressController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergySleepCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergySleepCell

      let bundle = R.hostingBundle
      let identifier = "EnergySleepCell"
      let name = "EnergySleepCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergySleepCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergySleepCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergySleepCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyTrainingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyTrainingCell

      let bundle = R.hostingBundle
      let identifier = "EnergyTrainingCell"
      let name = "EnergyTrainingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyTrainingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyTrainingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyTrainingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'EnergyTrainingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "temp_activity_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_activity_ic' is used in nib 'EnergyTrainingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EnergyUpdateWeightController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EnergyUpdateWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _EnergyWeightCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EnergyWeightCell

      let bundle = R.hostingBundle
      let identifier = "EnergyWeightCell"
      let name = "EnergyWeightCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EnergyWeightCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EnergyWeightCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_water_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_water_flash_ic' is used in nib 'EnergyWeightCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FoodAddController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FoodAddController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FoodController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FoodController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "food_arrow_down_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'food_arrow_down_ic' is used in nib 'FoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "food_clear_search_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'food_clear_search_ic' is used in nib 'FoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "food_search_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'food_search_ic' is used in nib 'FoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:3sc-gp-9Zw:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:3sc-gp-9Zw:image' is used in nib 'FoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'FoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'FoodController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FoodRecomendedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FoodRecomendedCell

      let bundle = R.hostingBundle
      let identifier = "FoodRecomendedCell"
      let name = "FoodRecomendedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodRecomendedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodRecomendedCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_meals_add_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_meals_add_ic' is used in nib 'FoodRecomendedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_food_two_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_food_two_ic' is used in nib 'FoodRecomendedCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FoodTopTitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FoodTopTitleCell

      let bundle = R.hostingBundle
      let identifier = "FoodTopTitleCell"
      let name = "FoodTopTitleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodTopTitleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodTopTitleCell
      }

      fileprivate init() {}
    }

    struct _LoginController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "auth_note_see_pass_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'auth_note_see_pass_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MainTabBarController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainTabBarController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tab_bar_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_energy_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_fun_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_fun_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_menu_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_menu_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_profile_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_workout_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_workout_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuAgeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuAgeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuAgeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuAgeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "menu_arrow_right_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_arrow_right_ic' is used in nib 'MenuCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_flag_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_flag_ic' is used in nib 'MenuCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuEmailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuEmailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuEmailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuEmailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuFitnessController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuFitnessController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuFitnessController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuFitnessController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuFoodController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuFoodController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuFoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuFoodController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuFoodSwitchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuFoodSwitchCell

      let bundle = R.hostingBundle
      let identifier = "MenuFoodSwitchCell"
      let name = "MenuFoodSwitchCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodSwitchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodSwitchCell
      }

      fileprivate init() {}
    }

    struct _MenuFoodTitleCellCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuFoodTitleCellCell

      let bundle = R.hostingBundle
      let identifier = "MenuFoodTitleCellCell"
      let name = "MenuFoodTitleCellCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodTitleCellCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodTitleCellCell
      }

      fileprivate init() {}
    }

    struct _MenuHeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuHeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuHeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuHeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuLanguageController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuLanguageController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuLanguageController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuLanguageController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuLanguagesTitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MenuLanguagesTitleCell

      let bundle = R.hostingBundle
      let identifier = "MenuLanguagesTitleCell"
      let name = "MenuLanguagesTitleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuLanguagesTitleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuLanguagesTitleCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'MenuLanguagesTitleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuNameController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuNameController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuNameController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuNameController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuTargetWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuTargetWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_target_flag_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_target_flag_ic' is used in nib 'MenuTargetWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuWriteQuestionController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuWriteQuestionController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuWriteQuestionController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuWriteQuestionController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MoodTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MoodTableCell

      let bundle = R.hostingBundle
      let identifier = "MoodTableCell"
      let name = "MoodTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoodTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoodTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "MoodChartBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MoodChartBack' is used in nib 'MoodTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "grayText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayText' is used in nib 'MoodTableCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "profileCellBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'profileCellBack' is used in nib 'MoodTableCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PositionTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PositionTableCell

      let bundle = R.hostingBundle
      let identifier = "PositionTableCell"
      let name = "PositionTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PositionTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PositionTableCell
      }

      fileprivate init() {}
    }

    struct _ProfileController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "dummyFace", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dummyFace' is used in nib 'ProfileController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'ProfileController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top_view_coin_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_view_coin_ic' is used in nib 'ProfileController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top_view_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_view_flash_ic' is used in nib 'ProfileController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProgressCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProgressCell

      let bundle = R.hostingBundle
      let identifier = "ProgressCell"
      let name = "ProgressCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProgressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProgressCell
      }

      fileprivate init() {}
    }

    struct _QuizeAgeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeAgeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeAgeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeAgeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeEmailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeEmailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeEmailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeEmailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeFoodCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QuizeFoodCell

      let bundle = R.hostingBundle
      let identifier = "QuizeFoodCell"
      let name = "QuizeFoodCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuizeFoodCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuizeFoodCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_food_classic_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_food_classic_ic' is used in nib 'QuizeFoodCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'QuizeFoodCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeFoodController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeFoodController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeFoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeFoodController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeGenderController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeGenderController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_gender_man_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_gender_man_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_gender_women_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_gender_women_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeGoalController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeGoalController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeGoalController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeGoalController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeHeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeHeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeHeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeHeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeNameController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeNameController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeNameController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeNameController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeProgressController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeProgressController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeProgressController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeSportController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeSportController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_food_classic_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_food_classic_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeTargetWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeTargetWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_target_flag_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_target_flag_ic' is used in nib 'QuizeTargetWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SplashViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SplashViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "start_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_back_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_gradient_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_login_button_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_login_button_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_logo_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_logo_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _StartController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StartController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "start_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_back_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_gradient_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_login_button_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_login_button_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_logo_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_logo_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WeightTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WeightTableCell

      let bundle = R.hostingBundle
      let identifier = "WeightTableCell"
      let name = "WeightTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeightTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeightTableCell
      }

      fileprivate init() {}
    }

    struct _WorkoutActivitiesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutActivitiesCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutActivitiesCell"
      let name = "WorkoutActivitiesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutActivitiesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutActivitiesCell
      }

      fileprivate init() {}
    }

    struct _WorkoutActivityCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutActivityCollectionCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutActivityCollectionCell"
      let name = "WorkoutActivityCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutActivityCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutActivityCollectionCell
      }

      fileprivate init() {}
    }

    struct _WorkoutController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WorkoutController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "energy_coins_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_coins_ic' is used in nib 'WorkoutController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "energy_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'energy_energy_ic' is used in nib 'WorkoutController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_food_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_food_ic' is used in nib 'WorkoutController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top_view_elipse_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_view_elipse_ic' is used in nib 'WorkoutController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WorkoutDetailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'WorkoutDetailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailDescriptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WorkoutDetailDescriptionCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutDetailDescriptionCell"
      let name = "WorkoutDetailDescriptionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailDescriptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailDescriptionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "workout_arrow_right_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_arrow_right_ic' is used in nib 'WorkoutDetailDescriptionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WorkoutDetailHeaderCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutDetailHeaderCell"
      let name = "WorkoutDetailHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailHeaderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_workout_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_workout_gradient_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "temp_workout_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_workout_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_back_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_clock_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_clock_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_fire_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_fire_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_flash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_flash_ic' is used in nib 'WorkoutDetailHeaderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailMuscleController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WorkoutDetailMuscleController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'WorkoutDetailMuscleController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'WorkoutDetailMuscleController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailMuscleСell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutDetailMuscleСell

      let bundle = R.hostingBundle
      let identifier = "WorkoutDetailMuscleСell"
      let name = "WorkoutDetailMuscleСell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailMuscleСell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailMuscleСell
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutDetailSectionCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutDetailSectionCell"
      let name = "WorkoutDetailSectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailSectionCell
      }

      fileprivate init() {}
    }

    struct _WorkoutDetailTrainCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WorkoutDetailTrainCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutDetailTrainCell"
      let name = "WorkoutDetailTrainCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutDetailTrainCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutDetailTrainCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_activity_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_activity_ic' is used in nib 'WorkoutDetailTrainCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "temp_workout_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_workout_ic' is used in nib 'WorkoutDetailTrainCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutExercisesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutExercisesCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutExercisesCell"
      let name = "WorkoutExercisesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutExercisesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutExercisesCell
      }

      fileprivate init() {}
    }

    struct _WorkoutExercisesDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WorkoutExercisesDetailCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutExercisesDetailCell"
      let name = "WorkoutExercisesDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutExercisesDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutExercisesDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_big_sport_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_big_sport_ic' is used in nib 'WorkoutExercisesDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "workout_blocked_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'workout_blocked_ic' is used in nib 'WorkoutExercisesDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutSpecialCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WorkoutSpecialCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutSpecialCell"
      let name = "WorkoutSpecialCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutSpecialCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutSpecialCell
      }

      fileprivate init() {}
    }

    struct _WorkoutSpecialDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WorkoutSpecialDetailCell

      let bundle = R.hostingBundle
      let identifier = "WorkoutSpecialDetailCell"
      let name = "WorkoutSpecialDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WorkoutSpecialDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WorkoutSpecialDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_big_sport_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_big_sport_ic' is used in nib 'WorkoutSpecialDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WriteToUsController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WriteToUsController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'WriteToUsController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'WriteToUsController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "start_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_back_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_gradient_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_login_button_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_login_button_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_logo_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_logo_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
