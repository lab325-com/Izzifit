//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 21 files.
  struct file {
    /// Resource file `Debug.xcconfig`.
    static let debugXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Debug", pathExtension: "xcconfig")
    /// Resource file `FoodGroups.graphql`.
    static let foodGroupsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "FoodGroups", pathExtension: "graphql")
    /// Resource file `Generator.xcconfig`.
    static let generatorXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Generator", pathExtension: "xcconfig")
    /// Resource file `Inter-Black.ttf`.
    static let interBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Black", pathExtension: "ttf")
    /// Resource file `Inter-Bold.ttf`.
    static let interBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Bold", pathExtension: "ttf")
    /// Resource file `Inter-ExtraBold.ttf`.
    static let interExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-ExtraBold", pathExtension: "ttf")
    /// Resource file `Inter-ExtraLight.ttf`.
    static let interExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-ExtraLight", pathExtension: "ttf")
    /// Resource file `Inter-Light.ttf`.
    static let interLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Light", pathExtension: "ttf")
    /// Resource file `Inter-Medium.ttf`.
    static let interMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Medium", pathExtension: "ttf")
    /// Resource file `Inter-Regular.ttf`.
    static let interRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Regular", pathExtension: "ttf")
    /// Resource file `Inter-SemiBold.ttf`.
    static let interSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-SemiBold", pathExtension: "ttf")
    /// Resource file `Inter-Thin.ttf`.
    static let interThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Thin", pathExtension: "ttf")
    /// Resource file `Login.graphql`.
    static let loginGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Login", pathExtension: "graphql")
    /// Resource file `Me.graphql`.
    static let meGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Me", pathExtension: "graphql")
    /// Resource file `Muscles.graphql`.
    static let musclesGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Muscles", pathExtension: "graphql")
    /// Resource file `PasswordForgotRequest.graphql`.
    static let passwordForgotRequestGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "PasswordForgotRequest", pathExtension: "graphql")
    /// Resource file `Products.graphql`.
    static let productsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Products", pathExtension: "graphql")
    /// Resource file `ProfileUpdate.graphql`.
    static let profileUpdateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ProfileUpdate", pathExtension: "graphql")
    /// Resource file `Release.xcconfig`.
    static let releaseXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Release", pathExtension: "xcconfig")
    /// Resource file `Staging.xcconfig`.
    static let stagingXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Staging", pathExtension: "xcconfig")
    /// Resource file `ToggleProductInRation.graphql`.
    static let toggleProductInRationGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ToggleProductInRation", pathExtension: "graphql")

    /// `bundle.url(forResource: "Debug", withExtension: "xcconfig")`
    static func debugXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.debugXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FoodGroups", withExtension: "graphql")`
    static func foodGroupsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.foodGroupsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Generator", withExtension: "xcconfig")`
    static func generatorXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.generatorXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Black", withExtension: "ttf")`
    static func interBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Bold", withExtension: "ttf")`
    static func interBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-ExtraBold", withExtension: "ttf")`
    static func interExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-ExtraLight", withExtension: "ttf")`
    static func interExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Light", withExtension: "ttf")`
    static func interLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Medium", withExtension: "ttf")`
    static func interMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Regular", withExtension: "ttf")`
    static func interRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-SemiBold", withExtension: "ttf")`
    static func interSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Thin", withExtension: "ttf")`
    static func interThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Login", withExtension: "graphql")`
    static func loginGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loginGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Me", withExtension: "graphql")`
    static func meGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.meGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Muscles", withExtension: "graphql")`
    static func musclesGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.musclesGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PasswordForgotRequest", withExtension: "graphql")`
    static func passwordForgotRequestGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.passwordForgotRequestGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Products", withExtension: "graphql")`
    static func productsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.productsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ProfileUpdate", withExtension: "graphql")`
    static func profileUpdateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.profileUpdateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Release", withExtension: "xcconfig")`
    static func releaseXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.releaseXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Staging", withExtension: "xcconfig")`
    static func stagingXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stagingXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToggleProductInRation", withExtension: "graphql")`
    static func toggleProductInRationGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toggleProductInRationGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 9 fonts.
  struct font: Rswift.Validatable {
    /// Font `Inter-Black`.
    static let interBlack = Rswift.FontResource(fontName: "Inter-Black")
    /// Font `Inter-Bold`.
    static let interBold = Rswift.FontResource(fontName: "Inter-Bold")
    /// Font `Inter-ExtraBold`.
    static let interExtraBold = Rswift.FontResource(fontName: "Inter-ExtraBold")
    /// Font `Inter-ExtraLight`.
    static let interExtraLight = Rswift.FontResource(fontName: "Inter-ExtraLight")
    /// Font `Inter-Light`.
    static let interLight = Rswift.FontResource(fontName: "Inter-Light")
    /// Font `Inter-Medium`.
    static let interMedium = Rswift.FontResource(fontName: "Inter-Medium")
    /// Font `Inter-Regular`.
    static let interRegular = Rswift.FontResource(fontName: "Inter-Regular")
    /// Font `Inter-SemiBold`.
    static let interSemiBold = Rswift.FontResource(fontName: "Inter-SemiBold")
    /// Font `Inter-Thin`.
    static let interThin = Rswift.FontResource(fontName: "Inter-Thin")

    /// `UIFont(name: "Inter-Black", size: ...)`
    static func interBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBlack, size: size)
    }

    /// `UIFont(name: "Inter-Bold", size: ...)`
    static func interBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBold, size: size)
    }

    /// `UIFont(name: "Inter-ExtraBold", size: ...)`
    static func interExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interExtraBold, size: size)
    }

    /// `UIFont(name: "Inter-ExtraLight", size: ...)`
    static func interExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interExtraLight, size: size)
    }

    /// `UIFont(name: "Inter-Light", size: ...)`
    static func interLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interLight, size: size)
    }

    /// `UIFont(name: "Inter-Medium", size: ...)`
    static func interMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interMedium, size: size)
    }

    /// `UIFont(name: "Inter-Regular", size: ...)`
    static func interRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interRegular, size: size)
    }

    /// `UIFont(name: "Inter-SemiBold", size: ...)`
    static func interSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interSemiBold, size: size)
    }

    /// `UIFont(name: "Inter-Thin", size: ...)`
    static func interThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interThin, size: size)
    }

    static func validate() throws {
      if R.font.interBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Black' could not be loaded, is 'Inter-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Bold' could not be loaded, is 'Inter-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-ExtraBold' could not be loaded, is 'Inter-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-ExtraLight' could not be loaded, is 'Inter-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Light' could not be loaded, is 'Inter-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Medium' could not be loaded, is 'Inter-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Regular' could not be loaded, is 'Inter-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-SemiBold' could not be loaded, is 'Inter-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Thin' could not be loaded, is 'Inter-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 28 images.
  struct image {
    /// Image `auth_note_see_pass_ic`.
    static let auth_note_see_pass_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "auth_note_see_pass_ic")
    /// Image `auth_see_pass_ic`.
    static let auth_see_pass_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "auth_see_pass_ic")
    /// Image `menu_arrow_right_ic`.
    static let menu_arrow_right_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_arrow_right_ic")
    /// Image `menu_flag_ic`.
    static let menu_flag_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_flag_ic")
    /// Image `onboarding_back_ic`.
    static let onboarding_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_back_ic")
    /// Image `onboarding_background_ic`.
    static let onboarding_background_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_background_ic")
    /// Image `onboarding_food_classic_ic`.
    static let onboarding_food_classic_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_classic_ic")
    /// Image `onboarding_food_keto_ic`.
    static let onboarding_food_keto_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_keto_ic")
    /// Image `onboarding_food_pesca_ic`.
    static let onboarding_food_pesca_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_pesca_ic")
    /// Image `onboarding_food_vegan_ic`.
    static let onboarding_food_vegan_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_vegan_ic")
    /// Image `onboarding_food_vegetarian_ic`.
    static let onboarding_food_vegetarian_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_food_vegetarian_ic")
    /// Image `onboarding_gender_man_ic`.
    static let onboarding_gender_man_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_gender_man_ic")
    /// Image `onboarding_gender_women_ic`.
    static let onboarding_gender_women_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_gender_women_ic")
    /// Image `onboarding_selected_ic`.
    static let onboarding_selected_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_selected_ic")
    /// Image `onboarding_sport_newbie_ic`.
    static let onboarding_sport_newbie_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_newbie_ic")
    /// Image `onboarding_sport_not_all_ic`.
    static let onboarding_sport_not_all_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_not_all_ic")
    /// Image `onboarding_sport_professional_ic`.
    static let onboarding_sport_professional_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_professional_ic")
    /// Image `onboarding_sport_regulary_ic`.
    static let onboarding_sport_regulary_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_sport_regulary_ic")
    /// Image `onboarding_target_flag_ic`.
    static let onboarding_target_flag_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_target_flag_ic")
    /// Image `start_back_ic`.
    static let start_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_back_ic")
    /// Image `start_gradient_ic`.
    static let start_gradient_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_gradient_ic")
    /// Image `start_login_button_ic`.
    static let start_login_button_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_login_button_ic")
    /// Image `start_logo_ic`.
    static let start_logo_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "start_logo_ic")
    /// Image `tab_bar_energy_ic`.
    static let tab_bar_energy_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_energy_ic")
    /// Image `tab_bar_fun_ic`.
    static let tab_bar_fun_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_fun_ic")
    /// Image `tab_bar_menu_ic`.
    static let tab_bar_menu_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_menu_ic")
    /// Image `tab_bar_profile_ic`.
    static let tab_bar_profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_profile_ic")
    /// Image `tab_bar_workout_ic`.
    static let tab_bar_workout_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_bar_workout_ic")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auth_note_see_pass_ic", bundle: ..., traitCollection: ...)`
    static func auth_note_see_pass_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auth_note_see_pass_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auth_see_pass_ic", bundle: ..., traitCollection: ...)`
    static func auth_see_pass_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auth_see_pass_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_arrow_right_ic", bundle: ..., traitCollection: ...)`
    static func menu_arrow_right_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_arrow_right_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_flag_ic", bundle: ..., traitCollection: ...)`
    static func menu_flag_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_flag_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_back_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_background_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_background_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_background_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_classic_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_classic_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_classic_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_keto_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_keto_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_keto_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_pesca_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_pesca_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_pesca_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_vegan_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_vegan_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_vegan_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_food_vegetarian_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_food_vegetarian_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_food_vegetarian_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_gender_man_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_gender_man_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_gender_man_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_gender_women_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_gender_women_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_gender_women_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_selected_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_selected_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_selected_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_newbie_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_newbie_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_newbie_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_not_all_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_not_all_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_not_all_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_professional_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_professional_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_professional_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_sport_regulary_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_sport_regulary_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_sport_regulary_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_target_flag_ic", bundle: ..., traitCollection: ...)`
    static func onboarding_target_flag_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_target_flag_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_back_ic", bundle: ..., traitCollection: ...)`
    static func start_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_gradient_ic", bundle: ..., traitCollection: ...)`
    static func start_gradient_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_gradient_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_login_button_ic", bundle: ..., traitCollection: ...)`
    static func start_login_button_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_login_button_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start_logo_ic", bundle: ..., traitCollection: ...)`
    static func start_logo_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start_logo_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_energy_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_energy_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_energy_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_fun_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_fun_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_fun_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_menu_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_menu_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_menu_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_profile_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_bar_workout_ic", bundle: ..., traitCollection: ...)`
    static func tab_bar_workout_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_bar_workout_ic, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 34 nibs.
  struct nib {
    /// Nib `EnergyController`.
    static let energyController = _R.nib._EnergyController()
    /// Nib `LoginController`.
    static let loginController = _R.nib._LoginController()
    /// Nib `MainTabBarController`.
    static let mainTabBarController = _R.nib._MainTabBarController()
    /// Nib `MenuAgeController`.
    static let menuAgeController = _R.nib._MenuAgeController()
    /// Nib `MenuCell`.
    static let menuCell = _R.nib._MenuCell()
    /// Nib `MenuController`.
    static let menuController = _R.nib._MenuController()
    /// Nib `MenuEmailController`.
    static let menuEmailController = _R.nib._MenuEmailController()
    /// Nib `MenuFitnessController`.
    static let menuFitnessController = _R.nib._MenuFitnessController()
    /// Nib `MenuFoodController`.
    static let menuFoodController = _R.nib._MenuFoodController()
    /// Nib `MenuFoodSwitchCell`.
    static let menuFoodSwitchCell = _R.nib._MenuFoodSwitchCell()
    /// Nib `MenuFoodTitleCellCell`.
    static let menuFoodTitleCellCell = _R.nib._MenuFoodTitleCellCell()
    /// Nib `MenuHeightController`.
    static let menuHeightController = _R.nib._MenuHeightController()
    /// Nib `MenuLanguageController`.
    static let menuLanguageController = _R.nib._MenuLanguageController()
    /// Nib `MenuLanguagesTitleCell`.
    static let menuLanguagesTitleCell = _R.nib._MenuLanguagesTitleCell()
    /// Nib `MenuNameController`.
    static let menuNameController = _R.nib._MenuNameController()
    /// Nib `MenuTargetWeightController`.
    static let menuTargetWeightController = _R.nib._MenuTargetWeightController()
    /// Nib `MenuWeightController`.
    static let menuWeightController = _R.nib._MenuWeightController()
    /// Nib `MenuWriteQuestionController`.
    static let menuWriteQuestionController = _R.nib._MenuWriteQuestionController()
    /// Nib `ProfileController`.
    static let profileController = _R.nib._ProfileController()
    /// Nib `QuizeAgeController`.
    static let quizeAgeController = _R.nib._QuizeAgeController()
    /// Nib `QuizeEmailController`.
    static let quizeEmailController = _R.nib._QuizeEmailController()
    /// Nib `QuizeFoodCell`.
    static let quizeFoodCell = _R.nib._QuizeFoodCell()
    /// Nib `QuizeFoodController`.
    static let quizeFoodController = _R.nib._QuizeFoodController()
    /// Nib `QuizeGenderController`.
    static let quizeGenderController = _R.nib._QuizeGenderController()
    /// Nib `QuizeGoalController`.
    static let quizeGoalController = _R.nib._QuizeGoalController()
    /// Nib `QuizeHeightController`.
    static let quizeHeightController = _R.nib._QuizeHeightController()
    /// Nib `QuizeNameController`.
    static let quizeNameController = _R.nib._QuizeNameController()
    /// Nib `QuizeProgressController`.
    static let quizeProgressController = _R.nib._QuizeProgressController()
    /// Nib `QuizeSportController`.
    static let quizeSportController = _R.nib._QuizeSportController()
    /// Nib `QuizeTargetWeightController`.
    static let quizeTargetWeightController = _R.nib._QuizeTargetWeightController()
    /// Nib `QuizeWeightController`.
    static let quizeWeightController = _R.nib._QuizeWeightController()
    /// Nib `SplashViewController`.
    static let splashViewController = _R.nib._SplashViewController()
    /// Nib `StartController`.
    static let startController = _R.nib._StartController()
    /// Nib `WorkoutController`.
    static let workoutController = _R.nib._WorkoutController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EnergyController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.energyController) instead")
    static func energyController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.energyController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginController) instead")
    static func loginController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MainTabBarController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainTabBarController) instead")
    static func mainTabBarController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainTabBarController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuAgeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuAgeController) instead")
    static func menuAgeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuAgeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuCell) instead")
    static func menuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuController) instead")
    static func menuController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuEmailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuEmailController) instead")
    static func menuEmailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuEmailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFitnessController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFitnessController) instead")
    static func menuFitnessController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFitnessController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFoodController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFoodController) instead")
    static func menuFoodController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFoodController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFoodSwitchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFoodSwitchCell) instead")
    static func menuFoodSwitchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFoodSwitchCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuFoodTitleCellCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuFoodTitleCellCell) instead")
    static func menuFoodTitleCellCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuFoodTitleCellCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuHeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuHeightController) instead")
    static func menuHeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuHeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuLanguageController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuLanguageController) instead")
    static func menuLanguageController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuLanguageController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuLanguagesTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuLanguagesTitleCell) instead")
    static func menuLanguagesTitleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuLanguagesTitleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuNameController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuNameController) instead")
    static func menuNameController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuNameController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuTargetWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuTargetWeightController) instead")
    static func menuTargetWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuTargetWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuWeightController) instead")
    static func menuWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuWriteQuestionController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuWriteQuestionController) instead")
    static func menuWriteQuestionController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuWriteQuestionController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileController) instead")
    static func profileController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeAgeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeAgeController) instead")
    static func quizeAgeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeAgeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeEmailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeEmailController) instead")
    static func quizeEmailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeEmailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeFoodCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeFoodCell) instead")
    static func quizeFoodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeFoodCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeFoodController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeFoodController) instead")
    static func quizeFoodController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeFoodController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeGenderController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeGenderController) instead")
    static func quizeGenderController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeGenderController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeGoalController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeGoalController) instead")
    static func quizeGoalController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeGoalController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeHeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeHeightController) instead")
    static func quizeHeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeHeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeNameController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeNameController) instead")
    static func quizeNameController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeNameController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeProgressController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeProgressController) instead")
    static func quizeProgressController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeProgressController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeSportController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeSportController) instead")
    static func quizeSportController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeSportController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeTargetWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeTargetWeightController) instead")
    static func quizeTargetWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeTargetWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuizeWeightController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quizeWeightController) instead")
    static func quizeWeightController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quizeWeightController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SplashViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.splashViewController) instead")
    static func splashViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splashViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StartController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.startController) instead")
    static func startController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.startController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutController) instead")
    static func workoutController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutController)
    }
    #endif

    static func energyController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.energyController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mainTabBarController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mainTabBarController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuAgeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuAgeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuCell? {
      return R.nib.menuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuCell
    }

    static func menuController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuEmailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuEmailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuFitnessController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuFitnessController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuFoodController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuFoodController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuFoodSwitchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodSwitchCell? {
      return R.nib.menuFoodSwitchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodSwitchCell
    }

    static func menuFoodTitleCellCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodTitleCellCell? {
      return R.nib.menuFoodTitleCellCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodTitleCellCell
    }

    static func menuHeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuHeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuLanguageController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuLanguageController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuLanguagesTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuLanguagesTitleCell? {
      return R.nib.menuLanguagesTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuLanguagesTitleCell
    }

    static func menuNameController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuNameController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuTargetWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuTargetWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuWriteQuestionController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuWriteQuestionController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeAgeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeAgeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeEmailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeEmailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeFoodCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuizeFoodCell? {
      return R.nib.quizeFoodCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuizeFoodCell
    }

    static func quizeFoodController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeFoodController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeGenderController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeGenderController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeGoalController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeGoalController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeHeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeHeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeNameController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeNameController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeProgressController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeProgressController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeSportController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeSportController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeTargetWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeTargetWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quizeWeightController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quizeWeightController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func splashViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.splashViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func startController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.startController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func workoutController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.workoutController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MenuFoodSwitchCell`.
    static let menuFoodSwitchCell: Rswift.ReuseIdentifier<MenuFoodSwitchCell> = Rswift.ReuseIdentifier(identifier: "MenuFoodSwitchCell")
    /// Reuse identifier `MenuFoodTitleCellCell`.
    static let menuFoodTitleCellCell: Rswift.ReuseIdentifier<MenuFoodTitleCellCell> = Rswift.ReuseIdentifier(identifier: "MenuFoodTitleCellCell")
    /// Reuse identifier `MenuLanguagesTitleCell`.
    static let menuLanguagesTitleCell: Rswift.ReuseIdentifier<MenuLanguagesTitleCell> = Rswift.ReuseIdentifier(identifier: "MenuLanguagesTitleCell")
    /// Reuse identifier `QuizeFoodCell`.
    static let quizeFoodCell: Rswift.ReuseIdentifier<QuizeFoodCell> = Rswift.ReuseIdentifier(identifier: "QuizeFoodCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 81 localization keys.
    struct localizable {
      /// en translation: %d from %d
      ///
      /// Locales: en
      static let onboarding_count = Rswift.StringResource(key: "onboarding_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Age
      ///
      /// Locales: en
      static let menu_age = Rswift.StringResource(key: "menu_age", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Build muscle
      ///
      /// Locales: en
      static let onboarding_goal_muscle = Rswift.StringResource(key: "onboarding_goal_muscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: By continuing you accept our
      ///
      /// Locales: en
      static let login_by_continue = Rswift.StringResource(key: "login_by_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let login_forgot_cancel = Rswift.StringResource(key: "login_forgot_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Classic
      ///
      /// Locales: en
      static let onboarding_food_classic = Rswift.StringResource(key: "onboarding_food_classic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Diet Preferences
      ///
      /// Locales: en
      static let menu_food_preferences_title1 = Rswift.StringResource(key: "menu_food_preferences_title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Do you sports?
      ///
      /// Locales: en
      static let onboarding_sport_title = Rswift.StringResource(key: "onboarding_sport_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en
      static let login_email = Rswift.StringResource(key: "login_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en
      static let menu_email = Rswift.StringResource(key: "menu_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en
      static let menu_english = Rswift.StringResource(key: "menu_english", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Exclude from menu
      ///
      /// Locales: en
      static let menu_food_preferences_title2 = Rswift.StringResource(key: "menu_food_preferences_title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Exclude problem areas
      ///
      /// Locales: en
      static let menu_fitness_problem = Rswift.StringResource(key: "menu_fitness_problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: FT
      ///
      /// Locales: en
      static let onboarding_height_ft = Rswift.StringResource(key: "onboarding_height_ft", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: en
      static let onboarding_female = Rswift.StringResource(key: "onboarding_female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fitness level
      ///
      /// Locales: en
      static let menu_fitness_leve = Rswift.StringResource(key: "menu_fitness_leve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fitness preferences
      ///
      /// Locales: en
      static let menu_fitness = Rswift.StringResource(key: "menu_fitness", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Food preferences
      ///
      /// Locales: en
      static let menu_food_preferences = Rswift.StringResource(key: "menu_food_preferences", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Food preferences
      ///
      /// Locales: en
      static let onboarding_food_title = Rswift.StringResource(key: "onboarding_food_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static let login_fogot_pass = Rswift.StringResource(key: "login_fogot_pass", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static let login_forgot_title = Rswift.StringResource(key: "login_forgot_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Get My Plan
      ///
      /// Locales: en
      static let onboarding_email_get_plan = Rswift.StringResource(key: "onboarding_email_get_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Gey my personal plan
      ///
      /// Locales: en
      static let onboarding_get_plan = Rswift.StringResource(key: "onboarding_get_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Go next
      ///
      /// Locales: en
      static let onboarding_go_next = Rswift.StringResource(key: "onboarding_go_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Height
      ///
      /// Locales: en
      static let menu_height = Rswift.StringResource(key: "menu_height", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I do it regularly
      ///
      /// Locales: en
      static let onboarding_sport_regulary = Rswift.StringResource(key: "onboarding_sport_regulary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Just let me play
      ///
      /// Locales: en
      static let onboarding_goal_just_play = Rswift.StringResource(key: "onboarding_goal_just_play", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: KG
      ///
      /// Locales: en
      static let onboarding_weight_kg = Rswift.StringResource(key: "onboarding_weight_kg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Keep fit
      ///
      /// Locales: en
      static let onboarding_goal_keep_fit = Rswift.StringResource(key: "onboarding_goal_keep_fit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Keto
      ///
      /// Locales: en
      static let onboarding_food_keto = Rswift.StringResource(key: "onboarding_food_keto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: LB
      ///
      /// Locales: en
      static let onboarding_weight_lb = Rswift.StringResource(key: "onboarding_weight_lb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en
      static let menu_language = Rswift.StringResource(key: "menu_language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Log In
      ///
      /// Locales: en
      static let login_title = Rswift.StringResource(key: "login_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en
      static let login_button = Rswift.StringResource(key: "login_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lose weight
      ///
      /// Locales: en
      static let onboarding_goal_lose_weight = Rswift.StringResource(key: "onboarding_goal_lose_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en
      static let onboarding_male = Rswift.StringResource(key: "onboarding_male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Meals
      ///
      /// Locales: en
      static let login_meals = Rswift.StringResource(key: "login_meals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en
      static let menu_name = Rswift.StringResource(key: "menu_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Newbie
      ///
      /// Locales: en
      static let onboarding_sport_newbie = Rswift.StringResource(key: "onboarding_sport_newbie", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Not at all
      ///
      /// Locales: en
      static let onboarding_sport_not_all = Rswift.StringResource(key: "onboarding_sport_not_all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Notification
      ///
      /// Locales: en
      static let menu_notification = Rswift.StringResource(key: "menu_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en
      static let onboarding_other = Rswift.StringResource(key: "onboarding_other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en
      static let login_password = Rswift.StringResource(key: "login_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pescatarian
      ///
      /// Locales: en
      static let onboarding_food_pesca = Rswift.StringResource(key: "onboarding_food_pesca", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Playing
      ///
      /// Locales: en
      static let login_playing = Rswift.StringResource(key: "login_playing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter the email address that you used when creating your account.
      ///
      /// Locales: en
      static let login_forgot_subTitle = Rswift.StringResource(key: "login_forgot_subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static let login_privacy = Rswift.StringResource(key: "login_privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static let menu_privacy = Rswift.StringResource(key: "menu_privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy,
      ///
      /// Locales: en
      static let login_privacy_policy = Rswift.StringResource(key: "login_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Processing
      ///
      /// Locales: en
      static let onboarding_processing_title = Rswift.StringResource(key: "onboarding_processing_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Professional
      ///
      /// Locales: en
      static let onboarding_sport_professional = Rswift.StringResource(key: "onboarding_sport_professional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Reminders
      ///
      /// Locales: en
      static let menu_reminders = Rswift.StringResource(key: "menu_reminders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SM
      ///
      /// Locales: en
      static let onboarding_height_sm = Rswift.StringResource(key: "onboarding_height_sm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save Changes
      ///
      /// Locales: en
      static let menu_save_changes = Rswift.StringResource(key: "menu_save_changes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en
      static let menu_write_us_send = Rswift.StringResource(key: "menu_write_us_send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en
      static let menu_title = Rswift.StringResource(key: "menu_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en
      static let onboarding_food_skip = Rswift.StringResource(key: "onboarding_food_skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en
      static let login_start = Rswift.StringResource(key: "login_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en
      static let login_forgot_submit = Rswift.StringResource(key: "login_forgot_submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Target weight
      ///
      /// Locales: en
      static let menu_target_weight = Rswift.StringResource(key: "menu_target_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Target weigth
      ///
      /// Locales: en
      static let onboarding_targe_weight_title = Rswift.StringResource(key: "onboarding_targe_weight_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Subscribe
      ///
      /// Locales: en
      static let login_terms_of_subscribe = Rswift.StringResource(key: "login_terms_of_subscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let login_terms = Rswift.StringResource(key: "login_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let login_terms_use = Rswift.StringResource(key: "login_terms_use", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Use
      ///
      /// Locales: en
      static let menu_terms = Rswift.StringResource(key: "menu_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Text your message
      ///
      /// Locales: en
      static let menu_write_us_plcaheloder = Rswift.StringResource(key: "menu_write_us_plcaheloder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Vegan
      ///
      /// Locales: en
      static let onboarding_food_vegan = Rswift.StringResource(key: "onboarding_food_vegan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Vegetarian
      ///
      /// Locales: en
      static let onboarding_food_vegetarian = Rswift.StringResource(key: "onboarding_food_vegetarian", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: We create your personal nutrition and workout plan
      ///
      /// Locales: en
      static let onboarding_processing_subTitle = Rswift.StringResource(key: "onboarding_processing_subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Weight
      ///
      /// Locales: en
      static let menu_weight = Rswift.StringResource(key: "menu_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: What's your goal?
      ///
      /// Locales: en
      static let onboarding_goal_title = Rswift.StringResource(key: "onboarding_goal_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Workouts
      ///
      /// Locales: en
      static let login_workouts = Rswift.StringResource(key: "login_workouts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Write to us
      ///
      /// Locales: en
      static let menu_write = Rswift.StringResource(key: "menu_write", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Write us to ask any question
      ///
      /// Locales: en
      static let menu_write_us_title = Rswift.StringResource(key: "menu_write_us_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your age
      ///
      /// Locales: en
      static let onboarding_age_title = Rswift.StringResource(key: "onboarding_age_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your email
      ///
      /// Locales: en
      static let onboarding_email_title = Rswift.StringResource(key: "onboarding_email_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your gender
      ///
      /// Locales: en
      static let onboarding_gender_title = Rswift.StringResource(key: "onboarding_gender_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your height
      ///
      /// Locales: en
      static let onboarding_height_title = Rswift.StringResource(key: "onboarding_height_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your name
      ///
      /// Locales: en
      static let onboarding_name = Rswift.StringResource(key: "onboarding_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your weigth
      ///
      /// Locales: en
      static let onboarding_weight_title = Rswift.StringResource(key: "onboarding_weight_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: and
      ///
      /// Locales: en
      static let login_and = Rswift.StringResource(key: "login_and", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: %d from %d
      ///
      /// Locales: en
      static func onboarding_count(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("onboarding_count", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_count"
        }

        let format = NSLocalizedString("onboarding_count", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Age
      ///
      /// Locales: en
      static func menu_age(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_age", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_age"
        }

        return NSLocalizedString("menu_age", bundle: bundle, comment: "")
      }

      /// en translation: Build muscle
      ///
      /// Locales: en
      static func onboarding_goal_muscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_muscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_muscle"
        }

        return NSLocalizedString("onboarding_goal_muscle", bundle: bundle, comment: "")
      }

      /// en translation: By continuing you accept our
      ///
      /// Locales: en
      static func login_by_continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_by_continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_by_continue"
        }

        return NSLocalizedString("login_by_continue", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func login_forgot_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_cancel"
        }

        return NSLocalizedString("login_forgot_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Classic
      ///
      /// Locales: en
      static func onboarding_food_classic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_classic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_classic"
        }

        return NSLocalizedString("onboarding_food_classic", bundle: bundle, comment: "")
      }

      /// en translation: Diet Preferences
      ///
      /// Locales: en
      static func menu_food_preferences_title1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_food_preferences_title1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_food_preferences_title1"
        }

        return NSLocalizedString("menu_food_preferences_title1", bundle: bundle, comment: "")
      }

      /// en translation: Do you sports?
      ///
      /// Locales: en
      static func onboarding_sport_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_title"
        }

        return NSLocalizedString("onboarding_sport_title", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en
      static func login_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_email"
        }

        return NSLocalizedString("login_email", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en
      static func menu_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_email"
        }

        return NSLocalizedString("menu_email", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en
      static func menu_english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_english", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_english"
        }

        return NSLocalizedString("menu_english", bundle: bundle, comment: "")
      }

      /// en translation: Exclude from menu
      ///
      /// Locales: en
      static func menu_food_preferences_title2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_food_preferences_title2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_food_preferences_title2"
        }

        return NSLocalizedString("menu_food_preferences_title2", bundle: bundle, comment: "")
      }

      /// en translation: Exclude problem areas
      ///
      /// Locales: en
      static func menu_fitness_problem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_fitness_problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_fitness_problem"
        }

        return NSLocalizedString("menu_fitness_problem", bundle: bundle, comment: "")
      }

      /// en translation: FT
      ///
      /// Locales: en
      static func onboarding_height_ft(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_height_ft", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_height_ft"
        }

        return NSLocalizedString("onboarding_height_ft", bundle: bundle, comment: "")
      }

      /// en translation: Female
      ///
      /// Locales: en
      static func onboarding_female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_female"
        }

        return NSLocalizedString("onboarding_female", bundle: bundle, comment: "")
      }

      /// en translation: Fitness level
      ///
      /// Locales: en
      static func menu_fitness_leve(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_fitness_leve", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_fitness_leve"
        }

        return NSLocalizedString("menu_fitness_leve", bundle: bundle, comment: "")
      }

      /// en translation: Fitness preferences
      ///
      /// Locales: en
      static func menu_fitness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_fitness", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_fitness"
        }

        return NSLocalizedString("menu_fitness", bundle: bundle, comment: "")
      }

      /// en translation: Food preferences
      ///
      /// Locales: en
      static func menu_food_preferences(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_food_preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_food_preferences"
        }

        return NSLocalizedString("menu_food_preferences", bundle: bundle, comment: "")
      }

      /// en translation: Food preferences
      ///
      /// Locales: en
      static func onboarding_food_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_title"
        }

        return NSLocalizedString("onboarding_food_title", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static func login_fogot_pass(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_fogot_pass", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_fogot_pass"
        }

        return NSLocalizedString("login_fogot_pass", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static func login_forgot_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_title"
        }

        return NSLocalizedString("login_forgot_title", bundle: bundle, comment: "")
      }

      /// en translation: Get My Plan
      ///
      /// Locales: en
      static func onboarding_email_get_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_email_get_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_email_get_plan"
        }

        return NSLocalizedString("onboarding_email_get_plan", bundle: bundle, comment: "")
      }

      /// en translation: Gey my personal plan
      ///
      /// Locales: en
      static func onboarding_get_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_get_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_get_plan"
        }

        return NSLocalizedString("onboarding_get_plan", bundle: bundle, comment: "")
      }

      /// en translation: Go next
      ///
      /// Locales: en
      static func onboarding_go_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_go_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_go_next"
        }

        return NSLocalizedString("onboarding_go_next", bundle: bundle, comment: "")
      }

      /// en translation: Height
      ///
      /// Locales: en
      static func menu_height(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_height", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_height"
        }

        return NSLocalizedString("menu_height", bundle: bundle, comment: "")
      }

      /// en translation: I do it regularly
      ///
      /// Locales: en
      static func onboarding_sport_regulary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_regulary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_regulary"
        }

        return NSLocalizedString("onboarding_sport_regulary", bundle: bundle, comment: "")
      }

      /// en translation: Just let me play
      ///
      /// Locales: en
      static func onboarding_goal_just_play(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_just_play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_just_play"
        }

        return NSLocalizedString("onboarding_goal_just_play", bundle: bundle, comment: "")
      }

      /// en translation: KG
      ///
      /// Locales: en
      static func onboarding_weight_kg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_weight_kg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_weight_kg"
        }

        return NSLocalizedString("onboarding_weight_kg", bundle: bundle, comment: "")
      }

      /// en translation: Keep fit
      ///
      /// Locales: en
      static func onboarding_goal_keep_fit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_keep_fit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_keep_fit"
        }

        return NSLocalizedString("onboarding_goal_keep_fit", bundle: bundle, comment: "")
      }

      /// en translation: Keto
      ///
      /// Locales: en
      static func onboarding_food_keto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_keto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_keto"
        }

        return NSLocalizedString("onboarding_food_keto", bundle: bundle, comment: "")
      }

      /// en translation: LB
      ///
      /// Locales: en
      static func onboarding_weight_lb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_weight_lb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_weight_lb"
        }

        return NSLocalizedString("onboarding_weight_lb", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en
      static func menu_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_language"
        }

        return NSLocalizedString("menu_language", bundle: bundle, comment: "")
      }

      /// en translation: Log In
      ///
      /// Locales: en
      static func login_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_title"
        }

        return NSLocalizedString("login_title", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en
      static func login_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_button"
        }

        return NSLocalizedString("login_button", bundle: bundle, comment: "")
      }

      /// en translation: Lose weight
      ///
      /// Locales: en
      static func onboarding_goal_lose_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_lose_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_lose_weight"
        }

        return NSLocalizedString("onboarding_goal_lose_weight", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en
      static func onboarding_male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_male"
        }

        return NSLocalizedString("onboarding_male", bundle: bundle, comment: "")
      }

      /// en translation: Meals
      ///
      /// Locales: en
      static func login_meals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_meals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_meals"
        }

        return NSLocalizedString("login_meals", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en
      static func menu_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_name"
        }

        return NSLocalizedString("menu_name", bundle: bundle, comment: "")
      }

      /// en translation: Newbie
      ///
      /// Locales: en
      static func onboarding_sport_newbie(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_newbie", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_newbie"
        }

        return NSLocalizedString("onboarding_sport_newbie", bundle: bundle, comment: "")
      }

      /// en translation: Not at all
      ///
      /// Locales: en
      static func onboarding_sport_not_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_not_all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_not_all"
        }

        return NSLocalizedString("onboarding_sport_not_all", bundle: bundle, comment: "")
      }

      /// en translation: Notification
      ///
      /// Locales: en
      static func menu_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_notification"
        }

        return NSLocalizedString("menu_notification", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en
      static func onboarding_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_other"
        }

        return NSLocalizedString("onboarding_other", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en
      static func login_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_password"
        }

        return NSLocalizedString("login_password", bundle: bundle, comment: "")
      }

      /// en translation: Pescatarian
      ///
      /// Locales: en
      static func onboarding_food_pesca(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_pesca", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_pesca"
        }

        return NSLocalizedString("onboarding_food_pesca", bundle: bundle, comment: "")
      }

      /// en translation: Playing
      ///
      /// Locales: en
      static func login_playing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_playing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_playing"
        }

        return NSLocalizedString("login_playing", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the email address that you used when creating your account.
      ///
      /// Locales: en
      static func login_forgot_subTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_subTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_subTitle"
        }

        return NSLocalizedString("login_forgot_subTitle", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static func login_privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_privacy"
        }

        return NSLocalizedString("login_privacy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static func menu_privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_privacy"
        }

        return NSLocalizedString("menu_privacy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy,
      ///
      /// Locales: en
      static func login_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_privacy_policy"
        }

        return NSLocalizedString("login_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Processing
      ///
      /// Locales: en
      static func onboarding_processing_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_processing_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_processing_title"
        }

        return NSLocalizedString("onboarding_processing_title", bundle: bundle, comment: "")
      }

      /// en translation: Professional
      ///
      /// Locales: en
      static func onboarding_sport_professional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_sport_professional", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_sport_professional"
        }

        return NSLocalizedString("onboarding_sport_professional", bundle: bundle, comment: "")
      }

      /// en translation: Reminders
      ///
      /// Locales: en
      static func menu_reminders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_reminders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_reminders"
        }

        return NSLocalizedString("menu_reminders", bundle: bundle, comment: "")
      }

      /// en translation: SM
      ///
      /// Locales: en
      static func onboarding_height_sm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_height_sm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_height_sm"
        }

        return NSLocalizedString("onboarding_height_sm", bundle: bundle, comment: "")
      }

      /// en translation: Save Changes
      ///
      /// Locales: en
      static func menu_save_changes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_save_changes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_save_changes"
        }

        return NSLocalizedString("menu_save_changes", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en
      static func menu_write_us_send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write_us_send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write_us_send"
        }

        return NSLocalizedString("menu_write_us_send", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en
      static func menu_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_title"
        }

        return NSLocalizedString("menu_title", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en
      static func onboarding_food_skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_skip"
        }

        return NSLocalizedString("onboarding_food_skip", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en
      static func login_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_start"
        }

        return NSLocalizedString("login_start", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en
      static func login_forgot_submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_forgot_submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_forgot_submit"
        }

        return NSLocalizedString("login_forgot_submit", bundle: bundle, comment: "")
      }

      /// en translation: Target weight
      ///
      /// Locales: en
      static func menu_target_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_target_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_target_weight"
        }

        return NSLocalizedString("menu_target_weight", bundle: bundle, comment: "")
      }

      /// en translation: Target weigth
      ///
      /// Locales: en
      static func onboarding_targe_weight_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_targe_weight_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_targe_weight_title"
        }

        return NSLocalizedString("onboarding_targe_weight_title", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Subscribe
      ///
      /// Locales: en
      static func login_terms_of_subscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_terms_of_subscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_terms_of_subscribe"
        }

        return NSLocalizedString("login_terms_of_subscribe", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func login_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_terms"
        }

        return NSLocalizedString("login_terms", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func login_terms_use(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_terms_use", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_terms_use"
        }

        return NSLocalizedString("login_terms_use", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Use
      ///
      /// Locales: en
      static func menu_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_terms"
        }

        return NSLocalizedString("menu_terms", bundle: bundle, comment: "")
      }

      /// en translation: Text your message
      ///
      /// Locales: en
      static func menu_write_us_plcaheloder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write_us_plcaheloder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write_us_plcaheloder"
        }

        return NSLocalizedString("menu_write_us_plcaheloder", bundle: bundle, comment: "")
      }

      /// en translation: Vegan
      ///
      /// Locales: en
      static func onboarding_food_vegan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_vegan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_vegan"
        }

        return NSLocalizedString("onboarding_food_vegan", bundle: bundle, comment: "")
      }

      /// en translation: Vegetarian
      ///
      /// Locales: en
      static func onboarding_food_vegetarian(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_food_vegetarian", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_food_vegetarian"
        }

        return NSLocalizedString("onboarding_food_vegetarian", bundle: bundle, comment: "")
      }

      /// en translation: We create your personal nutrition and workout plan
      ///
      /// Locales: en
      static func onboarding_processing_subTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_processing_subTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_processing_subTitle"
        }

        return NSLocalizedString("onboarding_processing_subTitle", bundle: bundle, comment: "")
      }

      /// en translation: Weight
      ///
      /// Locales: en
      static func menu_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_weight"
        }

        return NSLocalizedString("menu_weight", bundle: bundle, comment: "")
      }

      /// en translation: What's your goal?
      ///
      /// Locales: en
      static func onboarding_goal_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_goal_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_goal_title"
        }

        return NSLocalizedString("onboarding_goal_title", bundle: bundle, comment: "")
      }

      /// en translation: Workouts
      ///
      /// Locales: en
      static func login_workouts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_workouts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_workouts"
        }

        return NSLocalizedString("login_workouts", bundle: bundle, comment: "")
      }

      /// en translation: Write to us
      ///
      /// Locales: en
      static func menu_write(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write"
        }

        return NSLocalizedString("menu_write", bundle: bundle, comment: "")
      }

      /// en translation: Write us to ask any question
      ///
      /// Locales: en
      static func menu_write_us_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_write_us_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_write_us_title"
        }

        return NSLocalizedString("menu_write_us_title", bundle: bundle, comment: "")
      }

      /// en translation: Your age
      ///
      /// Locales: en
      static func onboarding_age_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_age_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_age_title"
        }

        return NSLocalizedString("onboarding_age_title", bundle: bundle, comment: "")
      }

      /// en translation: Your email
      ///
      /// Locales: en
      static func onboarding_email_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_email_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_email_title"
        }

        return NSLocalizedString("onboarding_email_title", bundle: bundle, comment: "")
      }

      /// en translation: Your gender
      ///
      /// Locales: en
      static func onboarding_gender_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_gender_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_gender_title"
        }

        return NSLocalizedString("onboarding_gender_title", bundle: bundle, comment: "")
      }

      /// en translation: Your height
      ///
      /// Locales: en
      static func onboarding_height_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_height_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_height_title"
        }

        return NSLocalizedString("onboarding_height_title", bundle: bundle, comment: "")
      }

      /// en translation: Your name
      ///
      /// Locales: en
      static func onboarding_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_name"
        }

        return NSLocalizedString("onboarding_name", bundle: bundle, comment: "")
      }

      /// en translation: Your weigth
      ///
      /// Locales: en
      static func onboarding_weight_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding_weight_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding_weight_title"
        }

        return NSLocalizedString("onboarding_weight_title", bundle: bundle, comment: "")
      }

      /// en translation: and
      ///
      /// Locales: en
      static func login_and(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_and", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_and"
        }

        return NSLocalizedString("login_and", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _LoginController.validate()
      try _MainTabBarController.validate()
      try _MenuAgeController.validate()
      try _MenuCell.validate()
      try _MenuController.validate()
      try _MenuEmailController.validate()
      try _MenuFitnessController.validate()
      try _MenuFoodController.validate()
      try _MenuHeightController.validate()
      try _MenuLanguageController.validate()
      try _MenuLanguagesTitleCell.validate()
      try _MenuNameController.validate()
      try _MenuTargetWeightController.validate()
      try _MenuWeightController.validate()
      try _MenuWriteQuestionController.validate()
      try _QuizeAgeController.validate()
      try _QuizeEmailController.validate()
      try _QuizeFoodCell.validate()
      try _QuizeFoodController.validate()
      try _QuizeGenderController.validate()
      try _QuizeGoalController.validate()
      try _QuizeHeightController.validate()
      try _QuizeNameController.validate()
      try _QuizeProgressController.validate()
      try _QuizeSportController.validate()
      try _QuizeTargetWeightController.validate()
      try _QuizeWeightController.validate()
      try _SplashViewController.validate()
      try _StartController.validate()
    }

    struct _EnergyController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EnergyController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LoginController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "auth_note_see_pass_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'auth_note_see_pass_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'LoginController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MainTabBarController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainTabBarController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tab_bar_energy_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_energy_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_fun_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_fun_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_menu_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_menu_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_profile_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_bar_workout_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_bar_workout_ic' is used in nib 'MainTabBarController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuAgeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuAgeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuAgeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuAgeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "menu_arrow_right_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_arrow_right_ic' is used in nib 'MenuCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_flag_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_flag_ic' is used in nib 'MenuCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuEmailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuEmailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuEmailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuEmailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuFitnessController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuFitnessController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuFitnessController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuFitnessController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuFoodController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuFoodController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuFoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuFoodController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuFoodSwitchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuFoodSwitchCell

      let bundle = R.hostingBundle
      let identifier = "MenuFoodSwitchCell"
      let name = "MenuFoodSwitchCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodSwitchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodSwitchCell
      }

      fileprivate init() {}
    }

    struct _MenuFoodTitleCellCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuFoodTitleCellCell

      let bundle = R.hostingBundle
      let identifier = "MenuFoodTitleCellCell"
      let name = "MenuFoodTitleCellCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuFoodTitleCellCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuFoodTitleCellCell
      }

      fileprivate init() {}
    }

    struct _MenuHeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuHeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuHeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuHeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuLanguageController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuLanguageController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuLanguageController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuLanguageController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuLanguagesTitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MenuLanguagesTitleCell

      let bundle = R.hostingBundle
      let identifier = "MenuLanguagesTitleCell"
      let name = "MenuLanguagesTitleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuLanguagesTitleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuLanguagesTitleCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'MenuLanguagesTitleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuNameController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuNameController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuNameController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuNameController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuTargetWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuTargetWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_target_flag_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_target_flag_ic' is used in nib 'MenuTargetWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuWriteQuestionController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuWriteQuestionController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'MenuWriteQuestionController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'MenuWriteQuestionController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProfileController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _QuizeAgeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeAgeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeAgeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeAgeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeEmailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeEmailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeEmailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeEmailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeFoodCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QuizeFoodCell

      let bundle = R.hostingBundle
      let identifier = "QuizeFoodCell"
      let name = "QuizeFoodCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuizeFoodCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuizeFoodCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_food_classic_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_food_classic_ic' is used in nib 'QuizeFoodCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'QuizeFoodCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeFoodController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeFoodController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeFoodController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeFoodController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeGenderController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeGenderController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_gender_man_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_gender_man_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_gender_women_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_gender_women_ic' is used in nib 'QuizeGenderController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeGoalController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeGoalController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeGoalController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeGoalController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeHeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeHeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeHeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeHeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeNameController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeNameController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeNameController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeNameController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeProgressController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeProgressController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeProgressController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeSportController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeSportController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_food_classic_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_food_classic_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_selected_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_selected_ic' is used in nib 'QuizeSportController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeTargetWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeTargetWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeTargetWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_target_flag_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_target_flag_ic' is used in nib 'QuizeTargetWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuizeWeightController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizeWeightController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboarding_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_back_ic' is used in nib 'QuizeWeightController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_background_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboarding_background_ic' is used in nib 'QuizeWeightController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SplashViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SplashViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "start_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_back_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_gradient_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_login_button_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_login_button_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_logo_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_logo_ic' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _StartController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StartController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "start_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_back_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_gradient_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_login_button_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_login_button_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_logo_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_logo_ic' is used in nib 'StartController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WorkoutController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "start_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_back_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_gradient_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_gradient_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_login_button_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_login_button_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start_logo_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start_logo_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
